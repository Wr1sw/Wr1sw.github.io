<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CS61B GITLET PROJECT</title>
    <url>/2022/06/20/CS61B-GITLET-PROJECT/</url>
    <content><![CDATA[<h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><ul>
<li>创建 .gitlet 目录， 并在其中新建一些文件来存储序列化信息</li>
<li>init 会自动创建一个包含 initial commit 信息的Commit 开始</li>
</ul>
<ol>
<li>执行 setupPersistence() 初始化方法,创建 .gitlet 目录、创建 refs 目录(创建heads子目录)、创建 objects 目录。</li>
<li>接下来执行 setCurrentBranch() 方法初始化 当前默认分支，也就是把 HEAD 文件里面填充一句：ref: refs/heads/master。</li>
<li>接下来 初始化首次Commit。执行FirstCommit()。这个方法主要执行三个方法 初始化Commit对象()、序列化保存首次Commit、把 SHAID 填入 refs/heads/master 文件中</li>
<li>在Commit() 构造函数中，新建 date、message、和 fathers 以及 tracked，接下来生成 SHAID 填入 id字段中，接下来通过id前两位生成目录，其余位数作为文件名 </li>
<li>上面第四步生成的文件还没有保存到文件中，需要执行 save() 方法保存序列化的Commit对象到文件中。</li>
</ol>
]]></content>
      <categories>
        <category>CS61B</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>CS61B</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习2</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A02/</url>
    <content><![CDATA[<h3 id="数据库对象——简介"><a href="#数据库对象——简介" class="headerlink" title="数据库对象——简介"></a>数据库对象——简介</h3><h4 id="1-1-Oracle服务器的方案对象和非方案对象的概念"><a href="#1-1-Oracle服务器的方案对象和非方案对象的概念" class="headerlink" title="1.1 Oracle服务器的方案对象和非方案对象的概念"></a>1.1 Oracle服务器的方案对象和非方案对象的概念</h4><h5 id="1-1-1-方案"><a href="#1-1-1-方案" class="headerlink" title="1.1.1 方案"></a>1.1.1 方案</h5><p>​    Oracle通过方案来组织和维护表、视图、索引、等数据库对象</p>
<ul>
<li><p>概念：是一系列逻辑数据结构或对象的集合。一个方案只能够被一个数据库用户所拥有，并且方案的名称与这个用户的名称相同。</p>
</li>
<li><p>Oracle数据库中的每个用户都拥有一个唯一的方案，他所创建的所有方案对象都保存在自己的方案中</p>
</li>
</ul>
<h5 id="1-1-2-方案对象"><a href="#1-1-2-方案对象" class="headerlink" title="1.1.2 方案对象"></a>1.1.2 方案对象</h5><p>​    在Oracle数据库中不是所有对象都是方案。方案对象有：</p>
<p><img src="1-1-2.png"></p>
<h5 id="1-1-3-非方案对象的类型"><a href="#1-1-3-非方案对象的类型" class="headerlink" title="1.1.3 非方案对象的类型"></a>1.1.3 非方案对象的类型</h5><p>在Oracle数据库中不是所有的对象都是方案，还有一些数据库对象不属于任何方案，这些对象称为<strong>非方案对象</strong>，其类型有：</p>
<ul>
<li>表空间 Tablespaces</li>
<li>用户 Users</li>
<li>角色 Roles</li>
<li>回退段 Rollback segments</li>
<li>目录 Directories</li>
</ul>
<p><img src="1-1-3.png"></p>
<h5 id="1-2-表、视图、索引、序列等数据库对象的声明和创建方法"><a href="#1-2-表、视图、索引、序列等数据库对象的声明和创建方法" class="headerlink" title="1.2 表、视图、索引、序列等数据库对象的声明和创建方法"></a>1.2 表、视图、索引、序列等数据库对象的声明和创建方法</h5><h6 id="1-2-1-表"><a href="#1-2-1-表" class="headerlink" title="1.2.1 表"></a>1.2.1 表</h6><ul>
<li>表是Oracle数据库中基本的数据库存储结构。在定义表时为表建立多个字段，数据以行的记录的形式存储在表中。</li>
</ul>
<p><img src="1-2-1.png"></p>
<p>字段约束：在创建表时，可对表的各个字段设置约束，强制规定表中的数据必须满足的条件。通过使用约束可以保证关系数据库中的三类完整性规则：</p>
<ul>
<li>实体完整性</li>
<li>参照完整性</li>
<li>用户定义完整性</li>
</ul>
<p>NULL值：在Oracle表中，某个字段可以不包含任何值，则称该字段具有“NULL”值</p>
<p>数据完整性约束：数据完整性约束使用户定义的一系列规则，用于防止错误的或无效的数据被插入或删除。在Oracle中，一共可以为表中的字段定义如下五种类型的约束：</p>
<ul>
<li>PRIMARY KEY 主码约束</li>
<li>NOT NULL 非空约束</li>
<li>UNIQUE 唯一码约束</li>
<li>FOREIGN KEY 外键(外部码)约束</li>
<li>CHECK 约束</li>
</ul>
<h6 id="1-2-2-视图"><a href="#1-2-2-视图" class="headerlink" title="1.2.2 视图"></a>1.2.2 视图</h6><ul>
<li><strong>视图</strong>是由一个或多个表（或其他视图）中的数据的一种定制的表示，是用一个查询定义，所以可认为是一个存储的查询（stored query）或是一个虚表(virtual table)。视图可在使用表的许多地方使用。</li>
<li>引入<strong>视图的好处</strong><ul>
<li>通过限制对表的行预定义集合的存取，为表提供附加的<strong>安全性</strong></li>
<li>隐藏数据<strong>复杂性</strong></li>
<li>为用户<strong>简化命令</strong></li>
<li>为基本表的数据提供另一种观点</li>
<li>可将应用隔离基本表定义的修改</li>
<li>用于不用视图无法表示的查询</li>
<li>用于<strong>保存复杂查询</strong></li>
</ul>
</li>
</ul>
<p>创建视图(以EMP为基础表创建STAFF视图)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> staff <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> empno, ename,job,mgr,deptno  <span class="hljs-keyword">FROM</span> emp<br><br></code></pre></td></tr></table></figure>



<p><img src="1-2-2.png"></p>
<ul>
<li><p>创建视图（以EMP和DEPT为基础表创建EMP_VIEW视图）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> emp_view <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> empno, ename, sal, loc<br><span class="hljs-keyword">FROM</span> emp, dept<br><span class="hljs-keyword">WHERE</span> emp.deptno <span class="hljs-operator">=</span> dept.deptno <span class="hljs-keyword">AND</span>  dept.deptno <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li>
<li><p>查询EMP_VIEW视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ename  <span class="hljs-keyword">FROM</span> emp_view  <span class="hljs-keyword">WHERE</span> empno <span class="hljs-operator">=</span> <span class="hljs-number">9876</span><br></code></pre></td></tr></table></figure></li>
<li><p>Oracle将上述查询语句合并为如下查询语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ename  <span class="hljs-keyword">FROM</span> emp, dept<br><span class="hljs-keyword">WHERE</span> emp.deptno <span class="hljs-operator">=</span> dept.deptno  <span class="hljs-keyword">AND</span>  dept.deptno <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">AND</span>  emp.empno <span class="hljs-operator">=</span> <span class="hljs-number">9876</span><br></code></pre></td></tr></table></figure></li>
<li><p>重定义视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">VIEW</span> emp_view <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> empno, ename, sal, loc<br><span class="hljs-keyword">FROM</span> emp, dept<br><span class="hljs-keyword">WHERE</span> emp.deptno <span class="hljs-operator">=</span> dept.deptno;<br></code></pre></td></tr></table></figure></li>
<li><p>删除视图</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> emp_view;<br></code></pre></td></tr></table></figure></li>
</ul>
<h6 id="1-2-3-索引"><a href="#1-2-3-索引" class="headerlink" title="1.2.3 索引"></a>1.2.3 索引</h6><p><img src="1-3-1.png"></p>
<h6 id="1-2-4-序列"><a href="#1-2-4-序列" class="headerlink" title="1.2.4 序列"></a>1.2.4 序列</h6><ul>
<li><p>序列：序列也称序列生成器(sequence generator)产生序列号。在多用户环境下该序列生成器特别有用，可生成各返回序列号而不需要磁盘I/O或事务封锁。</p>
</li>
<li><p>•序列号为ORACLE整数，最多可有<strong>38</strong>个数字。</p>
</li>
<li><p>序列的创建</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> SEQUENCE project_team_seq<br>               <span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> <span class="hljs-number">1000</span> INCREMENT <span class="hljs-keyword">BY</span> <span class="hljs-number">1</span><br>               MINVALUE <span class="hljs-number">1</span><br>               CACHE <span class="hljs-number">1000</span> NOCYCLE NOORDER<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">/</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> project_team_seq.NEXTVAL <span class="hljs-keyword">FROM</span> DUAL;<br><br></code></pre></td></tr></table></figure>

<h6 id="1-2-4-同义词"><a href="#1-2-4-同义词" class="headerlink" title="1.2.4 同义词"></a>1.2.4 同义词</h6></li>
<li><p>一个同义词(synonym)为任何表、视图、快照、序列、过程、函数或包的别名，其定义存储在数据字典中。同义词因安全性和方便原因而经常使用，可用于：</p>
<ul>
<li>可屏蔽对象的名字及其持有者。</li>
<li>为分布式数据库的远程对象提供位置透明性。</li>
<li>为用户提供一个简单且易于区分的名字。</li>
</ul>
</li>
<li><p>有两种同义词：公用和专用</p>
<ul>
<li>一个公用同义词为命名为PUBLIC特殊用户组所持有，可为数据库中每一个用户所存取。</li>
<li>一个专用同义词是包含在指定用户的方案中，仅为该用户和授权的用户所使用。</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 私有同义词</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> SYNONYM SALG <span class="hljs-keyword">FOR</span> SCOTT.SALGRADE<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">/</span><br><span class="hljs-comment">-- 共有同义词</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> PUBLIC SYNONYM P_SALG <span class="hljs-keyword">FOR</span> SCOTT.SALGRADE<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-operator">/</span><br><br></code></pre></td></tr></table></figure>

<h6 id="1-2-5-角色"><a href="#1-2-5-角色" class="headerlink" title="1.2.5 角色"></a>1.2.5 角色</h6><p><img src="1-2-5.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建、删除角色</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> ROLE oe_clerk;<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> ROLE hr_clerk<br>			IDENTIFIED <span class="hljs-keyword">BY</span> bonus;<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> ROLE hr_manager<br>			IDENTIFIED EXTERNALLY;<br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> ROLE oe_clerk;<br><br></code></pre></td></tr></table></figure>



<h6 id="1-2-6-用户"><a href="#1-2-6-用户" class="headerlink" title="1.2.6 用户"></a>1.2.6 用户</h6><ul>
<li><p>创建、删除用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> user_name<br>IDENTIFIED <span class="hljs-keyword">BY</span> password<br>[<span class="hljs-keyword">DEFAULT</span> TABLESPACE tablespace_name]<br>[TEMPORARY TABLESPACE tablespace_name]<br>[QUOTA quota_number [K <span class="hljs-operator">|</span> M] <span class="hljs-operator">|</span> UNLIMITED <span class="hljs-keyword">ON</span> tablespace_name]<br>[PROFILE profile_name]<br>[PASSWORD expire]<br>[ACCOUNT lock<span class="hljs-operator">|</span> unlock] <br></code></pre></td></tr></table></figure>

<p><img src="1-2-6.png"></p>
</li>
<li><p>命令解释 </p>
<ul>
<li>CREATE USER username —用户名</li>
<li>IDENTIFIED BY password—- 用户口令</li>
<li>[DEFAULT TABLESPACE tablespace ]— 缺省的表空间,该用户创建的对象默认存在此。</li>
<li>[TEMPORARY TABLESPACE tablespace] —该用户使用的缺省的临时表空间</li>
<li>[[QUOTA [integer K[M]][UNLIMITED] ON tablespace —用户在该表空间中允许使用k[m]字节</li>
<li>[PROFILES profile_name] —概要文件的名字</li>
<li>[PASSWORD EXPIRE] —立即将口令设成过期状态，用户在登录进入前必须修改口令。</li>
<li>[ACCOUNT LOCK or ACCOUNT UNLOCK] —用户是否被加锁</li>
</ul>
</li>
<li><p>启用与禁用用户</p>
<ul>
<li>禁用用户账户      ALTER USER user_name ACCOUNT LOCK;</li>
<li>启用用户账户      ALTER USER user_name ACCOUNT UNLOCK;</li>
</ul>
</li>
<li><p>删除用户 </p>
<ul>
<li><p>DROP USER user_name [CASCADE] </p>
</li>
<li><p>如果该用户方案中已存在方案对象，则需要带有CASCADE子句。 </p>
</li>
</ul>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例1  创建新用户zhangsan，密码为abcdef，命令如下。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> zhangsan<br>IDENTIFIED <span class="hljs-keyword">BY</span> abcdef;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例2  创建新用户lisi，密码为abcdef，表空间为users，并且在users表空间上可以使-- 用10M的磁盘空间。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> lisi  IDENTIFIED <span class="hljs-keyword">BY</span> abcdef<br><span class="hljs-keyword">DEFAULT</span> TABLESPACE users<br>QUOTA <span class="hljs-number">10</span>M <span class="hljs-keyword">ON</span> users; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例3  创建新用户allen，密码为abcdef，并且设置密码已过期，用户的状态为加锁。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> allen<br>IDENTIFIED <span class="hljs-keyword">BY</span> abcdef<br>PASSWORD expire<br>ACCOUNT lock; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例4  为新用户zhangsan授予和数据库建立会话的权限，并用zhangsan连接数据库。</span><br><span class="hljs-comment">--在授权之前，用zhangsan连接数据库的操作失败</span><br><span class="hljs-keyword">CONNECT</span> zhangsan<span class="hljs-operator">/</span>abcdef; <br><span class="hljs-comment">--以system连接数据库，并使用GRANT命令为新用户授权</span><br><span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">system</span><span class="hljs-operator">/</span>abcdef;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CREATE</span> SESSION <span class="hljs-keyword">TO</span> zhangsan;<br><span class="hljs-comment">--授权后，再用zhangsan连接数据库，操作成功</span><br><span class="hljs-keyword">CONNECT</span> zhangsan<span class="hljs-operator">/</span>abcdef; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例5  为新用户lisi授予CONNECT的角色。</span><br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">TO</span> lisi;<br><span class="hljs-keyword">CONNECT</span> lisi<span class="hljs-operator">/</span>abcdef;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例6  修改用户zhangsan的密码为ora，并设置默认表空间为users表空间，在该表空间中可以使用无限大的磁盘空间。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> zhangsan<br>IDENTIFIED <span class="hljs-keyword">BY</span> ora<br><span class="hljs-keyword">DEFAULT</span> TABLESPACE users<br>QUOTA UNLIMITED <span class="hljs-keyword">ON</span> users; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例7  为数据库中用户账号scott解锁，启用该账号。</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> scott ACCOUNT UNLOCK;<br><br><span class="hljs-keyword">CONNECT</span> scott<span class="hljs-operator">/</span>tiger;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例8  删除用户zhangsan。</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> zhangsan;<br></code></pre></td></tr></table></figure>



<h5 id="1-3-数据库对象在数据库中的存储结构"><a href="#1-3-数据库对象在数据库中的存储结构" class="headerlink" title="1.3 数据库对象在数据库中的存储结构"></a>1.3 数据库对象在数据库中的存储结构</h5>]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习3</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A03/</url>
    <content><![CDATA[<h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><h5 id="Oracle-SQL种类"><a href="#Oracle-SQL种类" class="headerlink" title="Oracle SQL种类"></a>Oracle SQL种类</h5><ul>
<li><p><strong>数据定义语言 Data Definition Language Statements（DDL）</strong></p>
</li>
<li><p><strong>数据操纵语言 Data Manipulation Language（DML） Statements</strong></p>
</li>
<li><p>事务控制 Transaction Control Statements </p>
</li>
<li><p>会话控制 Session Control Statements </p>
</li>
<li><p>系统控制 System Control Statements </p>
</li>
<li><p>嵌入SQL Embedded SQL Statements</p>
</li>
</ul>
<h5 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h5><ul>
<li><p>Create、alter和drop方案对象与数据库结构 (CREATE, ALTER, DROP)</p>
</li>
<li><p>改变方案对象名称 (RENAME) </p>
</li>
<li><p>TRUNCATE</p>
</li>
<li><p>权限和角色的授予与回收 (GRANT, REVOKE) </p>
</li>
<li><p>打开与关闭审计操作 (AUDIT, NOAUDIT)</p>
</li>
<li><p>增加注释到数据字典 (COMMENT) </p>
</li>
<li><p><strong>当用户执行DDL语句时，在每一条DDL语句执行前后，Oracle都将提交当前的事务，理解这一点很重要。</strong></p>
</li>
</ul>
<p><img src="1-1.png"></p>
<h5 id="表的命名规定"><a href="#表的命名规定" class="headerlink" title="表的命名规定"></a>表的命名规定</h5><ol>
<li><strong>必须是以字母开头。</strong></li>
<li>1-30个字符长度</li>
<li><strong>仅能包括A-Z，a-z，0-9，_,$,#</strong></li>
<li>在同一个用户下表明不能重复</li>
<li>不能是Oracle保留字</li>
</ol>
<h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p><img src="1-2.png"></p>
<h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><p>创建者必须具有</p>
<ul>
<li><p>CREATE TABLE 权限</p>
</li>
<li><p>一个存储区</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [schema.]tablename  <br>             (columnname datatype [<span class="hljs-keyword">DEFAULT</span> expr][, 			...]);<br><br></code></pre></td></tr></table></figure></li>
<li><p>数据库表名</p>
</li>
<li><p>定义列（名称、数据类型、长度和缺省值）</p>
</li>
</ul>
<h5 id="列的缺省值"><a href="#列的缺省值" class="headerlink" title="列的缺省值"></a>列的缺省值</h5><ul>
<li>指定列的缺省值， 在以后的INSERT语句中忽略该列值时， 将此缺省值赋给该列。</li>
<li>默认值的数据类型必须和列的数据类型匹配</li>
<li>表达式、SQL函数和数值都是合法的值</li>
<li>不能包括其他列和伪列的引用（ROWNUM，NEXTVAL，LEVEL和CURRVAL）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept(<br>	deptno number(<span class="hljs-number">2</span>),<br>	dname varchar2(<span class="hljs-number">14</span>),<br>	loc varchar2(<span class="hljs-number">13</span>));<br>	<br><span class="hljs-comment">-- Table created</span><br><span class="hljs-keyword">describe</span> dept<br><br><span class="hljs-comment">-- NAME                NULL?       Type</span><br>_____________________________________________<br>DEPTNO                 <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>     NUMBER(<span class="hljs-number">2</span>)<br>DNAME                               VARCHAR2(<span class="hljs-number">14</span>)<br>LOC                                 VARCHAR2(<span class="hljs-number">13</span>)<br><br><br></code></pre></td></tr></table></figure>

<h5 id="使用子查询创建表"><a href="#使用子查询创建表" class="headerlink" title="使用子查询创建表"></a>使用子查询创建表</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 语法</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">table</span><br>  	  [<span class="hljs-keyword">column</span>(, column...)]<br><span class="hljs-keyword">AS</span> subquery;<br><br><span class="hljs-comment">--------------------------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> dept30 <br>	<span class="hljs-keyword">as</span> <br>		<span class="hljs-keyword">select</span> empno, ename, sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> annsal, hiredate<br>		<span class="hljs-keyword">from</span> emp<br>		<span class="hljs-keyword">where</span> deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br></code></pre></td></tr></table></figure>

<hr>
<h5 id="更改表"><a href="#更改表" class="headerlink" title="更改表"></a>更改表</h5><ol>
<li><p>增加或删除列</p>
</li>
<li><p>增加完整性约束</p>
</li>
<li><p>重新定义列（数据类型、长度、缺省值）</p>
</li>
<li><p>修改存储参数或其它参数</p>
</li>
<li><p>使能、使不能或删除一完整性约束或触发器</p>
</li>
<li><p>显式地分配一个范围</p>
</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-keyword">table</span><br><span class="hljs-keyword">ADD</span>		   (<span class="hljs-keyword">column</span> datatype [<span class="hljs-keyword">DEFAULT</span> expr]<br>		   [, <span class="hljs-keyword">column</span> datatype]...);<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> DEPT30<br>	<span class="hljs-keyword">ADD</span> (job VARCHAR2(<span class="hljs-number">9</span>));<br></code></pre></td></tr></table></figure>

<p><img src="1-3.png"></p>
<hr>
<h5 id="改变表名称"><a href="#改变表名称" class="headerlink" title="改变表名称"></a>改变表名称</h5><ul>
<li><p>执行RENAME语句，将改变表、视图、序列和同义词的名称。</p>
</li>
<li><p>操作者必须是对象的拥有者。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RENAME dept <span class="hljs-keyword">TO</span> department;<br></code></pre></td></tr></table></figure></li>
</ul>
<hr>
<h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><ul>
<li>删除表的所有数据和结构</li>
<li>删除表的所有索引</li>
<li>表的删除操作不能回退</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> dept30;<br><span class="hljs-keyword">Table</span> dropped.<br></code></pre></td></tr></table></figure>

<ul>
<li><p><strong>如果在要删除的表中包含有被其它表的外部码引用的主码或唯一码，并且希望在删除这个表的同时删除其它表中的相关的外部码约束，可以在DROP TABLE语句中指定CASCADE字句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> department CASCADE CONSTRAINTS;<br></code></pre></td></tr></table></figure></li>
</ul>
<hr>
<h5 id="截断表"><a href="#截断表" class="headerlink" title="截断表"></a>截断表</h5><ul>
<li>删除表的所有数据</li>
<li>释放被表使用的存储空间</li>
<li>截断操作不能回退</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> department;<br></code></pre></td></tr></table></figure>

<hr>
<h5 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL">COMMENT <span class="hljs-keyword">ON</span> <span class="hljs-keyword">TABLE</span> emp<br>	<span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;Employee Information&#x27;</span>;<br></code></pre></td></tr></table></figure>

<hr>
<h5 id="创建约束和管理约束"><a href="#创建约束和管理约束" class="headerlink" title="创建约束和管理约束"></a>创建约束和管理约束</h5><p>约束类型</p>
<ul>
<li>NOT NULL</li>
<li>UNIQUE</li>
<li>PRIMARY KEY</li>
<li>FOREIGN KEY</li>
<li>CHECK</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 定义约束</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [schema.]<span class="hljs-keyword">table</span><br>	    (<span class="hljs-keyword">column</span> datatype [<span class="hljs-keyword">DEFAULT</span> expr]<br>		[column_constraint],<br>		…<br>		[table_constraint]);<br>		<br><span class="hljs-comment">------------------------------------------------------</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp(<br>	empno NUMBER(<span class="hljs-number">4</span>),<br>	ename VARCHAR2(<span class="hljs-number">10</span>),<br>	deptno NUMBER(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>, <br>	<span class="hljs-keyword">CONSTRAINT</span> emp_empno_pk <span class="hljs-keyword">PRIMARY</span> KEY(EMPNO));<br>	<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 唯一码约束</span><br><span class="hljs-comment">-- 唯一码约束可以定义在列上或者表上(unique)</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>   dept(<br>    	deptno 	  NUMBER(<span class="hljs-number">2</span>),<br>  		dname	  VARCHAR2(<span class="hljs-number">14</span>),<br>  		loc	  VARCHAR2(<span class="hljs-number">13</span>),<br>  		<span class="hljs-keyword">CONSTRAINT</span> dept_dname_uk <span class="hljs-keyword">UNIQUE</span>(dname));<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 主键约束</span><br><span class="hljs-comment">-- 主键越是可以定义在列上或者表上（PRIMARY KEY）</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>   dept(<br>    	deptno 	  NUMBER(<span class="hljs-number">2</span>),<br>  		dname	  VARCHAR2(<span class="hljs-number">14</span>),<br> 		loc	  	  VARCHAR2(<span class="hljs-number">13</span>),<br>  		<span class="hljs-keyword">CONSTRAINT</span> dept_dname_uk <span class="hljs-keyword">UNIQUE</span> (dname),<br>  		<span class="hljs-keyword">CONSTRAINT</span> dept_deptno_pk <span class="hljs-keyword">PRIMARY</span> KEY(deptno) );<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 外键约束</span><br><span class="hljs-comment">-- 外键约束可以定义在列上或者表上（FOREIGN KEY）</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> emp(<br>    	empno 	NUMBER(<span class="hljs-number">4</span>),<br>  		ename	VARCHAR2(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  		job	VARCHAR2(<span class="hljs-number">9</span>),<br>  		mgr	NUMBER(<span class="hljs-number">4</span>),<br>  		hiredate	<span class="hljs-type">DATE</span>,<br>  		sal	NUMBER(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>   		comm	NUMBER(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>),<br>		deptno	NUMBER(<span class="hljs-number">7</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br> 		<span class="hljs-keyword">CONSTRAINT</span> emp_deptno_fk <span class="hljs-keyword">FOREIGN</span> KEY (deptno)<br> 			<span class="hljs-keyword">REFERENCES</span> dept (deptno));<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- check约束：定义表的每一行必须满足的条件</span><br>..., deptno	NUMBER(<span class="hljs-number">2</span>),<br>      <span class="hljs-keyword">CONSTRAINT</span> emp_deptno_ck  <br>            <span class="hljs-keyword">CHECK</span> (DEPTNO <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">10</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">99</span>),...<br></code></pre></td></tr></table></figure>

<p><strong>可以增加和删除约束但是不能修改约束</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>	 <span class="hljs-keyword">table</span><br>  <span class="hljs-keyword">ADD</span> [<span class="hljs-keyword">CONSTRAINT</span> <span class="hljs-keyword">constraint</span>] type (<span class="hljs-keyword">column</span>);<br><br></code></pre></td></tr></table></figure>

<hr>
<p><strong>删除</strong>在表DEPT上的<strong>PRIMARY KEY</strong>约束并且删除在表EMP的DEPTNO列上的<strong>FOREIGN KEY</strong>约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>     emp<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span>  emp_mgr_fk <br>  <span class="hljs-number">3</span>  		<span class="hljs-keyword">FOREIGN</span> KEY(mgr) <span class="hljs-keyword">REFERENCES</span> emp(empno);<br><span class="hljs-keyword">Table</span> altered.<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>	  emp<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span>  emp_mgr_fk;<br><span class="hljs-keyword">Table</span> altered.<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>	dept<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PRIMARY</span> KEY CASCADE;<br><span class="hljs-keyword">Table</span> altered.<br><br></code></pre></td></tr></table></figure>

<hr>
<p>禁用和启用约束</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- </span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>		emp<br>  <span class="hljs-number">2</span>  ENABLE <span class="hljs-keyword">CONSTRAINT</span>	emp_empno_pk;<br><span class="hljs-keyword">Table</span> altered.<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>		emp<br>  <span class="hljs-number">2</span>  DISABLE <span class="hljs-keyword">CONSTRAINT</span>	emp_empno_pk CASCADE;<br><span class="hljs-keyword">Table</span> altered.<br><br><br></code></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习4</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A04/</url>
    <content><![CDATA[<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><h5 id="INSERT语法"><a href="#INSERT语法" class="headerlink" title="INSERT语法"></a>INSERT语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span>	<span class="hljs-keyword">table</span> [(<span class="hljs-keyword">column</span> [, column...])]<br><span class="hljs-keyword">VALUES</span>		(<span class="hljs-keyword">value</span> [, value...]);<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span>	dept (deptno, dname, loc)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">VALUES</span>		(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;DEVELOPMENT&#x27;</span>, <span class="hljs-string">&#x27;DETROIT&#x27;</span>);<br><span class="hljs-number">1</span> <span class="hljs-type">row</span> created.<br><br></code></pre></td></tr></table></figure>

<h5 id="插入NULL值"><a href="#插入NULL值" class="headerlink" title="插入NULL值"></a>插入NULL值</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">VALUES</span>		(<span class="hljs-number">70</span>, <span class="hljs-string">&#x27;FINANCE&#x27;</span>, <span class="hljs-keyword">NULL</span>);<br><span class="hljs-number">1</span> <span class="hljs-type">row</span> created.<br><br></code></pre></td></tr></table></figure>

<h5 id="插入SYSDATE函数值，SYSDATE函数返回当前的日期和时间。"><a href="#插入SYSDATE函数值，SYSDATE函数返回当前的日期和时间。" class="headerlink" title="插入SYSDATE函数值，SYSDATE函数返回当前的日期和时间。"></a>插入SYSDATE函数值，SYSDATE函数返回当前的日期和时间。</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (empno, ename, job,<br>  <span class="hljs-number">2</span>			mgr, hiredate, sal, comm,<br>  <span class="hljs-number">3</span>			deptno)<br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">VALUES</span>		(<span class="hljs-number">7196</span>, <span class="hljs-string">&#x27;GREEN&#x27;</span>, <span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<br>  <span class="hljs-number">5</span>			<span class="hljs-number">7782</span>, SYSDATE, <span class="hljs-number">2000</span>, <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-number">6</span>			<span class="hljs-number">10</span>);<br><span class="hljs-number">1</span> <span class="hljs-type">row</span> created.<br><br></code></pre></td></tr></table></figure>

<h5 id="插入多行数据"><a href="#插入多行数据" class="headerlink" title="插入多行数据"></a>插入多行数据</h5><p><strong>注意：不能使用VALUES子句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> managers(id, name, salary, hiredate)<br>  <span class="hljs-number">2</span>          		<span class="hljs-keyword">SELECT</span>	empno, ename, sal, hiredate<br>  <span class="hljs-number">3</span>          		<span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">4</span>          		<span class="hljs-keyword">WHERE</span>	job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MANAGER&#x27;</span>;<br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> created.<br><br></code></pre></td></tr></table></figure>

<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><h5 id="UPDATE语法"><a href="#UPDATE语法" class="headerlink" title="UPDATE语法"></a>UPDATE语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">UPDATE		<span class="hljs-keyword">table</span><br><span class="hljs-keyword">SET</span>		<span class="hljs-keyword">column</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span> [, <span class="hljs-keyword">column</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span>]<br>[<span class="hljs-keyword">WHERE</span> 		<span class="hljs-keyword">condition</span>];<br><br></code></pre></td></tr></table></figure>

<h5 id="更新所有行的数据"><a href="#更新所有行的数据" class="headerlink" title="更新所有行的数据"></a>更新所有行的数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> UPDATE 	emp<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">SET</span>    	deptno <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> updated.<br><br></code></pre></td></tr></table></figure>

<h5 id="更新指定行的数据"><a href="#更新指定行的数据" class="headerlink" title="更新指定行的数据"></a>更新指定行的数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> UPDATE 	emp<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">SET</span>    	deptno <span class="hljs-operator">=</span> <span class="hljs-number">20</span><br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  	empno <span class="hljs-operator">=</span> <span class="hljs-number">7782</span>;<br><span class="hljs-number">1</span> <span class="hljs-type">row</span> updated.<br><br></code></pre></td></tr></table></figure>



<h5 id="使用子查询更新行的多列数据"><a href="#使用子查询更新行的多列数据" class="headerlink" title="使用子查询更新行的多列数据"></a>使用子查询更新行的多列数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> UPDATE  emp<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">SET</span>     (job, deptno) <span class="hljs-operator">=</span> <br>  <span class="hljs-number">3</span>	 		    (<span class="hljs-keyword">SELECT</span> job, deptno<br>  <span class="hljs-number">4</span>                          <span class="hljs-keyword">FROM</span>    emp<br>  <span class="hljs-number">5</span>                          <span class="hljs-keyword">WHERE</span>   empno <span class="hljs-operator">=</span> <span class="hljs-number">7499</span>)<br>  <span class="hljs-number">6</span>  <span class="hljs-keyword">WHERE</span>   empno <span class="hljs-operator">=</span> <span class="hljs-number">7698</span>;<br><span class="hljs-number">1</span> <span class="hljs-type">row</span> updated.<br></code></pre></td></tr></table></figure>



<h5 id="使用子查询更新行数据"><a href="#使用子查询更新行数据" class="headerlink" title="使用子查询更新行数据"></a>使用子查询更新行数据</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">UPDATE	employee<br>   	<span class="hljs-keyword">SET</span>	deptno <span class="hljs-operator">=</span>  (<span class="hljs-keyword">SELECT</span>	deptno<br>   			<span class="hljs-keyword">FROM</span>	emp 	<br>   			<span class="hljs-keyword">WHERE</span>	empno <span class="hljs-operator">=</span> <span class="hljs-number">7788</span>)<br>   	<span class="hljs-keyword">WHERE</span>	job    <span class="hljs-operator">=</span>  (<span class="hljs-keyword">SELECT</span>	job<br>   			<span class="hljs-keyword">FROM</span>	emp<br>   			<span class="hljs-keyword">WHERE</span>	empno <span class="hljs-operator">=</span> <span class="hljs-number">7788</span>);<br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> updated.<br><br></code></pre></td></tr></table></figure>



<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p><img src="1-1.png"></p>
<hr>
<h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><h5 id="select语法"><a href="#select语法" class="headerlink" title="select语法"></a>select语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>		[<span class="hljs-keyword">DISTINCT</span>] &#123;<span class="hljs-operator">*</span>, <span class="hljs-keyword">column</span> [alias], ...&#125;<br><span class="hljs-keyword">FROM</span> 		<span class="hljs-keyword">table</span><br>[<span class="hljs-keyword">WHERE</span>		<span class="hljs-keyword">condition</span>(s)]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>	&#123;<span class="hljs-keyword">column</span>, expr, alias&#125; [<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]];<br><br></code></pre></td></tr></table></figure>

<ul>
<li><p>SELECT 后定义用户需要检索的信息。</p>
</li>
<li><p>FROM 后定义检索的对象。</p>
</li>
<li><p>SQL语句不区分大小写。</p>
</li>
<li><p>SQL语句可以是一行或多行。</p>
</li>
<li><p>子句通常单独一行。</p>
</li>
<li><p>使用缩近提高可读性。</p>
</li>
</ul>
<h5 id="查询所有的列和行"><a href="#查询所有的列和行" class="headerlink" title="查询所有的列和行"></a><strong><strong>查询所有的列和行</strong></strong></h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span> 	dept;<br><br></code></pre></td></tr></table></figure>

<h5 id="查询指定的列和所有行"><a href="#查询指定的列和所有行" class="headerlink" title="查询指定的列和所有行"></a>查询指定的列和所有行</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> deptno, loc<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   dept;<br><br></code></pre></td></tr></table></figure>

<h5 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h5><ul>
<li>NULL值：NULL是一个<strong>值</strong>，它和“0”、“空白”不一样。</li>
</ul>
<p><img src="1-2.png"></p>
<ul>
<li><p>如果算术表达式中包括NULL值，则表达式的值也为NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> ename NAME, <span class="hljs-number">12</span><span class="hljs-operator">*</span>sal<span class="hljs-operator">+</span>comm <br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">from</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  ename<span class="hljs-operator">=</span><span class="hljs-string">&#x27;KING&#x27;</span>;<br>  <br>  NAME       <span class="hljs-number">12</span><span class="hljs-operator">*</span>SAL<span class="hljs-operator">+</span>COMM <br><span class="hljs-comment">---------- -----------</span><br>KING                   <br></code></pre></td></tr></table></figure>

<hr>
<h5 id="列的别名"><a href="#列的别名" class="headerlink" title="列的别名"></a>列的别名</h5></li>
<li><p>如果别名中包含空格或特定的字符或需要区分大小写时，需要使用<strong>双引号。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename <span class="hljs-keyword">AS</span> name, sal salary<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp;<br><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename &quot;Name&quot;,<br>  <span class="hljs-number">2</span>         sal<span class="hljs-operator">*</span><span class="hljs-number">12</span> &quot;Annual Salary&quot;<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">FROM</span>   emp;<br><br></code></pre></td></tr></table></figure>

<h5 id="连接符（-）"><a href="#连接符（-）" class="headerlink" title="连接符（||）"></a>连接符（||）</h5></li>
<li><p><strong>将两个串结合在一起，两个串可以是列名或直接量</strong>   </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename	<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;is a&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>job <br>  <span class="hljs-number">2</span>	         	<span class="hljs-keyword">AS</span> &quot;Employee Details&quot;<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">FROM</span>   emp;<br><br><br>Employee Details<br><span class="hljs-comment">-------------------------</span><br>KING <span class="hljs-keyword">is</span> a PRESIDENT<br>BLAKE <span class="hljs-keyword">is</span> a MANAGER<br>CLARK <span class="hljs-keyword">is</span> a MANAGER<br>JONES <span class="hljs-keyword">is</span> a MANAGER<br>MARTIN <span class="hljs-keyword">is</span> a SALESMAN<br>...<br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> selected.<br><br></code></pre></td></tr></table></figure>

<h5 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h5></li>
<li><p>使用<strong>DISTINCT</strong>关键字<strong>消除</strong>所选择的<strong>重复行</strong>，只返回一行。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> deptno<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp;<br><br><br>   DEPTNO<br><span class="hljs-comment">---------</span><br>       <span class="hljs-number">10</span><br>       <span class="hljs-number">20</span><br>       <span class="hljs-number">30</span><br><br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="条件（WHERE）-比较符"><a href="#条件（WHERE）-比较符" class="headerlink" title="条件（WHERE）:比较符"></a>条件（WHERE）:比较符</h5><p><img src="1-3.png"></p>
<p><img src="1-4.png"></p>
<h6 id="比较符，BETWEEN"><a href="#比较符，BETWEEN" class="headerlink" title="比较符，BETWEEN"></a>比较符，BETWEEN</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	ename, sal<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span> 	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	sal <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1500</span>;<br><br></code></pre></td></tr></table></figure>

<h6 id="比较符，IN"><a href="#比较符，IN" class="headerlink" title="比较符，IN"></a>比较符，IN</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	empno, ename, sal, mgr<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span> 	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	mgr <span class="hljs-keyword">IN</span> (<span class="hljs-number">7902</span>, <span class="hljs-number">7566</span>, <span class="hljs-number">7788</span>);<br><br></code></pre></td></tr></table></figure>



<h6 id="比较符，LIKE"><a href="#比较符，LIKE" class="headerlink" title="比较符，LIKE"></a>比较符，LIKE</h6><ul>
<li><strong>Oracle</strong>支持两种匹配符号：「 % 」 和「 _ 」 ，符号「 % 」可匹配0个或 多个字符 ，符号「 _ 」可匹配任何单一字符 。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	ename<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	ename <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_A%&#x27;</span>;<br>  <br>  ENAME<br><span class="hljs-comment">---------- </span><br>JAMES   <br>WARD<br></code></pre></td></tr></table></figure>



<ul>
<li><p>使用ESCAPE 定义查找「 % 」 和「 _ 」字符 。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ENAME <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> ENAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%A\_B%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span><br><br></code></pre></td></tr></table></figure>

<h6 id="比较符，IS-NULL"><a href="#比较符，IS-NULL" class="headerlink" title="比较符，IS NULL"></a>比较符，IS NULL</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>  ename, mgr<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>    emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>   mgr <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br>  <br>  ENAME            MGR<br><span class="hljs-comment">---------- ---------</span><br>KING<br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="条件（WHERE）-逻辑操作符"><a href="#条件（WHERE）-逻辑操作符" class="headerlink" title="条件（WHERE）:逻辑操作符"></a>条件（WHERE）:逻辑操作符</h5><p>  <img src="1-5.png"></p>
<h6 id="逻辑操作符，AND"><a href="#逻辑操作符，AND" class="headerlink" title="逻辑操作符，AND"></a>逻辑操作符，AND</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> empno, ename, job, sal<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">1100</span><br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">AND</span>    job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>;<br><br><br>    EMPNO ENAME      JOB             SAL<br><span class="hljs-comment">--------- ---------- --------- ---------</span><br>     <span class="hljs-number">7876</span> ADAMS      CLERK          <span class="hljs-number">1100</span><br>     <span class="hljs-number">7934</span> MILLER     CLERK          <span class="hljs-number">1300</span><br><br></code></pre></td></tr></table></figure>

<h6 id="操作符，OR"><a href="#操作符，OR" class="headerlink" title="操作符，OR"></a>操作符，OR</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> empno, ename, job, sal<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  sal<span class="hljs-operator">&gt;=</span><span class="hljs-number">1100</span><br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">OR</span>     job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span>;<br><br>EMPNO ENAME      JOB             SAL<br><span class="hljs-comment">--------- ---------- --------- ---------</span><br>     <br>     <span class="hljs-number">7839</span> KING       PRESIDENT      <span class="hljs-number">5000</span><br>     <span class="hljs-number">7698</span> BLAKE      MANAGER        <span class="hljs-number">2850</span><br>     <span class="hljs-number">7782</span> CLARK      MANAGER        <span class="hljs-number">2450</span><br>     <span class="hljs-number">7566</span> JONES      MANAGER        <span class="hljs-number">2975</span><br>     <span class="hljs-number">7654</span> MARTIN     SALESMAN       <span class="hljs-number">1250</span><br>...<br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>



<h6 id="逻辑操作符，NOT"><a href="#逻辑操作符，NOT" class="headerlink" title="逻辑操作符，NOT"></a>逻辑操作符，NOT</h6><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename, job<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  job <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;CLERK&#x27;</span>,<span class="hljs-string">&#x27;MANAGER&#x27;</span>,<span class="hljs-string">&#x27;ANALYST&#x27;</span>);<br>  <br>ENAME      JOB<br><span class="hljs-comment">---------- ---------</span><br>KING       PRESIDENT<br>MARTIN     SALESMAN<br>ALLEN      SALESMAN<br>TURNER     SALESMAN<br>WARD       SALESMAN<br></code></pre></td></tr></table></figure>

<h5 id="条件（WHERE）-优先规则"><a href="#条件（WHERE）-优先规则" class="headerlink" title="条件（WHERE）:优先规则"></a>条件（WHERE）:优先规则</h5><p><img src="1-6.png"></p>
<h5 id="排序（ORDER-BY子句）"><a href="#排序（ORDER-BY子句）" class="headerlink" title="排序（ORDER BY子句）"></a>排序（ORDER BY子句）</h5><ul>
<li><strong>排序（</strong>ORDER BY子句）：使得SQL在显示查询结果时将各返回行按顺序排列，返回行的排列顺序由ORDER BY 子句指定的表达式的值确定<ol>
<li>ASC: 从小到大排序（default）</li>
<li>DESC： 从大到小排序</li>
<li>ORDER BY子句在SELECT语句的最后</li>
</ol>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename,job,deptno,hiredate <br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>    	 emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> hiredate <span class="hljs-keyword">DESC</span>;<br>  <br>  <br>  ENAME      JOB          DEPTNO HIREDATE<br><span class="hljs-comment">---------- --------- --------- ---------</span><br>ADAMS      CLERK            <span class="hljs-number">20</span> <span class="hljs-number">12</span><span class="hljs-operator">-</span>JAN<span class="hljs-number">-83</span><br>SCOTT      ANALYST          <span class="hljs-number">20</span> <span class="hljs-number">09</span><span class="hljs-operator">-</span><span class="hljs-type">DEC</span><span class="hljs-number">-82</span><br>MILLER     CLERK            <span class="hljs-number">10</span> <span class="hljs-number">23</span><span class="hljs-operator">-</span>JAN<span class="hljs-number">-82</span><br>...<br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习5</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A05/</url>
    <content><![CDATA[<h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><p>单行函数分类</p>
<p><img src="1-1.png"></p>
<h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><p>字符函数的分类</p>
<p><img src="1-2.png"></p>
<p>常用函数列表</p>
<p><img src="1-3.png"></p>
<h5 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename, CONCAT (ename, job), LENGTH(ename),<br>   <span class="hljs-number">2</span> 	INSTR(ename, <span class="hljs-string">&#x27;A&#x27;</span>)<br>   <span class="hljs-number">3</span> <span class="hljs-keyword">FROM</span>   emp<br>   <span class="hljs-number">4</span> <span class="hljs-keyword">WHERE</span><br>   <br>   <br>   ENAME      CONCAT(ENAME,JOB)   LENGTH(ENAME) INSTR(ENAME,<span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-comment">---------- ------------------- ------------- ----------------</span><br>MARTIN     MARTINSALESMAN                  <span class="hljs-number">6</span>                <span class="hljs-number">2</span><br>ALLEN      ALLENSALESMAN                   <span class="hljs-number">5</span>                <span class="hljs-number">1</span><br>TURNER     TURNERSALESMAN                  <span class="hljs-number">6</span>                <span class="hljs-number">0</span><br>WARD       WARDSALESMAN                    <span class="hljs-number">4</span>                <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><p><img src="1-4.png"></p>
<h5 id="ROUND函数"><a href="#ROUND函数" class="headerlink" title="ROUND函数"></a>ROUND函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">2</span>), ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">0</span>),<br>  <span class="hljs-number">2</span>  		ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">-1</span>)<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">FROM</span>   DUAL;<br>  <br>  ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">2</span>) ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">0</span>) ROUND(<span class="hljs-number">45.923</span>,<span class="hljs-number">-1</span>)<br><span class="hljs-comment">--------------- -------------- -----------------</span><br>          <span class="hljs-number">45.92</span>             <span class="hljs-number">46</span>                <span class="hljs-number">50</span><br></code></pre></td></tr></table></figure>

<hr>
<h5 id="TRUNC函数"><a href="#TRUNC函数" class="headerlink" title="TRUNC函数"></a>TRUNC函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> 	TRUNC(<span class="hljs-number">45.923</span>,<span class="hljs-number">2</span>), TRUNC(<span class="hljs-number">45.923</span>),<br>  <span class="hljs-number">2</span>  		TRUNC(<span class="hljs-number">45.923</span>,<span class="hljs-number">-1</span>)<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">FROM</span>   DUAL;<br>  <br>  <br>  TRUNC(<span class="hljs-number">45.923</span>,<span class="hljs-number">2</span>) TRUNC(<span class="hljs-number">45.923</span>) TRUNC(<span class="hljs-number">45.923</span>,<span class="hljs-number">-1</span>)<br><span class="hljs-comment">--------------- ------------- ---------------</span><br>          <span class="hljs-number">45.92</span>            <span class="hljs-number">45</span>              <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure>

<h5 id="MOD函数"><a href="#MOD函数" class="headerlink" title="MOD函数"></a>MOD函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	ename, sal, comm, <span class="hljs-built_in">MOD</span>(sal, comm)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>;<br><br>ENAME            SAL      COMM <span class="hljs-built_in">MOD</span>(SAL,COMM)<br><span class="hljs-comment">---------- --------- --------- -------------</span><br>MARTIN          <span class="hljs-number">1250</span>      <span class="hljs-number">1400</span>          <span class="hljs-number">1250</span><br>ALLEN           <span class="hljs-number">1600</span>       <span class="hljs-number">300</span>           <span class="hljs-number">100</span><br>TURNER          <span class="hljs-number">1500</span>         <span class="hljs-number">0</span>          <span class="hljs-number">1500</span><br>WARD            <span class="hljs-number">1250</span>       <span class="hljs-number">500</span>           <span class="hljs-number">250</span><br></code></pre></td></tr></table></figure>

<h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><h5 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h5><ul>
<li>Oracle是用数字来存储日期信息，数字的整数部分代表与Julian Calendar（罗马儒略历，公历）相距的天数 （由公元前4712年1月1日开始），而小数部分代表时、分和秒。</li>
<li>Oracle默认日期格式：<strong>DD-MON-YY</strong></li>
<li>SYSDATE函数返回系统当前的日期和时间。</li>
<li>DUAL是Oracle内置的虚拟表，只有一行一列。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  SYSDATE  <span class="hljs-keyword">FROM</span>  DUAL;<br><span class="hljs-keyword">SELECT</span>  TO_CHAR(SYSDATE,<span class="hljs-string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>) <span class="hljs-keyword">FROM</span> DUAL;<br></code></pre></td></tr></table></figure>

<h5 id="日期运算"><a href="#日期运算" class="headerlink" title="日期运算"></a>日期运算</h5><ul>
<li><strong>不允许日期加日期</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename, (SYSDATE<span class="hljs-operator">-</span>hiredate)<span class="hljs-operator">/</span><span class="hljs-number">7</span> WEEKS<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  deptno <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><br>ENAME          WEEKS<br><span class="hljs-comment">---------- ---------</span><br>KING       <span class="hljs-number">830.93709</span><br>CLARK      <span class="hljs-number">853.93709</span><br>MILLER     <span class="hljs-number">821.36566</span><br></code></pre></td></tr></table></figure>



<p><img src="1-5.png"></p>
<h5 id="应用举例"><a href="#应用举例" class="headerlink" title="应用举例"></a>应用举例</h5><p><img src="1-6.png"></p>
<h4 id="转换函数"><a href="#转换函数" class="headerlink" title="转换函数"></a>转换函数</h4><h5 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h5><p><img src="1-7.png"></p>
<h5 id="显示转换"><a href="#显示转换" class="headerlink" title="显示转换"></a>显示转换</h5><p><img src="1-8.png"></p>
<h5 id="TO-CHAR（日期）函数"><a href="#TO-CHAR（日期）函数" class="headerlink" title="TO_CHAR（日期）函数"></a>TO_CHAR（日期）函数</h5><p><img src="1-9.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	ename, 	<br>  <span class="hljs-number">2</span>    	TO_CHAR(hiredate, ‘DD <span class="hljs-keyword">Month</span> YYYY<span class="hljs-string">&#x27;) HIREDATE</span><br><span class="hljs-string">  3  FROM  	emp;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          ENAME      HIREDATE</span><br><span class="hljs-string">---------- -----------------</span><br><span class="hljs-string">KING       17 November 1981</span><br><span class="hljs-string">BLAKE      1 May 1981</span><br><span class="hljs-string">CLARK      9 June 1981</span><br><span class="hljs-string">JONES      2 April 1981</span><br><span class="hljs-string">MARTIN     28 September 1981</span><br><span class="hljs-string">ALLEN      20 February 1981</span><br><span class="hljs-string">...</span><br><span class="hljs-string">14 rows selected.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure>

<h5 id="TO-CHAR（数值）函数"><a href="#TO-CHAR（数值）函数" class="headerlink" title="TO_CHAR（数值）函数"></a>TO_CHAR（数值）函数</h5><p><img src="1-10.png"></p>
<p><img src="1-11.png"></p>
<h5 id="空值置换函数"><a href="#空值置换函数" class="headerlink" title="空值置换函数"></a>空值置换函数</h5><ol>
<li>NVL (expr1, expr2)</li>
</ol>
<ul>
<li>空值置换函数<strong>NVL</strong> ：如果表达式expr1为NULL ，就返回expr2的值.否则，函数就返回表达式expr1的值</li>
</ul>
<ol start="2">
<li>NVL2 (expr1, expr2, expr3)</li>
</ol>
<ul>
<li>空值置换函数<strong>NVL2</strong> ：<strong>如果表达式expr1为NULL</strong> ，就返回expr3的值.否则，函数就返回表达式expr2的值。</li>
</ul>
<p><img src="1-12.png"></p>
<h4 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h4><ul>
<li><strong>条件表达式</strong>：在SQL语句内，提供的IF-THEN-ELSE逻辑表达式。有两种方法:<ul>
<li>CASE表达式</li>
<li>DECODE函数</li>
</ul>
</li>
</ul>
<p><img src="1-13.png"></p>
<p><img src="1-14.png"></p>
<p><img src="1-15.png"></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习6</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A06/</url>
    <content><![CDATA[<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><h4 id="相等连接"><a href="#相等连接" class="headerlink" title="相等连接"></a>相等连接</h4><p><img src="1-1.png"></p>
<h4 id="不相等连接"><a href="#不相等连接" class="headerlink" title="不相等连接"></a>不相等连接</h4><p><img src="1-2.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> 	<span class="hljs-keyword">SELECT</span> 	e.ename, e.sal, s.grade<br>   <span class="hljs-number">2</span>	<span class="hljs-keyword">FROM</span>	emp e, salgrade s<br>   <span class="hljs-number">3</span>	<span class="hljs-keyword">WHERE</span> 	e.sal<br>   <span class="hljs-number">4</span>	<span class="hljs-keyword">BETWEEN</span> 	s.losal <span class="hljs-keyword">AND</span> s.hisal;<br><br><br>ENAME            SAL     GRADE<br><span class="hljs-comment">---------- --------- ---------</span><br>JAMES            <span class="hljs-number">950</span>         <span class="hljs-number">1</span><br>SMITH            <span class="hljs-number">800</span>         <span class="hljs-number">1</span><br>ADAMS           <span class="hljs-number">1100</span>         <span class="hljs-number">1</span><br>...<br><span class="hljs-number">14</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>

<h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul>
<li><strong>外连接</strong>(Outer Joins) —是对简单联接的扩充，它返回简单联接所返回的全部行，而且还返回一表中不与另一表的行相匹配的行</li>
</ul>
<p><img src="1-3.png"></p>
<ul>
<li>外连接操作符时(+)加号（表示在该表中加入一个空行来与没有直接匹配行的数据进行匹配）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>	table.column, table.column<br><span class="hljs-keyword">FROM</span>	table1, table2<br><span class="hljs-keyword">WHERE</span>	table1.column(<span class="hljs-operator">+</span>) <span class="hljs-operator">=</span> table2.column;<br><br><br><span class="hljs-keyword">SELECT</span>	table.column, table.column<br><span class="hljs-keyword">FROM</span>	table1, table2<br><span class="hljs-keyword">WHERE</span>	table1.column <span class="hljs-operator">=</span> table2.column(<span class="hljs-operator">+</span>);<br></code></pre></td></tr></table></figure>

<p><strong>查询每个部门包括的雇员，如某部门没雇员，也要显示其情况。要求显示部门名称，雇员名字</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	e.ename, d.deptno, d.dname<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>	emp e, dept d<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	e.deptno(<span class="hljs-operator">+</span>) <span class="hljs-operator">=</span> d.deptno<br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>	e.deptno;<br><br><br>ENAME         DEPTNO DNAME<br><span class="hljs-comment">---------- --------- -------------</span><br>KING              <span class="hljs-number">10</span> ACCOUNTING<br>CLARK             <span class="hljs-number">10</span> ACCOUNTING<br>...<br>                  <span class="hljs-number">40</span> OPERATIONS<br><span class="hljs-number">15</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>

<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p><img src="1-4.png"></p>
<ul>
<li>查询每个有上级的员工的姓名，及其上级员工的姓名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> worker.ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27; works for &#x27;</span><span class="hljs-operator">||</span>manager.ename<br>    <span class="hljs-keyword">FROM</span> 	emp worker, emp manager<br>    <span class="hljs-keyword">WHERE</span> 	worker.mgr <span class="hljs-operator">=</span> manager.empno;<br><br><br>WORKER.ENAME<span class="hljs-operator">||</span><span class="hljs-string">&#x27;WORKSFOR&#x27;</span><span class="hljs-operator">||</span>MANAG<br><span class="hljs-comment">-------------------------------</span><br>BLAKE works <span class="hljs-keyword">for</span> KING<br>CLARK works <span class="hljs-keyword">for</span> KING<br>JONES works <span class="hljs-keyword">for</span> KING<br>MARTIN works <span class="hljs-keyword">for</span> BLAKE<br>...<br><span class="hljs-number">13</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>

<h4 id="递归查询-树查询"><a href="#递归查询-树查询" class="headerlink" title="递归查询(树查询)"></a>递归查询(树查询)</h4><ul>
<li><p>语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> [LEVEL], <span class="hljs-keyword">column</span>, expr...<br><span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span><br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>(s)]<br>[<span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">condition</span>(s)]<br>[<span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> PRIOR <span class="hljs-keyword">condition</span>(s)]<br></code></pre></td></tr></table></figure></li>
<li><p>根据员工的管辖关系，显示员工的上下级关系树</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> lpad(ename,length(ename)<span class="hljs-operator">+</span>(level<span class="hljs-number">-1</span>)<span class="hljs-operator">*</span><span class="hljs-number">3</span>,<span class="hljs-string">&#x27;-&#x27;</span>) employee,level<br><span class="hljs-keyword">FROM</span> emp<br><span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;KING&#x27;</span><br><span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> PRIOR empno <span class="hljs-operator">=</span> mgr;<br></code></pre></td></tr></table></figure>

<p><img src="1-5.png"></p>
<p><font color="#dd0000">PRIOR位置决定查子树还是回溯</font><br/></p>
<ul>
<li>查询员工JONES的所有下属员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> empno,ename,level<br><span class="hljs-keyword">FROM</span> emp<br><span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;JONES&#x27;</span><br><span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> PRIOR empno <span class="hljs-operator">=</span> mgr<br></code></pre></td></tr></table></figure>

<ul>
<li>查询员工JONES的所有上级员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> empno, ename,level<br><span class="hljs-keyword">FROM</span> emp<br><span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;JONES&#x27;</span><br><span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> empno <span class="hljs-operator">=</span> PRIOR  mgr;<br></code></pre></td></tr></table></figure>

<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3><ul>
<li><p>分组函数(Group Functions)：对多行进行操作，并为每一组给出一个结果。</p>
</li>
<li><p>语法</p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>	[<span class="hljs-keyword">column</span>,] group_function(<span class="hljs-keyword">column</span>), ...<br><span class="hljs-keyword">FROM</span>		<span class="hljs-keyword">table</span><br>[<span class="hljs-keyword">WHERE</span>	<span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>	<span class="hljs-keyword">column</span>]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>	<span class="hljs-keyword">column</span>];<br></code></pre></td></tr></table></figure>

<p><img src="1-6.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(sal), <span class="hljs-built_in">MAX</span>(sal), <span class="hljs-built_in">MIN</span>(sal), <span class="hljs-built_in">SUM</span>(sal)	<span class="hljs-keyword">FROM</span>	emp<br>	<span class="hljs-keyword">WHERE</span> job <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;SALES%&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(comm), <span class="hljs-built_in">MAX</span>(comm), <span class="hljs-built_in">MIN</span>(comm), <span class="hljs-built_in">SUM</span>(comm) <span class="hljs-keyword">FROM</span> emp;<br>	<span class="hljs-comment">--WHERE job LIKE &#x27;SALES%&#x27;;</span><br><br><span class="hljs-comment">-- AVG, MAX, MIN, SUM在计算时会忽略NULL行</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(comm), <span class="hljs-built_in">MAX</span>(comm), <span class="hljs-built_in">MIN</span>(comm), <span class="hljs-built_in">SUM</span>(comm)	<span class="hljs-keyword">FROM</span>	emp <br> <span class="hljs-keyword">WHERE</span> job <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;SALES%&#x27;</span>;<br><br><span class="hljs-comment">-- AVG, MAX, MIN, SUM在全为NULL时计算结果为NULL</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(hiredate), <span class="hljs-built_in">MAX</span>(hiredate)  <span class="hljs-keyword">FROM</span> emp;<br><br><br></code></pre></td></tr></table></figure>

<ul>
<li><strong>COUNT(*)</strong> <strong>返回表中所有行</strong></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>	<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>  <span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-keyword">WHERE</span>	deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>  <br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-comment">---------</span><br>        <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure>

<ul>
<li>COUNT(expr)返回表中指定列的非NULL行数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	<span class="hljs-built_in">COUNT</span>(comm)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>	deptno <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br><br><span class="hljs-built_in">COUNT</span>(COMM)<br><span class="hljs-comment">-----------</span><br>          <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure>

<h3 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用GROUP BY子句将表中的行划分成小组</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>   deptno, <span class="hljs-built_in">AVG</span>(sal)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>     emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno;<br>  <br>  DEPTNO  <span class="hljs-built_in">AVG</span>(SAL)<br><span class="hljs-comment">--------- ---------</span><br>       <span class="hljs-number">10</span> <span class="hljs-number">2916.6667</span><br>       <span class="hljs-number">20</span>      <span class="hljs-number">2175</span><br>       <span class="hljs-number">30</span> <span class="hljs-number">1566.6667</span><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 多列分组</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>   deptno, job, <span class="hljs-built_in">sum</span>(sal)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>     emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno, job;<br>  <br>  <br>     DEPTNO JOB        <span class="hljs-built_in">SUM</span>(SAL)<br><span class="hljs-comment">--------- --------- ---------</span><br>       <span class="hljs-number">10</span> CLERK          <span class="hljs-number">1300</span><br>       <span class="hljs-number">10</span> MANAGER        <span class="hljs-number">2450</span><br>       <span class="hljs-number">10</span> PRESIDENT      <span class="hljs-number">5000</span><br>       <span class="hljs-number">20</span> ANALYST        <span class="hljs-number">6000</span><br>       <span class="hljs-number">20</span> CLERK          <span class="hljs-number">1900</span><br>...<br><span class="hljs-number">9</span> <span class="hljs-keyword">rows</span> selected.<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> (<span class="hljs-keyword">SELECT</span> DNAME <span class="hljs-keyword">FROM</span> DEPT <span class="hljs-keyword">WHERE</span> DEPTNO<span class="hljs-operator">=</span>EMP.DEPTNO),<br><span class="hljs-built_in">COUNT</span>(EMPNO) <span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPTNO;<br> <br><span class="hljs-keyword">SELECT</span> D.C,DEPT.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span><br>(<span class="hljs-keyword">SELECT</span> DEPTNO,<span class="hljs-built_in">COUNT</span>(EMPNO) C <span class="hljs-keyword">FROM</span> EMP<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> DEPTNO) D,DEPT <br><span class="hljs-keyword">WHERE</span> D.DEPTNO(<span class="hljs-operator">+</span>)<span class="hljs-operator">=</span>DEPT.DEPTNO;<br></code></pre></td></tr></table></figure>

<h3 id="限制选择组-HAVING子句"><a href="#限制选择组-HAVING子句" class="headerlink" title="限制选择组(HAVING子句)"></a>限制选择组(HAVING子句)</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>   deptno, <span class="hljs-built_in">max</span>(sal)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>     emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> deptno<br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">HAVING</span>   <span class="hljs-built_in">max</span>(sal)<span class="hljs-operator">&gt;</span><span class="hljs-number">2900</span>;<br><br></code></pre></td></tr></table></figure>

<p>非法使用分组函数</p>
<ul>
<li><p>非法使用分组函数，使用组函数必须使用GROUP BY 子句</p>
<ul>
<li><img src="1-7.png"></li>
</ul>
</li>
<li><p>在WHERE子句中不能直接使用组函数。</p>
</li>
<li><p>在HAVING子句中可以直接使用组函数</p>
<ul>
<li><img src="1-8.png"></li>
</ul>
</li>
</ul>
<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul>
<li>语法</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>	select_list<br><span class="hljs-keyword">FROM</span>	<span class="hljs-keyword">table</span><br><span class="hljs-keyword">WHERE</span>	expr operator<br>		 	(<span class="hljs-keyword">SELECT</span>	select_list<br>		       <span class="hljs-keyword">FROM</span>		<span class="hljs-keyword">table</span>);<br></code></pre></td></tr></table></figure>



<ul>
<li>子查询（内部查询）在主查询之前执行。</li>
<li>子查询的查询结果提供给主查询(外部查询)使用。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> ename<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">WHERE</span>  sal <span class="hljs-operator">&gt;</span> <br>  <span class="hljs-number">4</span>		    (<span class="hljs-keyword">SELECT</span> sal<br>  <span class="hljs-number">5</span>               <span class="hljs-keyword">FROM</span>   emp<br>  <span class="hljs-number">6</span>               <span class="hljs-keyword">WHERE</span>  empno<span class="hljs-operator">=</span><span class="hljs-number">7566</span>);<br><br><br>ENAME<br><span class="hljs-comment">----------</span><br>KING<br>FORD<br>SCOTT<br></code></pre></td></tr></table></figure>

<h5 id="子查询使用原则"><a href="#子查询使用原则" class="headerlink" title="子查询使用原则"></a>子查询使用原则</h5><ol>
<li>子查询应该封装在括号内</li>
<li>子查询在比较条件的右边</li>
<li>子查询中一般不使用ORDER BY子句。</li>
<li>单行子查询使用单行操作符，多行子查询使用多行操作符</li>
</ol>
<h5 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span>	deptno, <span class="hljs-built_in">MIN</span>(sal)<br>  <span class="hljs-number">2</span>  <span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-number">3</span>  <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>	deptno<br>  <span class="hljs-number">4</span>  <span class="hljs-keyword">HAVING</span>	<span class="hljs-built_in">MIN</span>(sal) <span class="hljs-operator">&gt;</span><br>  <span class="hljs-number">5</span>		(<span class="hljs-keyword">SELECT</span>	<span class="hljs-built_in">MIN</span>(sal)<br>  <span class="hljs-number">6</span>		<span class="hljs-keyword">FROM</span>	emp<br>  <span class="hljs-number">7</span>		<span class="hljs-keyword">WHERE</span>	deptno <span class="hljs-operator">=</span> <span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure>

<h5 id="多行子查询"><a href="#多行子查询" class="headerlink" title="多行子查询"></a>多行子查询</h5><p><img src="1-9.png"></p>
<p><img src="1-10.png"></p>
<h5 id="多行子查询EXISTS应用举例："><a href="#多行子查询EXISTS应用举例：" class="headerlink" title="多行子查询EXISTS应用举例："></a>多行子查询EXISTS应用举例：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  e.empno, e.ename<br><span class="hljs-keyword">FROM</span>    emp e<br><span class="hljs-keyword">WHERE</span>   <span class="hljs-keyword">EXISTS</span> (<span class="hljs-keyword">SELECT</span> ‘X’<br>		<span class="hljs-keyword">FROM</span>  dept d<br>		<span class="hljs-keyword">WHERE</span> e.deptno<span class="hljs-operator">=</span>d.deptno<br>		<span class="hljs-keyword">and</span> d.loc<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NEW YORK&#x27;</span>);<br>	<br>    <br>    <br><span class="hljs-keyword">SELECT</span>  e.empno, e.ename<br><span class="hljs-keyword">FROM</span>    emp e<br><span class="hljs-keyword">WHERE</span>   e.deptno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> d.deptno<br>		<span class="hljs-keyword">FROM</span>  dept d<br>		<span class="hljs-keyword">WHERE</span>  d.loc<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NEW YORK&#x27;</span>);<br><br></code></pre></td></tr></table></figure>



<h5 id="多行子查询IN应用举例："><a href="#多行子查询IN应用举例：" class="headerlink" title="多行子查询IN应用举例："></a>多行子查询IN应用举例：</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  e.empno, e.ename<br><span class="hljs-keyword">FROM</span>    emp e<br><span class="hljs-keyword">WHERE</span>   e.deptno <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> d.deptno<br>		<span class="hljs-keyword">FROM</span>  dept d<br>		<span class="hljs-keyword">WHERE</span>  d.loc<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;NEW YORK&#x27;</span> <br>				<span class="hljs-keyword">or</span> d.loc<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CHICAGO&#x27;</span>);<br>				<br>				<br><span class="hljs-keyword">SELECT</span>  e.empno, e.ename,d.loc<br><span class="hljs-keyword">FROM</span>    emp e,<br>   (<span class="hljs-keyword">SELECT</span> deptno,loc <span class="hljs-keyword">FROM</span>  dept <br>    <span class="hljs-keyword">WHERE</span>  loc<span class="hljs-operator">=</span> ‘<span class="hljs-keyword">NEW</span> YORK’ <span class="hljs-keyword">or</span> loc<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;CHICAGO&#x27;</span>) d<br><span class="hljs-keyword">WHERE</span>   e.deptno <span class="hljs-operator">=</span>d.deptno;<br><br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习7</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A07/</url>
    <content><![CDATA[<h3 id="匿名块"><a href="#匿名块" class="headerlink" title="匿名块"></a>匿名块</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> (可选)<br>    定义在PL<span class="hljs-operator">/</span><span class="hljs-keyword">SQL</span>块中要使用的对象<br><span class="hljs-keyword">BEGIN</span> (必须)<br>    执行语句<br>EXCEPTION (可选)<br>    错误处理语句<br><span class="hljs-keyword">END</span>; (必须)<br></code></pre></td></tr></table></figure>

<ul>
<li>匿名块（以DECLARE或BEGIN开始）每次使用时都要进行编译。</li>
<li>匿名块不存储在数据库中，并且它不能从其它的PL/SQL块中进行调用。</li>
</ul>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><ul>
<li>触发器类似于过程和函数，都拥有声明、执行和异常处理过程的带名PL/SQL块。与包类似，触发器必须存储在数据库中。</li>
<li>前面已经讲过，过程是显式地通过过程调用执行的，同时过程调用可以传递参数。与之相反，触发器是在事件发生时隐式地运行的，并且触发器不能接受参数。</li>
<li>触发事件可以是对数据库表的DML（INSERT、UPDATE、DELETE）操作或某种视图的操作。Oracle8i把触发器功能扩展到了可以激发系统事件，如数据库的启动和关闭，以及某种DDL操作。</li>
<li>触发器主要分为：DML触发器、替代触发器和系统触发器。本次课程主要讲述DML触发器。</li>
<li>触发器可用来补充声明的参照完整性，强制实施复杂的业务规则</li>
<li>触发器是一个独立的事务，被当作一个整体执行，在执行过程中如果发生错误，则整个事务会<strong>自动回滚</strong>。</li>
</ul>
<h4 id="DML触发器创建语法"><a href="#DML触发器创建语法" class="headerlink" title="DML触发器创建语法"></a>DML触发器创建语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- trigger_name是触发器名，triggering_event指定了何时激发触发器， table_reference是定义触发器的表， trigger_body是触发器</span><br><span class="hljs-comment">-- 的主要处理代码。WHEN子句的trigger_condition如果被使用的话，将首先进行求值。触发器的主体仅当此条件求值为TRUE时才被执行。</span><br><br><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] <span class="hljs-keyword">TRIGGER</span> trigger_name<br>   &#123;BEFORE <span class="hljs-operator">|</span> AFTER&#125; triggering_event <span class="hljs-keyword">ON</span> table_reference<br>   [<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span> [<span class="hljs-keyword">WHEN</span> trigger_condition]]<br>trigger_body;<br></code></pre></td></tr></table></figure>

<h4 id="触发器的激发顺序"><a href="#触发器的激发顺序" class="headerlink" title="触发器的激发顺序"></a>触发器的激发顺序</h4><ol>
<li>执行BEFORE语句级触发器（如果有的话）</li>
<li>对于受语句影响的每一行<ul>
<li>执行BEFORE行级触发器（如果有的话）</li>
<li>执行DML语句（系统自动执行）</li>
<li>执行AFTER行级触发器（如果有的话）</li>
</ul>
</li>
<li>执行AFTER语句级触发器（如果有的话）</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> tri_emp_stmBefore<br>BEFORE <span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">ON</span> EMP<br><span class="hljs-keyword">BEGIN</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;Before Statement trigger&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> tri_emp_stmAfter<br>after <span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">ON</span> EMP<br><span class="hljs-keyword">BEGIN</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;After Statement trigger&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> tri_emp_rowBefore<br>before <span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">ON</span> EMP<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">BEGIN</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;Beore row trigger&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> tri_emp_rowAfter<br>after <span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">ON</span> EMP<br><span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span><br><span class="hljs-keyword">BEGIN</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;After row trigger&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="语句级触发器例子"><a href="#语句级触发器例子" class="headerlink" title="语句级触发器例子"></a>语句级触发器例子</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> secure_emp<br>   BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> emp<br>   <span class="hljs-keyword">BEGIN</span><br>     IF (TO_CHAR(SYSDATE, <span class="hljs-string">&#x27;DY&#x27;</span>) <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;星期六&#x27;</span>, <span class="hljs-string">&#x27;星期天&#x27;</span>)) <br>           <span class="hljs-keyword">OR</span> (TO_CHAR(SYSDATE, <span class="hljs-string">&#x27;HH24:MI&#x27;</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;08:00&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;18:00&#x27;</span>)<br>     <span class="hljs-keyword">THEN</span> <br>         RAISE_APPLICATION_ERROR<br>			 (<span class="hljs-number">-20500</span>, <span class="hljs-string">&#x27;You may insert into EMP table only during business hours.&#x27;</span>);<br>      <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span>;<br><br><br><span class="hljs-comment">-- 测试</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp (empno, ename,hiredate,job, sal, deptno)<br>               <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">300</span>,<span class="hljs-string">&#x27;Smith Rob&#x27;</span>,SYSDATE,<span class="hljs-string">&#x27;IT_PROG&#x27;</span>, <span class="hljs-number">4500</span>, <span class="hljs-number">30</span>)<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> secure_emp<br>BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">OR</span> UPDATE <span class="hljs-keyword">OR</span> <span class="hljs-keyword">DELETE</span>  <span class="hljs-keyword">ON</span> EMP<br>  <span class="hljs-keyword">BEGIN</span><br>    IF (TO_CHAR(SYSDATE, <span class="hljs-string">&#x27;DY&#x27;</span>) <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;星期六&#x27;</span>, <span class="hljs-string">&#x27;星期天&#x27;</span>)) <br>           <span class="hljs-keyword">OR</span> (TO_CHAR(SYSDATE, <span class="hljs-string">&#x27;HH24&#x27;</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-string">&#x27;08&#x27;</span> <span class="hljs-keyword">AND</span> <span class="hljs-string">&#x27;18&#x27;</span>)<br>    <span class="hljs-keyword">THEN</span> <br>      IF DELETING <span class="hljs-keyword">THEN</span><br>          RAISE_APPLICATION_ERROR (<span class="hljs-number">-20502</span>, <span class="hljs-string">&#x27;You may delete from  EMP table only during business hours.&#x27;</span>);<br>       ELSIF INSERTING <span class="hljs-keyword">THEN</span><br>         RAISE_APPLICATION_ERROR (<span class="hljs-number">-20500</span>,<span class="hljs-string">&#x27;You may insert into EMP table only during business hours.&#x27;</span>);<br>       ELSIF UPDATING (<span class="hljs-string">&#x27;SAL&#x27;</span>) <span class="hljs-keyword">THEN</span><br>         RAISE_APPLICATION_ERROR (<span class="hljs-number">-20503</span>,<span class="hljs-string">&#x27;You may update SAL only during business hours.&#x27;</span>);<br>       <span class="hljs-keyword">ELSE</span><br>         RAISE_APPLICATION_ERROR (<span class="hljs-number">-20504</span>,<span class="hljs-string">&#x27;You may update EMP table only during normal hours.&#x27;</span>);<br>       <span class="hljs-keyword">END</span> IF;<br>    <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<h4 id="行级触发器例子"><a href="#行级触发器例子" class="headerlink" title="行级触发器例子"></a>行级触发器例子</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> restrict_salary<br>  BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">OR</span> UPDATE <span class="hljs-keyword">ON</span> emp<br>    <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br>    <span class="hljs-keyword">BEGIN</span><br>      IF <span class="hljs-keyword">NOT</span> (:NEW.job <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;PRESIDENT&#x27;</span>, <span class="hljs-string">&#x27;MANAGER&#x27;</span>, <span class="hljs-string">&#x27;ANALYST&#x27;</span>)) <span class="hljs-keyword">AND</span> :NEW.sal <span class="hljs-operator">&gt;</span> <span class="hljs-number">2500</span><br>      <span class="hljs-keyword">THEN</span><br>        RAISE_APPLICATION_ERROR (<span class="hljs-number">-20202</span>, <span class="hljs-string">&#x27;Employee cannot earn this amount&#x27;</span>);<br>      <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span>;<br><br><span class="hljs-comment">-- 测试</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span> UPDATE emp<br>              <span class="hljs-keyword">SET</span> sal <span class="hljs-number">3000</span><br>              <span class="hljs-keyword">WHERE</span> ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SMITH&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h4 id="行级触发器——-old和-new"><a href="#行级触发器——-old和-new" class="headerlink" title="行级触发器——:old和:new"></a>行级触发器——:old和:new</h4><p><img src="1-11.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> audit_emp_values<br>   AFTER <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">OR</span> <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">OR</span> UPDATE <span class="hljs-keyword">ON</span> emp<br>   <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br>   <span class="hljs-keyword">BEGIN</span><br>      <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> audit_emp_table (user_name, <span class="hljs-type">timestamp</span>,empno,<br>          old_ename, new_ename, old_job,new_job, old_sal, new_sal)<br>          <span class="hljs-keyword">VALUES</span> (<span class="hljs-keyword">USER</span>, SYSDATE, :OLD.empno,:OLD.ename, :NEW.ename,<br>              :OLD.job,:NEW.job, :OLD.sal, :NEW.sal );<br><span class="hljs-keyword">END</span>;<br><br>   t_oplog(<span class="hljs-keyword">user</span>,optime,opcontent)<br><br></code></pre></td></tr></table></figure>

<h4 id="行级触发器——限制条件"><a href="#行级触发器——限制条件" class="headerlink" title="行级触发器——限制条件"></a>行级触发器——限制条件</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">TRIGGER</span> derive_commission_pct<br>    BEFORE <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">OR</span> UPDATE <span class="hljs-keyword">OF</span> sal <span class="hljs-keyword">ON</span> emp<br>    <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br>    <span class="hljs-keyword">WHEN</span> (NEW.job <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>)<br> <span class="hljs-keyword">BEGIN</span><br>    IF INSERTING  <span class="hljs-keyword">THEN</span> :NEW.comm :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    ELSIF :OLD.comm <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">THEN</span> :NEW.comm :<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">ELSE</span>  :NEW.comm :<span class="hljs-operator">=</span> :NEW.sal<span class="hljs-operator">*</span><span class="hljs-number">0.10</span>;<br>    <span class="hljs-keyword">END</span> IF;<br> <span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<h4 id="行级触发器应用"><a href="#行级触发器应用" class="headerlink" title="行级触发器应用"></a>行级触发器应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 练习:创建序列和触发器后,给出执行下面两个insert语句后的数据记录</span><br><br><span class="hljs-keyword">CREATE</span> SEQUENCE SEQ_EMPNO <br><span class="hljs-keyword">START</span> <span class="hljs-keyword">WITH</span> <span class="hljs-number">9000</span> <br>MAXVALUE <span class="hljs-number">9999</span>;<br><br><span class="hljs-comment">---------</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">TRIGGER</span> tri_insert_emp<br>  BEFORE <span class="hljs-keyword">INSERT</span>  <span class="hljs-keyword">ON</span> emp<br>  <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">EACH</span> <span class="hljs-type">ROW</span><br><span class="hljs-keyword">BEGIN</span><br>  if :new.deptno <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span><br>    :new.deptno:<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>  ELSIF :new.deptno<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">then</span><br>    :new.job:<span class="hljs-operator">=</span><span class="hljs-string">&#x27;SALSEMAN&#x27;</span>;<br>  <span class="hljs-keyword">end</span> if;<br>  <span class="hljs-keyword">SELECT</span> seq_empno.NEXTVAL<br>      <span class="hljs-keyword">INTO</span> :new.empno<br>      <span class="hljs-keyword">FROM</span> dual;<br><span class="hljs-keyword">END</span> tri_insert_emp;<br><span class="hljs-comment">--------</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> emp (ename,sal) <span class="hljs-keyword">values</span> (‘LL<span class="hljs-string">&#x27;,2300);</span><br><span class="hljs-string">insert into emp (empno,ename,sal) values (9100,‘HH&#x27;</span>,<span class="hljs-number">2500</span>);<br><br></code></pre></td></tr></table></figure>

<h4 id="管理触发器"><a href="#管理触发器" class="headerlink" title="管理触发器"></a>管理触发器</h4><ul>
<li><p>禁用或启用一个触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TRIGGER</span> trigger_name DISABLE <span class="hljs-operator">|</span> ENABLE<br></code></pre></td></tr></table></figure></li>
<li><p>禁用或启用一张表的多有触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name DISABLE <span class="hljs-operator">|</span> ENABLE <span class="hljs-keyword">ALL</span> TRIGGERS<br></code></pre></td></tr></table></figure></li>
<li><p>重新编译一个触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TRIGGER</span> trigger_name COMPILE<br></code></pre></td></tr></table></figure></li>
<li><p>删除触发器</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TRIGGER</span> trigger_name<br></code></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><ul>
<li>子程序是带名的PL/SQL块，能够接受参数和被环境调用。在PL/SQL中两类子程序：过程和函数</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span>header<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">IS</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">AS</span><br>    声明部分<br><span class="hljs-keyword">BEGIN</span><br>    执行部分<br>EXCEPTION (可选)<br>    异常处理部分<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<ul>
<li>子程序说明（<em>header）决定</em>:<ul>
<li>PL/SQL子程序的类型是过程还是函数。</li>
<li>子程序的名称</li>
<li>参数列表</li>
<li>当子程序是函数时必须要有返回值(使用RETURN子句)</li>
<li>关键字IS或AS是必须的。</li>
</ul>
</li>
<li>子程序体:是一个拥有声明、执行和异常处理部分的PL/SQL块。<ul>
<li>声明部分介于<strong>IS|AS</strong>和<strong>BEGIN</strong>之间。在匿名块中必须使用<strong>DECLARE</strong>关键字显示的指出声明部分，而在<strong>子程序中没有DECLARE关键字</strong>。</li>
<li>执行部分介于BEGIN和END关键字之间，这部分必须存在</li>
<li>异常处理部分介于EXCEPTION和END之间是可选的部分</li>
</ul>
</li>
</ul>
<h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><h5 id="创建过程"><a href="#创建过程" class="headerlink" title="创建过程"></a>创建过程</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] <span class="hljs-keyword">PROCEDURE</span> procedure_name <br>[(parameter1 [<span class="hljs-keyword">IN</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">OUT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span>] data_type , parameter2 [<span class="hljs-keyword">IN</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">OUT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span>] data­_type,…)]<br><span class="hljs-keyword">IS</span> <span class="hljs-operator">|</span><span class="hljs-keyword">AS</span><br>   [declaration_section;]<br><span class="hljs-keyword">BEGIN</span><br>   executable_section;<br>[EXCEPTION<br>   exception_handlers;]<br><span class="hljs-keyword">END</span> [procedure_name];<br><span class="hljs-comment">-- 注意与匿名块有三点区别：</span><br><span class="hljs-comment">-- 1.无DECLARE关键字</span><br><span class="hljs-comment">-- 2.在END后面可以加过程名  作为定义结束的标志</span><br><span class="hljs-comment">-- 3.存储过程定义完成后需要调用才能执行过程内部的代码。</span><br><br></code></pre></td></tr></table></figure>

<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> display_time <br><span class="hljs-keyword">IS</span><br><span class="hljs-keyword">BEGIN</span><br>   dbms_output.put_line(systimestamp);<br><span class="hljs-keyword">END</span> display_time;<br><br><span class="hljs-comment">-- 使用三种方式调用上面创建的存储过程</span><br><span class="hljs-comment">-- 方式一：使用sqlplus命令EXECUTE(简写EXEC) 调用</span><br>	<span class="hljs-keyword">EXECUTE</span> display_time; <br><span class="hljs-comment">-- 方式二：使用sql命令CALL调用</span><br>	<span class="hljs-keyword">CALL</span> display_time( );<br><span class="hljs-comment">-- 方式三：在PL/SQL块中调用</span><br>	<span class="hljs-keyword">BEGIN</span><br>		display_time;<br>	<span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 形式参数(Formal parameters):在过程中声明的参数就是形式参数。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> insert_emp <br>(<span class="hljs-keyword">no</span>  emp.empno<span class="hljs-operator">%</span>TYPE,			name  emp.ename<span class="hljs-operator">%</span>TYPE,<br>Job  emp.job<span class="hljs-operator">%</span>TYPE,				mgr  emp.mgr<span class="hljs-operator">%</span>TYPE,<br>hiredate emp.hiredate<span class="hljs-operator">%</span>TYPE ,	salary emp.sal<span class="hljs-operator">%</span>TYPE ,<br>comm emp.comm<span class="hljs-operator">%</span>TYPE ,		deptno emp.deptno<span class="hljs-operator">%</span>TYPE <br>)<br><span class="hljs-keyword">IS</span><br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">no</span>,name,job,mgr,hiredate,salary,comm,deptno);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-comment">-- 实际参数(Actual parameters):在调用过程中作为参数传递给过程的变量或表达式就是实际参数。</span><br><span class="hljs-keyword">DECLARE</span><br>v_no  emp.empno<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-number">10000</span>,<br>v_name  emp.ename<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span>‘Jones’,<br>v_job  emp.job<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<br>v_mgr  emp.mgr<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span><span class="hljs-number">7369</span>,<br>v_hiredate emp.hiredate<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span>SYSDATE,<br>v_salary emp.sal<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span> <span class="hljs-number">800</span>,<br>v_comm emp.comm<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span><span class="hljs-keyword">NULL</span>,<br>v_deptno emp.deptno<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span><span class="hljs-number">10</span><br><span class="hljs-keyword">BEGIN</span><br> insert_emp(v_no, v_name, v_job, v_mgr, v_hiredate, v_salary, v_comm, v_deptno );<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 对形式参数的约束：在过程声明中，限制CHAR和VARCHAR2参数的长度以及限制NUMBER参数的精度和/或刻度范围都是非法的。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> ParameterLength (<br>  p_Parameter1 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span> VARCHAR2(<span class="hljs-number">10</span>), <span class="hljs-comment">-- 非法</span><br>  p_Parameter2 <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span> NUMBER(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)) <span class="hljs-keyword">AS</span> <span class="hljs-comment">-- 非法</span><br><span class="hljs-keyword">BEGIN</span><br>  p_Parameter1 :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;abcdefghijklm&#x27;</span>;<br>  p_Parameter2 :<span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br><span class="hljs-keyword">END</span> ParameterLength;<br><span class="hljs-operator">/</span><br><span class="hljs-comment">-- 过程声明非法</span><br></code></pre></td></tr></table></figure>

<h4 id="参数的模式"><a href="#参数的模式" class="headerlink" title="参数的模式"></a>参数的模式</h4><ul>
<li>过程可以通过参数和调用环境进行数据传递</li>
<li>有三种传递模式—<strong>IN、OUT和IN OUT</strong>。如果没有为形式参数指定模式，则使用<strong>缺省模式IN。</strong></li>
</ul>
<p><img src="1-12.png"></p>
<h4 id="IN参数"><a href="#IN参数" class="headerlink" title="IN参数"></a>IN参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> raise_salary<br>(p_id <span class="hljs-keyword">IN</span> emp.empno<span class="hljs-operator">%</span>TYPE)       <span class="hljs-keyword">IS</span><br><span class="hljs-keyword">BEGIN</span><br>     UPDATE emp          <span class="hljs-keyword">SET</span> sal <span class="hljs-operator">=</span> sal <span class="hljs-operator">*</span> <span class="hljs-number">1.10</span>          <span class="hljs-keyword">WHERE</span> empno <span class="hljs-operator">=</span> p_id;<br><span class="hljs-keyword">END</span> raise_salary;<br><span class="hljs-comment">-- 执行</span><br><span class="hljs-keyword">DECLARE</span><br>  v_empno emp.empno<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>;<br><span class="hljs-keyword">BEGIN</span><br>  raise_salary(v_empno);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="OUT参数"><a href="#OUT参数" class="headerlink" title="OUT参数"></a>OUT参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> query_emp<br>(p_id <span class="hljs-keyword">IN</span> emp.empno<span class="hljs-operator">%</span>TYPE, p_name <span class="hljs-keyword">OUT</span> emp.ename<span class="hljs-operator">%</span>TYPE,<br> p_salary <span class="hljs-keyword">OUT</span> emp.sal<span class="hljs-operator">%</span>TYPE,p_comm <span class="hljs-keyword">OUT</span> emp.comm<span class="hljs-operator">%</span>TYPE)<br><span class="hljs-keyword">IS</span><br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">SELECT</span> ename, sal, comm<br>      <span class="hljs-keyword">INTO</span> p_name, p_salary, p_comm<br>      <span class="hljs-keyword">FROM</span> emp  <span class="hljs-keyword">WHERE</span> empno <span class="hljs-operator">=</span> p_id;<br><span class="hljs-keyword">END</span> query_emp;<br><span class="hljs-comment">-- 执行</span><br><span class="hljs-keyword">DECLARE</span><br>  v_empno emp.empno<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>;<br>  v_name  emp.ename<span class="hljs-operator">%</span>TYPE;<br>  v_salary  emp.sal<span class="hljs-operator">%</span>TYPE;<br>  v_comm  emp.comm<span class="hljs-operator">%</span>TYPE;<br><span class="hljs-keyword">BEGIN</span><br>  query_emp(v_empno,v_name,v_salary,v_comm);<br>  dbms_output.put_line(v_empno<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>v_name<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>v_salary<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>v_comm);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="IN-OUT参数"><a href="#IN-OUT参数" class="headerlink" title="IN OUT参数"></a>IN OUT参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 编写程序，交换两个变量的值并输出</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> swap<br>(x <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span> NUMBER ,y <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span> NUMBER)<br><span class="hljs-keyword">IS</span><br>z NUMBER;<br><span class="hljs-keyword">BEGIN</span><br>	z:<span class="hljs-operator">=</span>x;<br>	x:<span class="hljs-operator">=</span>y;<br>	y:<span class="hljs-operator">=</span>z;<br><span class="hljs-keyword">END</span> swap;<br><br><span class="hljs-comment">-- 执行</span><br><span class="hljs-keyword">DECLARE</span><br>  a NUMBER:<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>  b NUMBER:<span class="hljs-operator">=</span><span class="hljs-number">20</span>;<br><span class="hljs-keyword">BEGIN</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;交换前a和b的值是：&#x27;</span><span class="hljs-operator">||</span>a<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  &#x27;</span><span class="hljs-operator">||</span>b);<br>  swap(a,b);<br>  dbms_output.put_line(<span class="hljs-string">&#x27;交换后a和b的值是：&#x27;</span><span class="hljs-operator">||</span>a<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  &#x27;</span><span class="hljs-operator">||</span>b);<br><span class="hljs-keyword">END</span>;<br><br><br></code></pre></td></tr></table></figure>

<h4 id="参数的缺省值"><a href="#参数的缺省值" class="headerlink" title="参数的缺省值"></a>参数的缺省值</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> add_dept<br>  (p_name <span class="hljs-keyword">IN</span> dept.dname<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;unknown&#x27;</span>,<br>   p_loc <span class="hljs-keyword">IN</span> dept.loc<span class="hljs-operator">%</span>TYPE  <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;NEW YORK&#x27;</span>)<br><span class="hljs-keyword">IS</span><br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> dept (deptno,dname, loc)<br>   <span class="hljs-keyword">VALUES</span> (dept_seq.NEXTVAL, p_name, p_loc);<br><span class="hljs-keyword">END</span> add_dept;<br><span class="hljs-comment">-- 执行</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-keyword">BEGIN</span><br>               add_dept;<br>               add_dept (<span class="hljs-string">&#x27;TRAINING&#x27;</span>);<br>               add_dept ( p_loc <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;BOSTON &#x27;</span>, p_name <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;EDUCATION&#x27;</span>);<br>               add_dept ( p_loc <span class="hljs-operator">=</span><span class="hljs-operator">&gt;</span> <span class="hljs-string">&#x27;CHICAGO&#x27;</span>) ;<br>              <span class="hljs-keyword">END</span>;     <span class="hljs-operator">/</span><br><span class="hljs-keyword">SQL</span><span class="hljs-operator">&gt;</span><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> dept;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例8.4  为scott.emp表创建一个能完成插入功能的存储过程insert_emp。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> insert_emp <br>(<span class="hljs-keyword">no</span> <span class="hljs-keyword">IN</span> scott.emp.empno<span class="hljs-operator">%</span>TYPE,<br>    name <span class="hljs-keyword">IN</span> scott.emp.ename<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    job <span class="hljs-keyword">IN</span> scott.emp.job<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<br>    mgr <span class="hljs-keyword">IN</span> scott.emp.mgr<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">7369</span>,<br>    hiredate scott.emp.hiredate<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> SYSDATE,<br>    salary scott.emp.sal<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">800</span>,<br>    comm scott.emp.comm<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>    deptno scott.emp.deptno<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">10</span>)   <span class="hljs-keyword">IS</span><br>    e_integrity EXCEPTION;<br>    PRAGMA EXCEPTION_INIT (e_integrity,<span class="hljs-number">-2291</span>);<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> scott.emp <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">no</span>,name,job,mgr,hiredate,salary,comm,deptno);<br>    EXCEPTION<br>        <span class="hljs-keyword">WHEN</span> DUP_VAL_ON_INDEX <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;该员工已经存在！&#x27;</span>);<br>        <span class="hljs-keyword">WHEN</span> e_integrity <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;部门编号填写错误！&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><span class="hljs-comment">-- 注意：在参数的定义上，除了向主键字段empno插入值的变量no没有设置默认值外，其他所有的变量都给出了默认值，这样当用户调用该存储过程时，可以指定任意个数的实参。 </span><br><br></code></pre></td></tr></table></figure>

<h4 id="删除过程"><a href="#删除过程" class="headerlink" title="删除过程"></a>删除过程</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> procedure_name;<br></code></pre></td></tr></table></figure>

<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="创建函数"><a href="#创建函数" class="headerlink" title="创建函数"></a>创建函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> [<span class="hljs-keyword">OR</span> REPLACE] <span class="hljs-keyword">FUNCTION</span> function_name <br>[(argument1 [<span class="hljs-keyword">IN</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">OUT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span>] data_type , argument2 [<span class="hljs-keyword">IN</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">OUT</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">IN</span> <span class="hljs-keyword">OUT</span>] data­_type,…)]<br><span class="hljs-keyword">RETURN</span> data_type<br><span class="hljs-keyword">IS</span> <span class="hljs-operator">|</span><span class="hljs-keyword">AS</span><br>   [declaration_section;]<br><span class="hljs-keyword">BEGIN</span><br>   executable_section;<br>   <span class="hljs-keyword">RETURN</span> expression;<br>[EXCEPTION<br>   exception_handlers;<br><span class="hljs-keyword">RETURN</span> expression;<br><span class="hljs-keyword">END</span> [function_name]; <br> <span class="hljs-comment">-- return_datatype是函数返回的数值的类型，不能对数据类型的SIZE进行限定。</span><br><span class="hljs-comment">-- 在PL/SQL块中，可以使用多个RETURN语句，但是必须保证至少有一条RETURN语句存在。函数每一次运行只有一个RETURN语句被执行。</span><br><br></code></pre></td></tr></table></figure>

<h5 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> get_sal<br>      (p_id <span class="hljs-keyword">IN</span> emp.empno<span class="hljs-operator">%</span>TYPE)<br><span class="hljs-keyword">RETURN</span> NUMBER<br><span class="hljs-keyword">IS</span><br>      v_salary emp.sal<span class="hljs-operator">%</span>TYPE :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">BEGIN</span><br>     <span class="hljs-keyword">SELECT</span> sal     <span class="hljs-keyword">INTO</span> v_salary     <span class="hljs-keyword">FROM</span> emp     <span class="hljs-keyword">WHERE</span> empno <span class="hljs-operator">=</span> p_id;<br>     <span class="hljs-keyword">RETURN</span> v_salary;<br><span class="hljs-keyword">END</span> get_sal;<br><br></code></pre></td></tr></table></figure>

<h5 id="执行函数"><a href="#执行函数" class="headerlink" title="执行函数"></a>执行函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 注意：因为函数具有返回值，所以调用函数是作为一个表达式的一部分，而不能像调用过程那样作为一个独立的语句使用。 </span><br><span class="hljs-comment">-- 方式一：SQLPLUS命令使用变量接收返回值</span><br>VAR salary NUMBER;<br><span class="hljs-keyword">EXEC</span> :salary:<span class="hljs-operator">=</span>get_sal(<span class="hljs-number">7369</span>);<br>PRINT salary;<br><span class="hljs-comment">-- 方式二：在SQL语句中直接调用函数</span><br><span class="hljs-keyword">SELECT</span> get_sal(<span class="hljs-number">7369</span>) <span class="hljs-keyword">FROM</span> DUAL;<br><span class="hljs-comment">-- 方式三：使用DBMS_OUTPUT调用函数（表达式运算）</span><br>dbms_output.put_line(<span class="hljs-string">&#x27;工资是:&#x27;</span><span class="hljs-operator">||</span> get_sal(<span class="hljs-number">7369</span>));<br><br></code></pre></td></tr></table></figure>

<h5 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FUNCTION</span> function_name;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例  创建函数，从scott.emp表中查询指定编号职工的工资。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> select_sal<br>(<span class="hljs-keyword">no</span> scott.emp.empno<span class="hljs-operator">%</span>TYPE)<br><span class="hljs-keyword">RETURN</span> scott.emp.sal<span class="hljs-operator">%</span>TYPE<br><span class="hljs-keyword">IS</span><br>salary scott.emp.sal<span class="hljs-operator">%</span>TYPE;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> sal <span class="hljs-keyword">INTO</span> salary <span class="hljs-keyword">FROM</span> scott.emp <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span><span class="hljs-keyword">no</span>;<br><span class="hljs-keyword">RETURN</span> salary;<br>EXCEPTION<br><span class="hljs-keyword">WHEN</span> NO_DATA_FOUND <span class="hljs-keyword">THEN</span><br><span class="hljs-keyword">RETURN</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例   创建函数，从scott.emp表中查询指定员编号工的工资和姓名。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">FUNCTION</span> SELECT_NAME_SAL<br>(P_EMPNO <span class="hljs-keyword">IN</span> NUMBER,P_SAL <span class="hljs-keyword">OUT</span> NUMBER, P_NAME <span class="hljs-keyword">OUT</span> VARCHAR2)<br><span class="hljs-keyword">RETURN</span> NUMBER  <span class="hljs-comment">--0 表示成功 1表示异常 员工编号不存在</span><br><span class="hljs-keyword">IS</span><br>V_RESULT NUMBER:<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">SELECT</span> SAL ,ENAME <span class="hljs-keyword">INTO</span> P_SAL ,P_NAME <span class="hljs-keyword">FROM</span> EMP <span class="hljs-keyword">WHERE</span> EMPNO<span class="hljs-operator">=</span> P_EMPNO;<br><span class="hljs-keyword">RETURN</span> V_RESULT;<br>EXCEPTION<br><span class="hljs-keyword">WHEN</span> NO_DATA_FOUND <span class="hljs-keyword">THEN</span><br>	DBMS_OUTPUT.PUT_LINE(<span class="hljs-string">&#x27;无符合要求的记录&#x27;</span>);<br>  	V_RESULT:<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">RETURN</span> V_RESULT;<br><span class="hljs-keyword">END</span>;<br><br><br><br></code></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle复习8</title>
    <url>/2021/11/11/Oracle%E5%A4%8D%E4%B9%A08/</url>
    <content><![CDATA[<h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><h4 id="IF逻辑结构"><a href="#IF逻辑结构" class="headerlink" title="IF逻辑结构"></a>IF逻辑结构</h4><ul>
<li><strong>IF-THEN-END IF</strong></li>
<li><strong>IF-THEN-ELSE-END IF</strong></li>
<li><strong>IF-THEN-ELSIF-END IF</strong></li>
</ul>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">IF <span class="hljs-keyword">condition</span> <span class="hljs-keyword">THEN</span><br>  statements;<br>[ELSIF <span class="hljs-keyword">condition</span> <span class="hljs-keyword">THEN</span> <br>  statements;]<br>[<span class="hljs-keyword">ELSE</span> <br>  statements;]<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">IF v_ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;OSBORNE&#x27;</span> <span class="hljs-keyword">THEN</span> <br>  v_mgr :<span class="hljs-operator">=</span> <span class="hljs-number">22</span>;<br><span class="hljs-keyword">END</span> IF; <br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">IF v_ename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;MILLER&#x27;</span> <span class="hljs-keyword">THEN</span><br>  v_job :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>;     <br>  v_deptno :<span class="hljs-operator">=</span> <span class="hljs-number">35</span>;<br>  v_new_comm :<span class="hljs-operator">=</span> sal <span class="hljs-operator">*</span> <span class="hljs-number">0.20</span>; <br><span class="hljs-keyword">END</span> IF;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">If var1<span class="hljs-operator">&gt;</span><span class="hljs-number">10</span> <span class="hljs-keyword">then</span><br>   if var2<span class="hljs-operator">&lt;</span>var1 <span class="hljs-keyword">then</span><br>      var2:<span class="hljs-operator">=</span>var1<span class="hljs-operator">+</span><span class="hljs-number">20</span>;<br>   <span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">End</span> if;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">IF v_shipdate <span class="hljs-operator">-</span> v_orderdate <span class="hljs-operator">&lt;</span> <span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span>  <br>  v_ship_flag :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Acceptable&#x27;</span>;<br><span class="hljs-keyword">ELSE</span><br>  v_ship_flag :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Unacceptable&#x27;</span>;<br><span class="hljs-keyword">END</span> IF;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- ELSIF无匹配的END IF。</span><br>IF v_start <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span> <span class="hljs-keyword">THEN</span><br>  v_start :<span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-operator">*</span> v_start;<br>ELSIF v_start <span class="hljs-operator">&gt;=</span> <span class="hljs-number">50</span> <span class="hljs-keyword">THEN</span>              <br>  v_start :<span class="hljs-operator">=</span> <span class="hljs-number">.5</span> <span class="hljs-operator">*</span> v_start;<br><span class="hljs-keyword">ELSE</span><br>  v_start :<span class="hljs-operator">=</span> <span class="hljs-number">.1</span> <span class="hljs-operator">*</span> v_start;<br><span class="hljs-keyword">END</span> IF;<br><br></code></pre></td></tr></table></figure>



<h4 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h4><ul>
<li>CASE语句是在Oracle9i中引入的逻辑控制结构。使用CASE语句与IF语句结构不同，CASE语句可以使用简单的结构，有逻辑地从数值清单中作出选择。</li>
</ul>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CASE</span> selector<br><span class="hljs-keyword">WHEN</span> expression1 <span class="hljs-keyword">THEN</span> sequence_of_statements1;<br><span class="hljs-keyword">WHEN</span> expression2 <span class="hljs-keyword">THEN</span> sequence_of_statements2;<br>...<br><span class="hljs-keyword">WHEN</span> expressionN <span class="hljs-keyword">THEN</span> sequence_of_statementsN;<br>[<span class="hljs-keyword">ELSE</span> sequence_of_statementsN<span class="hljs-operator">+</span><span class="hljs-number">1</span>;]<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-comment">-- 注意：为了避免CASE_NOT_FOUND异常，在编写CASE语句时应该带有ELSE语句。 </span><br><br></code></pre></td></tr></table></figure>

<h5 id="比较IF语句和CASE语句"><a href="#比较IF语句和CASE语句" class="headerlink" title="比较IF语句和CASE语句"></a>比较IF语句和CASE语句</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">IF grade <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">THEN</span> dbms_output.put_line(<span class="hljs-string">&#x27;Excellent&#x27;</span>);<br>ELSIF grade <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">THEN</span> dbms_output.put_line(<span class="hljs-string">&#x27;Very Good&#x27;</span>);<br>ELSIF grade <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">THEN</span> dbms_output.put_line(<span class="hljs-string">&#x27;Good&#x27;</span>);<br>ELSIF grade <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;D&#x27;</span> <span class="hljs-keyword">THEN</span> dbms_output. put_line(<span class="hljs-string">&#x27;Fair&#x27;</span>);<br>ELSIF grade <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;E&#x27;</span> <span class="hljs-keyword">THEN</span> dbms_output.put_line(<span class="hljs-string">&#x27;Poor&#x27;</span>);<br><span class="hljs-keyword">ELSE</span><br>  dbms_output.put_line(<span class="hljs-string">&#x27;No such grade&#x27;</span>);<br><span class="hljs-keyword">END</span> IF;<br><span class="hljs-comment">----------------------------------------------------------------</span><br><span class="hljs-keyword">CASE</span> grade<br><span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;Excellent&#x27;</span>);<br><span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;Very Good&#x27;</span>);<br><span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;Good&#x27;</span>);<br><span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;D&#x27;</span> <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;Fair&#x27;</span>);<br><span class="hljs-keyword">WHEN</span> <span class="hljs-string">&#x27;E&#x27;</span> <span class="hljs-keyword">THEN</span>  dbms_output.put_line(<span class="hljs-string">&#x27;Poor&#x27;</span>);<br><span class="hljs-keyword">ELSE</span> dbms_output.put_line(<span class="hljs-string">&#x27;No such grade&#x27;</span>);<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从emp表中查询指定员工的工资，并判断该员工的工资是否低于2000，如果条件成立，那么将该员工的工资增加200</span><br><span class="hljs-keyword">DECLARE</span><br>  v_sal emp.sal<span class="hljs-operator">%</span>TYPE;<br>  v_ename emp.ename<span class="hljs-operator">%</span>type:<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&amp;ename&#x27;</span>;<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">SELECT</span> sal <span class="hljs-keyword">INTO</span> v_sal <span class="hljs-keyword">FROM</span> scott.emp<br>  <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">LOWER</span>(ename)<span class="hljs-operator">=</span><span class="hljs-built_in">LOWER</span>(v_ename);<br>  IF v_sal <span class="hljs-operator">&lt;</span><span class="hljs-number">2000</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>v_sal<span class="hljs-operator">+</span><span class="hljs-number">200</span><br>      <span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">LOWER</span>(ename)<span class="hljs-operator">=</span><span class="hljs-built_in">LOWER</span>(v_ename);<br>  <span class="hljs-keyword">END</span> IF;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从emp表中查询指定员工的工作，并根据工作来修改他的工资</span><br><span class="hljs-keyword">DECLARE</span><br>  v_job emp.job<span class="hljs-operator">%</span>type;<br>  v_sal emp.sal<span class="hljs-operator">%</span>type;<br>  v_no emp.empno<span class="hljs-operator">%</span>type;<br>  v_ename emp.ename<span class="hljs-operator">%</span>type;<br><span class="hljs-keyword">BEGIN</span><br>  v_no:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>;<br>  <span class="hljs-keyword">SELECT</span> job,sal,ename <span class="hljs-keyword">INTO</span> v_job,v_sal,v_ename<br>  <span class="hljs-keyword">FROM</span>  emp <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span>v_no;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;name:&#x27;</span><span class="hljs-operator">||</span>v_ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;job:&#x27;</span><span class="hljs-operator">||</span>v_job<span class="hljs-operator">||</span><span class="hljs-string">&#x27;sal:&#x27;</span><span class="hljs-operator">||</span>v_sal);<br>  IF v_job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;PRESIDENT&#x27;</span> <span class="hljs-keyword">THEN</span> <br>	v_sal:<span class="hljs-operator">=</span> v_sal <span class="hljs-operator">+</span><span class="hljs-number">1000</span>; <br>    UPDATE emp <span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>v_sal <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span>v_no;<br>  ELSIF v_job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;MANAGER&#x27;</span> <span class="hljs-keyword">THEN</span><br>    UPDATE emp <span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>v_sal<span class="hljs-operator">+</span><span class="hljs-number">500</span> <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span>v_no;<br>  ELSIF v_job<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CLERK&#x27;</span> <span class="hljs-keyword">THEN</span><br>    UPDATE emp <span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>v_sal<span class="hljs-operator">+</span><span class="hljs-number">200</span> <span class="hljs-keyword">where</span> empno<span class="hljs-operator">=</span>v_no;<br>  <span class="hljs-keyword">ELSE</span><br>    UPDATE emp <span class="hljs-keyword">SET</span> sal<span class="hljs-operator">=</span>v_sal<span class="hljs-operator">+</span><span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span>v_no;<br>  <span class="hljs-keyword">END</span> IF;<br>  <span class="hljs-keyword">SELECT</span> sal <span class="hljs-keyword">INTO</span> v_sal <span class="hljs-keyword">FROM</span> scott.emp <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span>v_no;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;name:&#x27;</span><span class="hljs-operator">||</span>v_ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;job:&#x27;</span><span class="hljs-operator">||</span>v_job<span class="hljs-operator">||</span><span class="hljs-string">&#x27;sal:&#x27;</span><span class="hljs-operator">||</span>v_sal);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 修改emp表中指定部门的职工的奖金</span><br><span class="hljs-keyword">DECLARE</span><br>  v_deptno emp.deptno<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>;<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">CASE</span> v_deptno<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-number">10</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span>v_deptno;<br>      dbms_output.put_line(<span class="hljs-string">&#x27;deptno:&#x27;</span><span class="hljs-operator">||</span>v_deptno<span class="hljs-operator">||</span><span class="hljs-string">&#x27;comm:&#x27;</span><span class="hljs-operator">||</span><span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-number">20</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">80</span> <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span>v_deptno;<br>      dbms_output.put_line(<span class="hljs-string">&#x27;deptno:&#x27;</span><span class="hljs-operator">||</span>v_deptno<span class="hljs-operator">||</span><span class="hljs-string">&#x27;comm:&#x27;</span><span class="hljs-operator">||</span><span class="hljs-number">80</span>);<br>    <span class="hljs-keyword">WHEN</span> <span class="hljs-number">30</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">50</span> <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span>v_deptno;<br>      dbms_output.put_line(<span class="hljs-string">&#x27;deptno:&#x27;</span><span class="hljs-operator">||</span>v_deptno<span class="hljs-operator">||</span><span class="hljs-string">&#x27;comm:&#x27;</span><span class="hljs-operator">||</span><span class="hljs-number">50</span>);<br>    <span class="hljs-keyword">ELSE</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;the deptno is not exist&#x27;</span>);<br>  <span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 根据员工的工资，修改emp表中的奖金值。</span><br><span class="hljs-keyword">DECLARE</span><br>  v_sal emp.sal<span class="hljs-operator">%</span>TYPE;<br>  v_ename emp.ename<span class="hljs-operator">%</span>TYPE;<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">SELECT</span> ename,sal <span class="hljs-keyword">into</span> v_ename,v_sal <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> empno<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>;<br>  <span class="hljs-keyword">CASE</span><br>    <span class="hljs-keyword">WHEN</span> v_sal<span class="hljs-operator">&lt;</span><span class="hljs-number">1000</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span>v_ename;<br>    <span class="hljs-keyword">WHEN</span> v_sal<span class="hljs-operator">&lt;</span><span class="hljs-number">2000</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">80</span> <span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span>v_ename;<br>    <span class="hljs-keyword">WHEN</span> v_sal <span class="hljs-operator">&lt;</span><span class="hljs-number">6000</span> <span class="hljs-keyword">THEN</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">50</span> <span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span>v_ename;<br>    <span class="hljs-keyword">ELSE</span><br>      UPDATE emp <span class="hljs-keyword">SET</span> comm<span class="hljs-operator">=</span><span class="hljs-number">30</span> <span class="hljs-keyword">WHERE</span> ename<span class="hljs-operator">=</span>v_ename;<br>  <span class="hljs-keyword">END</span> <span class="hljs-keyword">CASE</span>;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h3 id="循环控制结构"><a href="#循环控制结构" class="headerlink" title="循环控制结构"></a>循环控制结构</h3><ul>
<li>Loops循环是一种控制结构，允许重复执行一组命令，直到决定停止循环为止</li>
<li>三种loop循环类型:<ul>
<li><strong>Basic loop</strong></li>
<li><strong>FOR loop</strong></li>
<li><strong>WHILE loop</strong></li>
</ul>
</li>
</ul>
<h4 id="Basic-Loop"><a href="#Basic-Loop" class="headerlink" title="Basic Loop"></a>Basic Loop</h4><h5 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">LOOP              <span class="hljs-comment">-- 以循环关键字Loop开始循环        </span><br>  statement1;     <span class="hljs-comment">-- 可执行语句</span><br>  . . .<br>  EXIT [<span class="hljs-keyword">WHEN</span> <span class="hljs-keyword">condition</span>]; <span class="hljs-comment">-- 满足条件退出循环[条件语句]</span><br>  statement2;          <br><span class="hljs-keyword">END</span> LOOP;                <span class="hljs-comment">-- 关键字End Loop结束循环</span><br><br><span class="hljs-comment">-- 上面的condition条件		是一个Boolean变量或表达式(TRUE、FALSE或NULL);</span><br></code></pre></td></tr></table></figure>

<h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 给定任意一个整数，计算该数的阶乘</span><br><span class="hljs-keyword">DECLARE</span><br>  v_num NUMBER(<span class="hljs-number">2</span>):<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>num;  <span class="hljs-comment">--用户任意给定的一个整数</span><br>  v_pro NUMBER(<span class="hljs-number">20</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;  <br>  i NUMBER(<span class="hljs-number">2</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;  <span class="hljs-comment">--控制循环结束的循环变量</span><br><span class="hljs-keyword">BEGIN</span><br>  IF v_num<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>    v_pro:<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">ELSE</span><br>    LOOP<br>      v_pro:<span class="hljs-operator">=</span>v_pro<span class="hljs-operator">*</span>i;  <span class="hljs-comment">--计算给定整数的阶乘</span><br>      i:<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>      EXIT <span class="hljs-keyword">WHEN</span> i<span class="hljs-operator">&gt;</span>v_num;<br>    <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-keyword">END</span> IF;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;num:&#x27;</span><span class="hljs-operator">||</span>v_num<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  factorial:&#x27;</span><span class="hljs-operator">||</span>v_pro);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="FOR-Loop"><a href="#FOR-Loop" class="headerlink" title="FOR Loop"></a>FOR Loop</h4><h5 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOR</span> counter <span class="hljs-keyword">in</span> [REVERSE] <br>    lower_bound..upper_bound LOOP  <br>  statement1;<br>  statement2;<br>  . . .<br><span class="hljs-keyword">END</span> LOOP;<br></code></pre></td></tr></table></figure>

<h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用FOR循环实现某数的阶乘</span><br><span class="hljs-keyword">DECLARE</span><br>  v_num NUMBER(<span class="hljs-number">2</span>):<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>num;<br>  v_pro NUMBER(<span class="hljs-number">20</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">BEGIN</span><br>  IF v_num<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>    v_pro:<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">ELSE</span><br>    <span class="hljs-keyword">FOR</span> i <span class="hljs-keyword">IN</span> <span class="hljs-number">1.</span>.v_num LOOP<br>      v_pro:<span class="hljs-operator">=</span>v_pro<span class="hljs-operator">*</span>i;      <br>    <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-keyword">END</span> IF;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;num:&#x27;</span><span class="hljs-operator">||</span>v_num<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  factorial:&#x27;</span><span class="hljs-operator">||</span>v_pro);<br>  <span class="hljs-comment">--dbms_output.put(&#x27;num:&#x27;||v_num);</span><br>  <span class="hljs-comment">--dbms_output.put_line(&#x27;  factorial:&#x27;||v_pro);</span><br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<h4 id="While-Loop"><a href="#While-Loop" class="headerlink" title="While Loop"></a>While Loop</h4><h5 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">WHILE <span class="hljs-keyword">condition</span> LOOP<br>  statement1;<br>  statement2;<br>  . . .<br><span class="hljs-keyword">END</span> LOOP;<br></code></pre></td></tr></table></figure>

<h5 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用WHILE循环实现某数的阶乘</span><br><span class="hljs-keyword">DECLARE</span><br>  v_num NUMBER(<span class="hljs-number">2</span>):<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>num;<br>  v_pro NUMBER(<span class="hljs-number">20</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>  i NUMBER(<span class="hljs-number">2</span>):<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">BEGIN</span><br>  IF v_num<span class="hljs-operator">=</span><span class="hljs-number">0</span> <span class="hljs-keyword">THEN</span><br>    v_pro:<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">ELSE</span><br>    WHILE i<span class="hljs-operator">&lt;=</span>v_num LOOP<br>      v_pro:<span class="hljs-operator">=</span>v_pro<span class="hljs-operator">*</span>i; <br>      i:<span class="hljs-operator">=</span>i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-keyword">END</span> IF;<br>  dbms_output.put_line(<span class="hljs-string">&#x27;num:&#x27;</span><span class="hljs-operator">||</span>v_num<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  factorial:&#x27;</span><span class="hljs-operator">||</span>v_pro);<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<h3 id="游标-Cursors"><a href="#游标-Cursors" class="headerlink" title="游标(Cursors)"></a>游标(Cursors)</h3><h4 id="隐式游标"><a href="#隐式游标" class="headerlink" title="隐式游标"></a>隐式游标</h4><p><img src="1-13.png"></p>
<h5 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 从表rooms中删除指定的room_id行，并打印删除的行数</span><br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span>;<br><span class="hljs-keyword">DECLARE</span><br>  v_empno  NUMBER :<span class="hljs-operator">=</span> <span class="hljs-number">7788</span>;<br>  rows_deleted VARCHAR2(<span class="hljs-number">100</span>);<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">DELETE</span>   <span class="hljs-keyword">FROM</span> emp<br>  <span class="hljs-keyword">WHERE</span>    empno <span class="hljs-operator">=</span> v_empno;<br>  rows_deleted :<span class="hljs-operator">=</span> <span class="hljs-keyword">SQL</span><span class="hljs-operator">%</span>ROWCOUNT<span class="hljs-operator">||</span><span class="hljs-string">&#x27; rows deleted.&#x27;</span>;<br>  dbms_output.put_line(rows_deleted);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h4 id="显示游标"><a href="#显示游标" class="headerlink" title="显示游标"></a>显示游标</h4><p><img src="1-14.png"></p>
<p><img src="1-15.png"></p>
<h5 id="声明游标"><a href="#声明游标" class="headerlink" title="声明游标"></a>声明游标</h5><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CURSOR</span> cursor_name <span class="hljs-keyword">IS</span><br>     select_statement; <br></code></pre></td></tr></table></figure>

<ul>
<li>在游标声明中<strong>不能包含INTO子句</strong></li>
<li>如果处理的行<strong>要求特定的顺序</strong>，在查询语句中可以<strong>使用 ORDER BY子句</strong>。</li>
</ul>
</li>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span><br>  <span class="hljs-keyword">CURSOR</span> c1 <span class="hljs-keyword">IS</span> <br>    <span class="hljs-keyword">SELECT</span> empno, ename<br>	    <span class="hljs-keyword">FROM</span>   emp;<br><br>  <span class="hljs-keyword">CURSOR</span> c2 <span class="hljs-keyword">IS</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span>   dept<br>    <span class="hljs-keyword">WHERE</span>  deptno <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">BEGIN</span><br>  ...<br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="打开游标"><a href="#打开游标" class="headerlink" title="打开游标"></a>打开游标</h5><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">OPEN</span>		cursor_name;                    <br></code></pre></td></tr></table></figure></li>
</ul>
<p><strong>打开游标</strong></p>
<ol>
<li><p><strong>执行查询。</strong></p>
</li>
<li><p><strong>活动集（查询结果的行的集合）被确定。</strong></p>
</li>
<li><p><strong>活动集的指针指向第一行。</strong></p>
</li>
</ol>
<ul>
<li><p><strong>如果查询没有返回行，不会抛出异常。</strong></p>
</li>
<li><p><strong>提取一行后，应该使用游标属性测试结果。</strong></p>
</li>
</ul>
<h5 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h5><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FETCH</span> cursor_name <span class="hljs-keyword">INTO</span>	[variable1, variable2, ...]<br>									<span class="hljs-operator">|</span> record_name];   <br></code></pre></td></tr></table></figure></li>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span><br>  v_ename  emp.ename<span class="hljs-operator">%</span>TYPE;<br>  v_sal    emp.sal<span class="hljs-operator">%</span>TYPE;<br>  v_empRecord  emp<span class="hljs-operator">%</span>ROWTYPE;<br><br>  <span class="hljs-keyword">CURSOR</span> cur_AllEmp <span class="hljs-keyword">IS</span><br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">FROM</span> emp;  <br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-keyword">OPEN</span> cur_AllEmp;<br><br>  <span class="hljs-keyword">FETCH</span> cur_AllEmp <span class="hljs-keyword">INTO</span> v_empRecord;<br><br>  <span class="hljs-keyword">FETCH</span> cur_AllEmp <span class="hljs-keyword">INTO</span> v_ename, v_sal; <span class="hljs-comment">-- 错误</span><br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子: 从scott.emp表中查询所有记录，利用游标获取前两行记录并输出ename、job、sal中的值 </span><br><span class="hljs-keyword">DECLARE</span><br><span class="hljs-keyword">CURSOR</span> c1 <span class="hljs-keyword">IS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> emp;<br>emp_rec emp<span class="hljs-operator">%</span>ROWTYPE;  <span class="hljs-comment">--定义一个和表结构完全一致的记录变量</span><br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">OPEN</span> c1;<br>   <span class="hljs-keyword">FETCH</span> c1 <span class="hljs-keyword">INTO</span> emp_rec;<br>   dbms_output.put_line(<span class="hljs-string">&#x27;姓名是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.ename<span class="hljs-operator">||</span> <span class="hljs-string">&#x27;工作是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.job<span class="hljs-operator">||</span> <span class="hljs-string">&#x27;工资是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.sal);<br>   <span class="hljs-keyword">FETCH</span> c1 <span class="hljs-keyword">INTO</span> emp_rec;<br>   dbms_output.put_line(<span class="hljs-string">&#x27;姓名是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;工作是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.job<span class="hljs-operator">||</span> <span class="hljs-string">&#x27;工资是:&#x27;</span><span class="hljs-operator">||</span>emp_rec.sal);<br>   <span class="hljs-keyword">CLOSE</span> c1;<br><span class="hljs-keyword">END</span>; <br><br></code></pre></td></tr></table></figure>



<hr>
</li>
</ul>
<h5 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h5><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CLOSE</span>		cursor_name;                    <br></code></pre></td></tr></table></figure>

<ul>
<li>当所有的活动集都被检索以后，游标就应该关闭</li>
<li>如果需要，可以在重新打开游标</li>
<li>一旦关闭了游标，再从该游标提取数据就将是非法的。这样做会产生一个Oracle错误</li>
</ul>
<h5 id="显示游标的属性"><a href="#显示游标的属性" class="headerlink" title="显示游标的属性"></a>显示游标的属性</h5></li>
</ul>
<p>![1-16.png]</p>
<h5 id="游标提取BASIC-LOOP和WHILE-LOOP"><a href="#游标提取BASIC-LOOP和WHILE-LOOP" class="headerlink" title="游标提取BASIC LOOP和WHILE LOOP"></a>游标提取BASIC LOOP和WHILE LOOP</h5><ul>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用游标实现逐行输出scott.emp表中部门编号为10的员工姓名和工资。</span><br><span class="hljs-keyword">DECLARE</span><br>   <span class="hljs-keyword">CURSOR</span> emp_cursor <span class="hljs-keyword">IS</span> <br>	<span class="hljs-keyword">SELECT</span> ename,sal <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>   emp_record emp<span class="hljs-operator">%</span>ROWTYPE;  <br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">OPEN</span> emp_cursor ;<br>   LOOP<br>      <span class="hljs-keyword">FETCH</span> emp_cursor <span class="hljs-keyword">INTO</span> emp_record.ename,emp_record.sal;<br>      EXIT <span class="hljs-keyword">WHEN</span> emp_cursor<span class="hljs-operator">%</span>NOTFOUND;<br>      dbms_output.put_line(<span class="hljs-string">&#x27;ename: &#x27;</span><span class="hljs-operator">||</span>emp_record.ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  sal:&#x27;</span><span class="hljs-operator">||</span>emp_record.sal);<br>   <span class="hljs-keyword">END</span> LOOP;<br>   dbms_output.put_line(<span class="hljs-string">&#x27;row count:&#x27;</span><span class="hljs-operator">||</span>emp_cursor<span class="hljs-operator">%</span>rowcount);<br>   <span class="hljs-keyword">CLOSE</span> emp_cursor;<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 使用游标实现逐行输出scott.emp表中部门编号为10的员工姓名和工资。</span><br><span class="hljs-keyword">DECLARE</span><br>   <span class="hljs-keyword">CURSOR</span> emp_cursor <span class="hljs-keyword">IS</span> <br>	<span class="hljs-keyword">SELECT</span> ename,sal <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br>   emp_record emp<span class="hljs-operator">%</span>ROWTYPE;  <br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">OPEN</span> emp_cursor ;<br>   <span class="hljs-keyword">FETCH</span> emp_cursor <span class="hljs-keyword">INTO</span> emp_record.ename,emp_record.sal;<br>   while emp_cursor<span class="hljs-operator">%</span>FOUND LOOP<br>      dbms_output.put_line(<span class="hljs-string">&#x27;ename: &#x27;</span><span class="hljs-operator">||</span>emp_record.ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  sal:&#x27;</span><span class="hljs-operator">||</span>emp_record.sal);<br>      <span class="hljs-keyword">FETCH</span> emp_cursor <span class="hljs-keyword">INTO</span> emp_record.ename,emp_record.sal;<br>   <span class="hljs-keyword">END</span> LOOP;<br>   dbms_output.put_line(<span class="hljs-string">&#x27;row count:&#x27;</span><span class="hljs-operator">||</span>emp_cursor<span class="hljs-operator">%</span>rowcount);<br>   <span class="hljs-keyword">CLOSE</span> emp_cursor;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<h5 id="游标提取FOR-LOOP"><a href="#游标提取FOR-LOOP" class="headerlink" title="游标提取FOR LOOP"></a>游标提取FOR LOOP</h5></li>
<li><p><strong>语法</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">FOR</span> record_name <span class="hljs-keyword">IN</span> cursor_name LOOP   <br>  statement1;<br>  statement2;<br>  . . .<br><span class="hljs-keyword">END</span> LOOP;<br></code></pre></td></tr></table></figure>

<ul>
<li>游标的FOR循环能够便捷的处理显示游标。</li>
<li>FOR循环中的循环控制变量不需要事先定义。</li>
<li>在游标的FOR循环之前，系统能够自动打开游标；在FOR循环结束后，系统能够自动关闭游标，不需要人为操作。</li>
<li>在游标的FOR循环过程中，系统能够自动执行FETCH语句；每一次循环，系统就自动执行一次FETCH语句，将游标指向的当前行记录存入循环控制变量中</li>
</ul>
</li>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子 使用FOR循环实现逐行输出emp表中部门编号为10的员工姓名和工资。</span><br><span class="hljs-keyword">DECLARE</span><br>   <span class="hljs-keyword">CURSOR</span> emp_cursor <span class="hljs-keyword">IS</span> <br>	<span class="hljs-keyword">SELECT</span> ename,sal <span class="hljs-keyword">FROM</span> scott.emp <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span><span class="hljs-number">10</span>;<br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">FOR</span> emp_record <span class="hljs-keyword">IN</span> emp_cursor LOOP<br><br>      dbms_output.put_line(<span class="hljs-string">&#x27;ename: &#x27;</span><span class="hljs-operator">||</span>emp_record.ename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;  sal:&#x27;</span><span class="hljs-operator">||</span>emp_record.sal);<br><br>   <span class="hljs-keyword">END</span> LOOP;<br><br><span class="hljs-comment">/* 该命令无效，因为FOR循环结束后游标自动关闭</span><br><span class="hljs-comment">dbms_output.put_line(&#x27;row count:&#x27;||emp_cursor%rowcount); */</span><br><br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子 使用游标查询emp表中的所有记录，并在程序块中输出工资最高的前五行记录</span><br><span class="hljs-keyword">DECLARE</span><br>   <span class="hljs-keyword">CURSOR</span> cur <span class="hljs-keyword">IS</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> scott.emp <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sal <span class="hljs-keyword">DESC</span>;<br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">FOR</span> rec <span class="hljs-keyword">IN</span> cur  LOOP<br>      IF cur<span class="hljs-operator">%</span>ROWCOUNT<span class="hljs-operator">&lt;=</span><span class="hljs-number">5</span> <span class="hljs-keyword">THEN</span><br>                dbms_output.put_line(<span class="hljs-string">&#x27;ename:&#x27;</span><span class="hljs-operator">||</span>rec.ename<span class="hljs-operator">||</span>’sal:<span class="hljs-string">&#x27;||rec.sal);</span><br><span class="hljs-string">      ELSE </span><br><span class="hljs-string">        EXIT;</span><br><span class="hljs-string">      END IF;</span><br><span class="hljs-string">   END LOOP;</span><br><span class="hljs-string">END;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="带参数的游标"><a href="#带参数的游标" class="headerlink" title="带参数的游标"></a>带参数的游标</h5><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CURSOR</span> cursor_name(parameter_name datatype) <span class="hljs-keyword">IS</span> select_statment; <br></code></pre></td></tr></table></figure>

<ul>
<li>使用open命令打开带参数的游标时，需要给游标传递实参值。</li>
</ul>
</li>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子   定义参数游标，查询指定部门的员工姓名</span><br><span class="hljs-keyword">DECLARE</span><br><span class="hljs-comment">--定义游标参数no，参数类型为number类型</span><br><span class="hljs-keyword">CURSOR</span> emp_cursor( <span class="hljs-keyword">no</span> NUMBER) <span class="hljs-keyword">IS</span> <br>		<span class="hljs-keyword">SELECT</span> ename <span class="hljs-keyword">FROM</span> emp <span class="hljs-keyword">WHERE</span> deptno<span class="hljs-operator">=</span><span class="hljs-keyword">no</span>;<br>emp_rec emp_cursor<span class="hljs-operator">%</span>ROWTYPE;<br><span class="hljs-keyword">BEGIN</span><br>  <span class="hljs-comment">--打开参数游标时，指明一个替代变量作为游标参数的值</span><br>  <span class="hljs-keyword">OPEN</span> emp_cursor(<span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>); <br>  LOOP<br>    <span class="hljs-keyword">FETCH</span> emp_cursor <span class="hljs-keyword">INTO</span> emp_rec;<br>    EXIT <span class="hljs-keyword">WHEN</span> emp_cursor<span class="hljs-operator">%</span>NOTFOUND;     <br>    dbms_output.put_line(<span class="hljs-string">&#x27;ename:&#x27;</span><span class="hljs-operator">||</span>emp_rec.ename);<br>  <span class="hljs-keyword">END</span> LOOP;<br>  <span class="hljs-keyword">CLOSE</span> emp_cursor;<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="异常处理语法"><a href="#异常处理语法" class="headerlink" title="异常处理语法"></a>异常处理语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">EXCEPTION<br>  <span class="hljs-keyword">WHEN</span> exception1 [<span class="hljs-keyword">OR</span> exception2 . . .] <span class="hljs-keyword">THEN</span><br>    statement1;<br>    statement2;<br>    . . .<br>  [<span class="hljs-keyword">WHEN</span> exception3 [<span class="hljs-keyword">OR</span> exception4 . . .] <span class="hljs-keyword">THEN</span><br>    statement1;<br>    statement2;<br>    . . .]<br>  [<span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span><br>    statement1;<br>    statement2;<br>    . . .]<br></code></pre></td></tr></table></figure>

<h4 id="捕获异常规则"><a href="#捕获异常规则" class="headerlink" title="捕获异常规则"></a>捕获异常规则</h4><ul>
<li>WHEN OTHERS用于捕获所有未指定错误。必须是最后一个错误处理语句</li>
<li>EXCEPTION关键字，标识异常处理的开始区域</li>
<li>允许有多个异常处理子句。</li>
<li>在离开异常处理程序块之前，只能有一个错误处理子句被执行。</li>
</ul>
<h4 id="异常的类型"><a href="#异常的类型" class="headerlink" title="异常的类型"></a>异常的类型</h4><p>隐式触发</p>
<ul>
<li>系统预定义异常</li>
<li>系统非预定义异常</li>
</ul>
<p>显示触发</p>
<ul>
<li>用户自定义异常</li>
</ul>
<h5 id="系统预定义异常"><a href="#系统预定义异常" class="headerlink" title="系统预定义异常"></a>系统预定义异常</h5><p><img src="1-17.png"></p>
<ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>  <span class="hljs-keyword">SELECT</span> ... <span class="hljs-keyword">COMMIT</span>;<br>EXCEPTION<br>  <span class="hljs-keyword">WHEN</span> NO_DATA_FOUND <span class="hljs-keyword">THEN</span><br>    statement1; <br>    statement2; 						         <br>  <span class="hljs-keyword">WHEN</span> TOO_MANY_ROWS <span class="hljs-keyword">THEN</span><br>    statement1;<br>  <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span><br>    statement1; <br>    statement2; <br>    statement3;<br><span class="hljs-keyword">END</span>;	<br></code></pre></td></tr></table></figure></li>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span><br>  v_empRecord  emp<span class="hljs-operator">%</span>ROWTYPE; <br>  v_empNo      emp.empno<span class="hljs-operator">%</span>TYPE; <br><span class="hljs-keyword">BEGIN</span>  <br>  <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>  <span class="hljs-keyword">INTO</span> v_empRecord  <span class="hljs-keyword">FROM</span> emp;<br>  <span class="hljs-comment">--SELECT *  INTO v_empRecord  FROM emp  WHERE empno = 12345789 ;</span><br>  <span class="hljs-comment">--SELECT ename  INTO v_empNo  FROM emp  WHERE empno = 7369;</span><br>  EXCEPTION<br>    <span class="hljs-keyword">WHEN</span> TOO_MANY_ROWS <span class="hljs-keyword">THEN</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;TOO_MANY_ROWS EXCEPTION&#x27;</span>); <br>    <span class="hljs-keyword">WHEN</span> NO_DATA_FOUND <span class="hljs-keyword">THEN</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;NO_DATA_FOUND EXCEPTION&#x27;</span>); <br>    <span class="hljs-keyword">WHEN</span> OTHERS <span class="hljs-keyword">THEN</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;OTHERS EXCEPTION&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="系统非预定义异常"><a href="#系统非预定义异常" class="headerlink" title="系统非预定义异常"></a>系统非预定义异常</h5><ul>
<li><p>捕获Oracle服务器错误</p>
</li>
<li><p>将数字-2291与e_products_invalid相关联。（-2291表示违反了完整性约束）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span><br>  e_products_invalid	EXCEPTION;<br>  PRAGMA EXCEPTION_INIT (<br>		e_products_invalid, <span class="hljs-number">-2292</span>);<br>  v_message VARCHAR2(<span class="hljs-number">50</span>);<br><span class="hljs-keyword">BEGIN</span><br>. . .<br>EXCEPTION<br>  <span class="hljs-keyword">WHEN</span> e_products_invalid <span class="hljs-keyword">THEN</span><br>    :g_message :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Product code</span><br><span class="hljs-string">		specified is not valid.&#x27;</span>;<br>. . .<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 为emp表创建一个能完成插入功能的存储过程insert_emp。</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">OR</span> REPLACE <span class="hljs-keyword">PROCEDURE</span> insert_emp <br>(<span class="hljs-keyword">no</span> <span class="hljs-keyword">IN</span> emp.empno<span class="hljs-operator">%</span>TYPE,   name <span class="hljs-keyword">IN</span> emp.ename<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>job <span class="hljs-keyword">IN</span> emp.job<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-string">&#x27;SALESMAN&#x27;</span>,<br>mgr <span class="hljs-keyword">IN</span> emp.mgr<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">7369</span>,<br>hiredate emp.hiredate<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> SYSDATE,<br>salary emp.sal<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">800</span>,<br>comm emp.comm<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>deptno emp.deptno<span class="hljs-operator">%</span>TYPE <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">10</span><br>)<span class="hljs-keyword">IS</span><br>e_integrity EXCEPTION;<br>PRAGMA EXCEPTION_INIT (e_integrity,<span class="hljs-number">-2291</span>);<br><span class="hljs-keyword">BEGIN</span><br>     <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> emp <span class="hljs-keyword">VALUES</span>(<span class="hljs-keyword">no</span>,name,job,mgr,hiredate,salary,comm,deptno);<br>EXCEPTION<br>    <span class="hljs-keyword">WHEN</span> DUP_VAL_ON_INDEX <span class="hljs-keyword">THEN</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;该员工已经存在！&#x27;</span>);<br>    <span class="hljs-keyword">WHEN</span> e_integrity <span class="hljs-keyword">THEN</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;部门编号填写错误！&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="用户自定义异常"><a href="#用户自定义异常" class="headerlink" title="用户自定义异常"></a>用户自定义异常</h4><ul>
<li><p>例子</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[<span class="hljs-keyword">DECLARE</span>]<br>  e_amount_remaining EXCEPTION;<br>. . .<br><span class="hljs-keyword">BEGIN</span><br>. . .<br>  RAISE e_amount_remaining;<br>. . .<br>EXCEPTION<br>  <span class="hljs-keyword">WHEN</span> e_amount_remaining  <span class="hljs-keyword">THEN</span><br>    :g_message :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;There is still an amount</span><br><span class="hljs-string">	             in stock.&#x27;</span>;<br>. . .<br><span class="hljs-keyword">END</span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 例子： 向emp表中插入一条新记录，在执行的过程中捕获系统预定义异常、系统非预定义异常、用户自定义异常，并分别作相应的处理。 </span><br><span class="hljs-keyword">DECLARE</span>  <br>  ex_null EXCEPTION; <span class="hljs-comment">--系统非预定义异常的定义和关联</span><br>  PRAGMA EXCEPTION_INIT(ex_null,<span class="hljs-number">-01400</span>);  <br>  ex_insert EXCEPTION; <span class="hljs-comment">--用户自定义异常的定义  </span><br>  eno scott.emp.empno<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span><span class="hljs-keyword">no</span>; <span class="hljs-comment">--定义程序块变量</span><br>  e_sal scott.emp.sal<span class="hljs-operator">%</span>TYPE:<span class="hljs-operator">=</span><span class="hljs-operator">&amp;</span>salary;<br><span class="hljs-keyword">BEGIN</span><br>  IF e_sal<span class="hljs-operator">&gt;</span><span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span><br>    RAISE ex_insert;  <span class="hljs-comment">--用户自定义异常的触发</span><br>  <span class="hljs-keyword">END</span> IF;<br>  <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> scott.emp(empno,sal) <span class="hljs-keyword">VALUES</span>(eno,e_sal);<br>  EXCEPTION<br>    <span class="hljs-keyword">WHEN</span> DUP_VAL_ON_INDEX  <span class="hljs-keyword">THEN</span>   <span class="hljs-comment">--系统预定义异常的捕获和处理</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;该员工已经存在！&#x27;</span>);<br>    <span class="hljs-keyword">WHEN</span> ex_null <span class="hljs-keyword">THEN</span>   <span class="hljs-comment">--系统非预定义异常的捕获和处理</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;职工编号不能为空！&#x27;</span>);<br>    <span class="hljs-keyword">WHEN</span> ex_insert <span class="hljs-keyword">THEN</span>   <span class="hljs-comment">--用户自定义异常的捕获和处理</span><br>      dbms_output.put_line(<span class="hljs-string">&#x27;员工的工资不能超过10000！&#x27;</span>);<br><span class="hljs-keyword">END</span>;<br><br></code></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle实验1</title>
    <url>/2021/11/12/Oracle%E5%AE%9E%E9%AA%8C1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Oracle实验2</title>
    <url>/2021/11/12/Oracle%E5%AE%9E%E9%AA%8C2/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 编写SQL创建视图v_getTeacherbyDeptID，获取信息技术学院及其下属部门的所有教师信息。</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_getTeacherbyDeptID;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_getTeacherbyDeptID <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teacher <br><span class="hljs-keyword">where</span> dept_id <span class="hljs-keyword">in</span> (<br><span class="hljs-keyword">select</span> dept_id <span class="hljs-keyword">from</span> dept<br><span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> dept_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;信息技术学院&#x27;</span><br><span class="hljs-keyword">connect</span> <span class="hljs-keyword">by</span> prior dept_id <span class="hljs-operator">=</span> parent_id<br>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_getTeacherbyDeptID; <br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 编写SQL创建视图v_getTeacherCountbyProfess，统计各个职称级别的教师人数。</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_getTeacherCountbyProfess;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_getTeacherCountbyProfess <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) &quot;教师人数&quot; , decode(profess,<span class="hljs-string">&#x27;教授&#x27;</span>,<span class="hljs-string">&#x27;1-教授&#x27;</span>,<br>                         <span class="hljs-string">&#x27;副教授&#x27;</span>,<span class="hljs-string">&#x27;2-副教授&#x27;</span>,<br>                         <span class="hljs-string">&#x27;讲师&#x27;</span>,<span class="hljs-string">&#x27;3-讲师&#x27;</span>,<br>                         <span class="hljs-string">&#x27;助教&#x27;</span>,<span class="hljs-string">&#x27;4-助教&#x27;</span>) &quot;职称级别&quot; <span class="hljs-keyword">from</span> teacher <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> profess <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> &quot;职称级别&quot;;<br><br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_getTeacherCountbyProfess;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 编写SQL创建视图v_getCourseCountbyTeacher，统计任课表中各教师的授课数。</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_getCourseCountbyTeacher;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_getCourseCountbyTeacher <span class="hljs-keyword">as</span> <br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span> (<span class="hljs-operator">*</span>) &quot;课程数&quot;, teacher_id &quot;教师编号&quot;,(<span class="hljs-keyword">select</span> tname <span class="hljs-keyword">from</span> teacher <span class="hljs-keyword">where</span> teacher.teacher_id <span class="hljs-operator">=</span> tc.teacher_id)&quot;教师姓名&quot; <span class="hljs-keyword">from</span> tc <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span>  tc.teacher_id; <br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_getCourseCountbyTeacher;<br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 编写SQL创建视图v_getCourseCountForAllTeachers，统计所有教师的授课数。</span><br><br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> v_getCourseCountForAllTeachers;<br><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">view</span> v_getCourseCountForAllTeachers<br><span class="hljs-keyword">as</span><br><span class="hljs-keyword">select</span> a.<span class="hljs-operator">*</span>,b.c &quot;授课数&quot; <span class="hljs-keyword">from</span> teacher a,<br>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) c,teacher_id <span class="hljs-keyword">from</span> tc <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> teacher_id) b<br><span class="hljs-keyword">where</span> a.teacher_id<span class="hljs-operator">=</span> b.teacher_id(<span class="hljs-operator">+</span>);<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> v_getCourseCountForAllTeachers;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle实验3</title>
    <url>/2021/11/12/Oracle%E5%AE%9E%E9%AA%8C3/</url>
    <content><![CDATA[<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- (1）创建“添加教师信息”的匿名块，将输入信息插入教师信息表。</span><br><span class="hljs-comment">-- （2）“添加教师信息”的匿名块的程序框架如下：</span><br><span class="hljs-keyword">declare</span><br>  <span class="hljs-comment">-- 定义接受每个字段数据的变量									</span><br>  <span class="hljs-comment">-- 定义NOTNULL字段输入为null时抛出的用户自定义异常变量	</span><br>  <span class="hljs-comment">-- 定义输入系部代码在部门信息表中不存在时抛出的用户自定义异常变量</span><br>   <span class="hljs-comment">-- 定义其他临时变量</span><br><span class="hljs-keyword">begin</span><br>  <span class="hljs-comment">-- 如果NOTNULL字段输入为null，抛出用户自定义异常			 </span><br>  <span class="hljs-comment">-- 查询输入系部代码在部门信息表中的记录数；如果记录数为0，抛出用户自定义异常</span><br><span class="hljs-comment">-- 检查性别是不是男/女，不是则输出提示信息&#x27;性别不正确！&#x27;，是则继续。</span><br>  <span class="hljs-comment">-- insert语句插入教师信息记录									 </span><br>  <span class="hljs-comment">-- 输出提示信息&#x27;教师信息添加成功！&#x27;</span><br>EXCEPTION<br>    <span class="hljs-comment">-- 处理NOTNULL字段输入为null的用户自定义异常，输出提示信息 </span><br>    <span class="hljs-comment">-- 处理系部代码不存在的用户自定义异常，输出提示信息 </span><br>    <span class="hljs-comment">-- 处理教师编号已经存在产生的系统预定义异常，输出提示信息  </span><br>    <span class="hljs-comment">-- 处理其他异常，输出提示信息</span><br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- lab2</span><br><span class="hljs-keyword">set</span> serveroutput <span class="hljs-keyword">on</span>;<br><br><span class="hljs-comment">-- 创建“添加教师信息”的匿名块，将输入信息插入教师信息表。 </span><br><span class="hljs-keyword">declare</span><br>v_id teacher.teacher_id<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;教师编号&#x27;</span>;<br>v_name teacher.tname<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;教师姓名&#x27;</span>;<br>v_sex teacher.tsex<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;教师性别&#x27;</span>;<br>v_birth teacher.tbirth<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> to_date(<span class="hljs-string">&#x27;&amp;教师出生日期&#x27;</span>,<span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>);<br>v_educ teacher.educ<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;教师学历&#x27;</span>;<br>v_profess teacher.profess<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;教师职称&#x27;</span>;<br>v_dept_id teacher.dept_id<span class="hljs-operator">%</span>type :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&amp;系部代码&#x27;</span>;<br>ex_null exception;<br>ex_dept_no_exist exception;<br>v_count number;<br><br><span class="hljs-keyword">begin</span> <br>    if <span class="hljs-built_in">trim</span>(v_id) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_name) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_sex)<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_birth) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_educ) <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_profess)<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">trim</span>(v_dept_id)<span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <br>      raise ex_null ;<br>    <span class="hljs-keyword">end</span> if;<br>    <br>    <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">into</span> v_count <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> v_dept_id;<br>    if v_count <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-keyword">then</span> <br>      raise ex_dept_no_exist;<br>    <span class="hljs-keyword">end</span> if;<br>    if v_sex <span class="hljs-operator">!=</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">and</span> v_sex<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">then</span> <br>      dbms_output.put_line(<span class="hljs-string">&#x27;性别不正确！&#x27;</span>);<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> teacher <span class="hljs-keyword">values</span>(v_id, v_name, v_sex, v_birth, v_educ, v_profess, v_dept_id);<br>      dbms_output.put_line(<span class="hljs-string">&#x27;教师信息添加成功！&#x27;</span>);<br>      <span class="hljs-keyword">commit</span>;<br>    <span class="hljs-keyword">end</span> if;<br>    <br>    exception<br>      <span class="hljs-keyword">when</span> ex_null <span class="hljs-keyword">then</span> <br>        dbms_output.put_line(<span class="hljs-string">&#x27;输入不能为空噢！&#x27;</span>);<br>      <span class="hljs-keyword">when</span> ex_dept_no_exist <span class="hljs-keyword">then</span> <br>        dbms_output.put_line(<span class="hljs-string">&#x27;系部代码不存在！&#x27;</span>);<br>      <span class="hljs-keyword">when</span> dup_val_on_index <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;该教师已存在&#x27;</span>);<br>      <span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;未知异常!&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> teacher;<br><br><span class="hljs-comment">-- 测试1：输入参数为null</span><br><span class="hljs-comment">-- 测试2：系部代码不存在</span><br><span class="hljs-comment">-- 测试3：输入已存在的教师</span><br><span class="hljs-comment">-- 测试4：未知异常</span><br><span class="hljs-comment">-- 测试5：性别输入不正确</span><br><span class="hljs-comment">-- 测试6：正常执行</span><br></code></pre></td></tr></table></figure>



<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建存储过程pro_StudentsNotUpToStandar</span><br><span class="hljs-comment">-- 存储过程pro_StudentsNotUpToStandar的程序框架如下：</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">procedure</span> pro_StudentsNotUpToStandar<br>(p_deptID varchar2,p_standerCredit number)<br><span class="hljs-keyword">as</span><br>  <span class="hljs-comment">-- 定义形参为null时抛出的用户自定义异常变量	</span><br>  <span class="hljs-comment">-- 定义根据形参部门代码查询指定系部所有学生信息的游标1;		</span><br>  <span class="hljs-comment">-- 定义保存学生所有学分的变量	</span><br>  <span class="hljs-comment">-- 定义保存当前学生编号变量	</span><br>  <span class="hljs-comment">-- 定义根据当前学生编号查询学生所有选修课程信息及学生成绩的游标2;</span><br><span class="hljs-keyword">begin</span><br>  <span class="hljs-comment">-- 如果形参有为null的情况，</span><br>  			<span class="hljs-comment">-- 抛出用户自定义异常；</span><br>  <span class="hljs-comment">-- 循环遍历游标1，完成以下任务：</span><br>		<span class="hljs-comment">-- 查询当前学生获得的所有学分；</span><br>		<span class="hljs-comment">-- 如果学生的总学分小于形参给出的达标学分，就完成以下任务：</span><br>			<span class="hljs-comment">-- 首先输出学生的信息；</span><br>			<span class="hljs-comment">-- 然后遍历游标2 </span><br>				<span class="hljs-comment">-- 输出学生选修的所有课程信息</span><br>  EXCEPTION<br>    <span class="hljs-comment">-- 处理用户自定义异常 </span><br><span class="hljs-keyword">end</span>;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- lab2</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> replace <span class="hljs-keyword">procedure</span> pro_StudentsNotUpToStandar<br>(p_deptID varchar2, p_standerCredit number)<br><span class="hljs-keyword">as</span><br>null_error exception;<br><span class="hljs-keyword">cursor</span> c1 <span class="hljs-keyword">is</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> students <span class="hljs-keyword">where</span> dept_id <span class="hljs-operator">=</span> p_deptID;<br>total_credit number(<span class="hljs-number">3</span>);<br>temp_cur_stuid varchar2(<span class="hljs-number">20</span>);<br><span class="hljs-keyword">cursor</span> c2 <span class="hljs-keyword">is</span> <span class="hljs-keyword">select</span> courses.<span class="hljs-operator">*</span>,sc.grade <span class="hljs-keyword">from</span> sc,courses <span class="hljs-keyword">where</span> sc.course_id <span class="hljs-operator">=</span> courses.course_id <span class="hljs-keyword">and</span> sc.student_id <span class="hljs-operator">=</span> temp_cur_stuid;<br><br><span class="hljs-keyword">begin</span> <br>    if p_deptID <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">or</span> p_standerCredit <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">then</span> <br>      raise null_error; <br>    <span class="hljs-keyword">end</span> if;<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c1 loop<br>      <span class="hljs-keyword">select</span> i.student_id <span class="hljs-keyword">into</span> temp_cur_stuid <span class="hljs-keyword">from</span> dual;<br>      <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(courses.credits) <span class="hljs-keyword">into</span> total_credit <span class="hljs-keyword">from</span> sc,courses <span class="hljs-keyword">where</span> sc.course_id <span class="hljs-operator">=</span> courses.course_id <span class="hljs-keyword">and</span> sc.grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> sc.student_id <span class="hljs-operator">=</span> i.student_id;<br>      if total_credit <span class="hljs-operator">&lt;</span> p_standerCredit <span class="hljs-keyword">then</span><br>          dbms_output.put_line(i.student_id <span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.sname<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.ssex<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.sbirth<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.nationality<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.class_id<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.dept_id);<br>      <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c2 loop<br>        dbms_output.put_line(i.course_id<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.cname<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.credits<span class="hljs-operator">||</span><span class="hljs-string">&#x27; &#x27;</span><span class="hljs-operator">||</span>i.grade);<br>      <span class="hljs-keyword">end</span> loop;<br>      <span class="hljs-keyword">end</span> if;<br>    <span class="hljs-keyword">end</span> loop;<br>    exception <br>      <span class="hljs-keyword">when</span> null_error <span class="hljs-keyword">then</span> dbms_output.put_line(<span class="hljs-string">&#x27;过程输入参数均不能为空！&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><span class="hljs-comment">-- 测试1：当学分为null</span><br><span class="hljs-keyword">call</span> pro_StudentsNotUpToStandar(<span class="hljs-string">&#x27;081&#x27;</span>,<span class="hljs-keyword">null</span>);<br><span class="hljs-comment">-- 测试2：指定系部为null</span><br><span class="hljs-keyword">call</span> pro_StudentsNotUpToStandar(<span class="hljs-keyword">null</span>,<span class="hljs-number">20</span>);<br><span class="hljs-comment">-- 测试3：正常输入</span><br><span class="hljs-keyword">call</span> pro_StudentsNotUpToStandar(<span class="hljs-string">&#x27;081&#x27;</span>,<span class="hljs-number">20</span>);<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>创建SpringBoot项目的三种方法</title>
    <url>/2021/10/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    <content><![CDATA[<h3 id="SpringBoot的介绍"><a href="#SpringBoot的介绍" class="headerlink" title="SpringBoot的介绍"></a>SpringBoot的介绍</h3><p>上javaweb课程的时候，使用Servlet/JSP做开发，一个接口就需要搞一个Servlet，使用很不方便；后来引入了SpringMVC一类的框架，提高了生产力，但是用久了，发现了新问题，即配置繁琐易出错；如果想做一个新项目，需要先搭环境，环境也就是那几行配置，不同的项目可能只有包不同，其他部分的配置都是一样的，Java总背诟病配置繁琐代码量巨大（我学习了golang之后发现go真的太香了），那怎么办呢？Spring Boot应运而生，主要提供了如下功能</p>
<ol>
<li><p>为所有基于Spring的Java开发提供了方便快捷的入门体验</p>
</li>
<li><p>开箱即用，有自己的自定义配置的话用自己的，没有的话用官方自带的即可</p>
</li>
<li><p>提供了一系列通用的非功能性的功能，例如嵌入式服务器、安全管理、健康检测等</p>
</li>
<li><p>绝对没有代码生成，也不需要XML配置</p>
</li>
</ol>
<h3 id="SpringBoot系统要求"><a href="#SpringBoot系统要求" class="headerlink" title="SpringBoot系统要求"></a>SpringBoot系统要求</h3><p>至少要求JDK8，内置的Tomcat版本是9.0</p>
<h3 id="SpringBoot项目的三种创建方式"><a href="#SpringBoot项目的三种创建方式" class="headerlink" title="SpringBoot项目的三种创建方式"></a>SpringBoot项目的三种创建方式</h3><h4 id="在线创建"><a href="#在线创建" class="headerlink" title="在线创建"></a>在线创建</h4><p>这个是官方推荐的创建方式，实际上我们使用IEDA创建SpringBoot项目(第二种方式),也就是从这个网站上或者其他网站上创建的，只不过开发工具帮我们完成了这个过程。</p>
<p>首先打开 <a href="https://start.spring.io/">https://start.spring.io</a>这个网站，如下图：</p>
<p><img src="1.1.png"></p>
<p>配置简单说明：</p>
<ul>
<li><p>构建工具是Maven还是Gradle，我这里选择创建Maven项目</p>
</li>
<li><p>开发语言，这个当然选择Java</p>
</li>
<li><p>SpringBoot 版本，可以看到目前的最新稳定版是2.5.6，所以我这里选择最新稳定版</p>
</li>
<li><p>既然是Maven工程，当然得用项目坐标、项目描述等信息，另外这里还需要输入包名，因为创建成功后会自动生成启动类</p>
</li>
<li><p>Packing表示项目要打包成jar包还是war包，SpringBoot的一大优势就是内嵌了Servlet容器，所以打成jar包可以直接运行。当然也可以更具实际情况选择war包</p>
</li>
<li><p>选择构建的JDK版本</p>
</li>
<li><p>选择需要的依赖，输入关键字比如说web，会有相关的提示，这里我先加入web依赖</p>
</li>
</ul>
<p>所有的事情都完成后，点击下方的<strong>generate</strong>按钮或者快捷键Alt+Enter，将下载下来的项目解压，然后用IDEA打开即可。</p>
<h4 id="使用开发工具创建"><a href="#使用开发工具创建" class="headerlink" title="使用开发工具创建"></a>使用开发工具创建</h4><p>有人觉得使用第一种方式创建项目过于繁琐，那么可以使用开发工具来创建。需要注意的是IDEA只有ultimate版才能创建SpringBoot项目，社区版无此功能。<strong>学生可以通过教育邮箱免费白嫖</strong></p>
<p>首先，在创建项目的时候选择<strong>Spring Initializr</strong></p>
<p><img src="1-2.png"></p>
<p>然后点击Next，填入Maven项目的基本信息</p>
<p><img src="1-3.png"></p>
<p>选择依赖</p>
<p><img src="1-4.png"></p>
<p>完成创建</p>
<h4 id="使用Maven创建"><a href="#使用Maven创建" class="headerlink" title="使用Maven创建"></a>使用Maven创建</h4><p>上面提到的创建SpringBoot项目的方式都借助到了<strong><a href="https://start.spring.io/">https://start.spring.io/</a></strong> 这个网站；有时候网站不会很稳定，会出现项目创建失败的情况，所以这个时候可以选择通过Maven来创建项目。步骤如下</p>
<p>首先创建一个普通的Maven项目</p>
<p><img src="1-5.png"></p>
<p>注意这里不用选择项目骨架（如果大伙是做练习的话，也可以去尝试选择一下，这里大概有十来个 Spring Boot 相关的项目骨架），直接点击 Next ，下一步中填入一个 Maven 项目的基本信息，如下图：</p>
<p><img src="1-6.png"></p>
<p>然后点击Next完成项目的创建。</p>
<p>创建完成之后，在pom.xml文件下，添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>添加成功之后，在Java目录中创建包，编写启动类，这边参考松哥的启动类</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>        SpringApplication.run(App.class, args);<br>    &#125;<br>    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">&quot;/hello&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">hello</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>@EnableAutoConfiguration注解表示开启自动化配置</strong></p>
<p>接下来执行main方法就可以启动一个SpringBoot项目了</p>
<p>项目结构(参考松哥)：</p>
<p><img src="1-7.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是常用的创建SringBoot项目的方式，随着我的学习，如果有更好的创建方式会分享给大家。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven工程的resource结点的理解</title>
    <url>/2021/10/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    <content><![CDATA[<p>当我们使用Mybatis的时候，mapper文件想要在包中被解析，就需要配置resource</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">&lt;resources&gt;<br>      &lt;resource&gt;<br>        &lt;directory&gt;$&#123;basedir&#125;<span class="hljs-regexp">/src/m</span>ain<span class="hljs-regexp">/resources&lt;/</span>directory&gt;<br>        &lt;filtering&gt;<span class="hljs-keyword">true</span>&lt;/filtering&gt;<br>        &lt;<span class="hljs-keyword">includes</span>&gt;<br>          &lt;<span class="hljs-keyword">include</span>&gt;**<span class="hljs-regexp">/application*.yml&lt;/i</span>nclude&gt;<br>          &lt;<span class="hljs-keyword">include</span>&gt;**<span class="hljs-regexp">/application*.yaml&lt;/i</span>nclude&gt;<br>          &lt;<span class="hljs-keyword">include</span>&gt;**<span class="hljs-regexp">/application*.properties&lt;/i</span>nclude&gt;<br>        &lt;/<span class="hljs-keyword">includes</span>&gt;<br>      &lt;/resource&gt;<br>      &lt;resource&gt;<br>        &lt;directory&gt;$&#123;basedir&#125;<span class="hljs-regexp">/src/m</span>ain<span class="hljs-regexp">/resources&lt;/</span>directory&gt;<br>        &lt;excludes&gt;<br>          &lt;<span class="hljs-keyword">exclude</span>&gt;**<span class="hljs-regexp">/application*.yml&lt;/</span><span class="hljs-keyword">exclude</span>&gt;<br>          &lt;<span class="hljs-keyword">exclude</span>&gt;**<span class="hljs-regexp">/application*.yaml&lt;/</span><span class="hljs-keyword">exclude</span>&gt;<br>          &lt;<span class="hljs-keyword">exclude</span>&gt;**<span class="hljs-regexp">/application*.properties&lt;/</span><span class="hljs-keyword">exclude</span>&gt;<br>        &lt;/excludes&gt;<br>      &lt;/resource&gt;<br>    &lt;/resources&gt;<br></code></pre></td></tr></table></figure>

<ul>
<li>resources中可以有多个resource</li>
<li>directory 指定资源目录</li>
<li>includes中可以有多个include</li>
<li>**/application*.yml中最后一个*代表通配符，因为你可能会有-dev -test等等的profile</li>
</ul>
<h4 id="include代表需要这些文件，exclude代表除去这些文件，那你到底是想包括这些文件还是想除去这些文件呢？"><a href="#include代表需要这些文件，exclude代表除去这些文件，那你到底是想包括这些文件还是想除去这些文件呢？" class="headerlink" title="include代表需要这些文件，exclude代表除去这些文件，那你到底是想包括这些文件还是想除去这些文件呢？"></a>include代表需要这些文件，exclude代表除去这些文件，那你到底是想包括这些文件还是想除去这些文件呢？</h4><p>上下两个配置唯一的差别就在<filtering>true</filtering>中，所以关键就在这。</p>
<p>下面是松哥的一个简单案例</p>
<p>新建两个properties文件,a.properties和b.properties，两个文件分别写入a.name=wr1sw和b.name=wr1sw</p>
<p><img src="1-1.png"></p>
<p>接下来使用maven工具package给项目打一个包，会发现classes中出现了这两个配置文件</p>
<p>在pom.xml中定义一些变量,变量是可以在properties文件中引用的，应用方式就是${wr1sw.name},当项目在编译打包的时候会自动替换变量值</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;properties&gt;</span><br>        <span class="hljs-section">&lt;wr1sw.name&gt;</span><span class="hljs-attribute">wr1sw</span>&lt;/wr<span class="hljs-number">1</span>sw.name&gt;<br><span class="hljs-section">&lt;/properties&gt;</span><br></code></pre></td></tr></table></figure>

<p>但是，直接打包的话，properties文件中的变量并没有变，这就涉及到了resource的用法了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--   表示这个东西要进行过滤             --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>加上这行会发现，a.properties中的变量成功能显示了，但是b.properties缺不见了;</p>
<p>如果你没有指定的话，resources下的配置文件都会被编译，如果你指定了，就会按照你指定的来。</p>
<p>如果说我现在不想忽略其他文件(b.properties)，我没有必要在include中加上b.properties，因为在b.properties里面没有需要引用pom.xml里的变量。这个时候可以定义一个exclude,含义是：<br><strong>除了a.properties的文件，其他文件呢会给你保留下来，但是呢其他文件不会进行一个过滤的处理，因为其他文件里面也没有需要处理的(没有引用变量)</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--   表示这个东西要进行过滤             --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--     默认就是false,这里写false是因为其他文件没有用到pom.xml的变量，没有必要过滤处理           --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span>a.properties<span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 项目中的 parent</title>
    <url>/2021/10/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    <content><![CDATA[<p>以下是学习松哥的SpringBoot的学习笔记</p>
<h3 id="你真的了解SpringBoot中的parent吗？"><a href="#你真的了解SpringBoot中的parent吗？" class="headerlink" title="你真的了解SpringBoot中的parent吗？"></a>你真的了解SpringBoot中的parent吗？</h3><p>在上一篇博客中写到了SpringBoot项目的创建方式，这几种创建方式无论哪一种，创建项目成功之后，pom.xml坐标文件中都会有如下一段引用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>   <br></code></pre></td></tr></table></figure>

<h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><p>当我们创建一个SpringBoot项目的时，可以继承一个<strong>spring-boot-starter-parent</strong>，当然也可以不继承它。我们先来看看parent的基本功能有哪些？</p>
<ol>
<li>定义了Java编译版本为1.8</li>
<li>使用UTF-8格式编码</li>
<li>继承自<strong>spring-boot-dependencies</strong>，这个里面定义了依赖的版本，正因为继承了这个依赖，所以我们在写依赖的时候才不需要写版本号</li>
<li>执行打包操作的配置</li>
<li>自动化的资源过滤</li>
<li>自动化的插件配置</li>
<li>针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml</li>
</ol>
<p><strong>请注意，由于application.properties和application.yml文件接受Spring样式占位符 $ {…} ，因此 Maven 过滤更改为使用 @ .. @ 占位符，当然开发者可以通过设置名为 resource.delimiter 的Maven 属性来覆盖 @ .. @ 占位符。</strong></p>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>当我们创建一个 Spring Boot 项目后，我们可以在本地 Maven 仓库中看到看到这个具体的 parent 文件，以 2.1.4 这个版本为例,图片引用松哥。</p>
<p><img src="1-1.png"></p>
<p>我们可以看到，它继承自 spring-boot-dependencies ，这里保存了基本的依赖信息，另外我们也可以看到项目的编码格式，JDK 的版本等信息，当然也有我们前面提到的数据过滤信息。最后，我们再根据它的 parent 中指定的 spring-boot-dependencies 位置，来看看 spring-boot-dependencies 中的定义：</p>
<p><img src="1-2.png"></p>
<p>在这里，我们看到了版本的定义以及 dependencyManagement 节点，明白了为啥 Spring Boot 项目中部分依赖不需要写版本号了</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot的web容器基本配置</title>
    <url>/2021/10/23/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</url>
    <content><![CDATA[<p>我们都知道SpringBoot中内嵌了一个Tomcat中可以直接使用。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/12/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>leetcode刷题日记</title>
    <url>/2022/02/28/leetcode%E5%88%B7%E9%A2%98%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h5><p><a href="https://leetcode-cn.com/problems/binary-search/"> #704 二分查找</a></p>
<p><a href="https://leetcode-cn.com/problems/search-insert-position/"> #35 搜索插入位置</a></p>
<p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/"> #34 在排序数组中查找元素的第一个和最后一个位置</a></p>
<p><a href="https://leetcode-cn.com/problems/sqrtx/">#69 x 的平方根</a></p>
<p><a href="https://leetcode-cn.com/problems/valid-perfect-square/">#367 有效的完全平方数</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-element/"> #27 移除元素</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/">#26 删除有序数组中的重复项</a></p>
<p><a href="https://leetcode-cn.com/problems/move-zeroes/"> #283 移动零</a></p>
<p><a href="https://leetcode-cn.com/problems/backspace-string-compare/">#844 比较含退格的字符串</a></p>
<h5 id="day2"><a href="#day2" class="headerlink" title="day2"></a>day2</h5><p><a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">#977 有序数组的平方</a></p>
<h5 id="day3"><a href="#day3" class="headerlink" title="day3"></a>day3</h5><p><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">#209 长度最小的子数组</a></p>
<p><a href="https://leetcode-cn.com/problems/fruit-into-baskets/">#904 水果成篮</a></p>
<h5 id="day4"><a href="#day4" class="headerlink" title="day4"></a>day4</h5><p><a href="https://leetcode-cn.com/problems/minimum-window-substring/"> #76 最小覆盖子串</a></p>
<p><a href="https://leetcode-cn.com/problems/spiral-matrix-ii/"> #59 螺旋矩阵 II</a></p>
<p><a href="https://leetcode-cn.com/problems/spiral-matrix/">#54 螺旋矩阵</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-linked-list-elements/">#203 移除链表元素</a></p>
<p><a href="https://leetcode-cn.com/problems/design-linked-list/">#707 设计链表</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-linked-list/"> #206 反转链表</a></p>
<h5 id="day5"><a href="#day5" class="headerlink" title="day5"></a>day5</h5><p><a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">#24 两两交换链表中的节点</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">#19 删除链表的倒数第 N 个结点</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">#面试题 02.07 链表相交</a></p>
<p><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/"> #142 环形链表 II</a></p>
<p><a href="https://leetcode-cn.com/problems/valid-anagram/">#242 有效的字母异位词</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/">#349 两个数组的交集</a></p>
<p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/">#350 两个数组的交集 II</a></p>
<h5 id="day6"><a href="#day6" class="headerlink" title="day6"></a>day6</h5><p><a href="https://leetcode-cn.com/problems/happy-number/">#202 快乐数</a></p>
<p><a href="https://leetcode-cn.com/problems/two-sum/"> #1 两数之和</a></p>
<p><a href="https://leetcode-cn.com/problems/4sum-ii/">#454 四数相加 II</a></p>
<p><a href="https://leetcode-cn.com/problems/ransom-note/">#383 赎金信</a></p>
<p><a href="https://leetcode-cn.com/problems/3sum/"> #15 三数之和</a></p>
<p><a href="https://leetcode-cn.com/problems/4sum/">#18 四数之和</a></p>
<h5 id="day7"><a href="#day7" class="headerlink" title="day7"></a>day7</h5><p><a href="https://leetcode-cn.com/problems/reverse-string/">#344 反转字符串</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-string-ii/">#541 反转字符串 II</a></p>
<p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/"> #剑指 Offer 05 替换空格</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/"> #151 翻转字符串里的单词</a></p>
<p><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">#剑指 Offer 58 - II 左旋转字符串</a></p>
<p><a href="https://leetcode-cn.com/problems/implement-strstr/">#28 实现 strStr()</a></p>
<h5 id="day8"><a href="#day8" class="headerlink" title="day8"></a>day8</h5><p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/">#459 重复的子字符串</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-element/"> #27 移除元素</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-string/"> #344 反转字符串</a></p>
<p><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/"> #剑指 Offer 05 替换空格</a></p>
<p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/">#151 颠倒字符串中的单词</a></p>
<h5 id="day9"><a href="#day9" class="headerlink" title="day9"></a>day9</h5><p><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/"> #232 用栈实现队列</a></p>
<p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">#225 用队列实现栈</a></p>
<p><a href="https://leetcode-cn.com/problems/valid-parentheses/">#20 有效的括号</a></p>
<p><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">#1047 删除字符串中的所有相邻重复项</a></p>
<p><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/"> #150 逆波兰表达式求值</a></p>
<h5 id="day10"><a href="#day10" class="headerlink" title="day10"></a>day10</h5><p><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">#239 滑动窗口最大值</a></p>
<p><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">#347 前 K 个高频元素</a></p>
<h5 id="day11"><a href="#day11" class="headerlink" title="day11"></a>day11</h5><p><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal/">#144 二叉树的前序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/"> #145 二叉树的后序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/"> #94 二叉树的中序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">#102 二叉树的层序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/"> #107 二叉树的层序遍历 II</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-right-side-view/"> #199 二叉树的右视图</a></p>
<p><a href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/"> #637 二叉树的层平均值</a></p>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/"> #429 N 叉树的层序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/find-largest-value-in-each-tree-row/"> #515 在每个树行中找最大值</a></p>
<p><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node/"> #116 填充每个节点的下一个右侧节点指针</a></p>
<p><a href="https://leetcode-cn.com/problems/populating-next-right-pointers-in-each-node-ii/"> #117 填充每个节点的下一个右侧节点指</a></p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/"> #104 二叉树的最大深度</a></p>
<h5 id="day12"><a href="#day12" class="headerlink" title="day12"></a>day12</h5><p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">#226 翻转二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/"> #589 N 叉树的前序遍历</a></p>
<p><a href="https://leetcode-cn.com/problems/symmetric-tree/"> #101 对称二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/">#559 N 叉树的最大深度</a></p>
<p><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/"> #111 二叉树的最小深度</a></p>
<h5 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h5><p><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/">#222 完全二叉树的节点个数</a></p>
<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/"> #110 平衡二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-paths/">#257 二叉树的所有路径</a></p>
<h5 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h5><p><a href="https://leetcode-cn.com/problems/same-tree/"> #100 相同的树</a></p>
<p><a href="https://leetcode-cn.com/problems/subtree-of-another-tree/">#572 另一棵树的子树</a></p>
<p><a href="https://leetcode-cn.com/problems/sum-of-left-leaves/"> #404 左叶子之和</a></p>
<p><a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/">#513 找树左下角的值</a></p>
<p><a href="https://leetcode-cn.com/problems/path-sum/"> #112 路径总和</a></p>
<h5 id="day15"><a href="#day15" class="headerlink" title="day15"></a>day15</h5><p><a href="https://leetcode-cn.com/problems/path-sum-ii/"> #113 路径总和 II</a></p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/"> #105 从前序与中序遍历序列构造二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"> #106 从中序与后序遍历序列构造二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/maximum-binary-tree/"> #654 最大二叉树</a></p>
<h5 id="day16"><a href="#day16" class="headerlink" title="day16"></a>day16</h5><p><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/">#617 合并二叉树</a></p>
<p><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/"> #700 二叉搜索树中的搜索</a></p>
<p><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/">#98 验证二叉搜索树</a></p>
<p><a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/"> #530 二叉搜索树的最小绝对差</a></p>
<p><a href="https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/"> #501 二叉搜索树中的众数</a></p>
<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/"> #236 二叉树的最近公共祖先</a></p>
<h5 id="day17"><a href="#day17" class="headerlink" title="day17"></a>day17</h5><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">#235 二叉搜索树的最近公共祖先</a></p>
<p><a href="https://leetcode-cn.com/problems/insert-into-a-binary-search-tree/">#701 二叉搜索树中的插入操作</a></p>
<p><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">#450 删除二叉搜索树中的节点</a></p>
<h5 id="day18"><a href="#day18" class="headerlink" title="day18"></a>day18</h5><p><a href="https://leetcode-cn.com/problems/trim-a-binary-search-tree/"> #669 修剪二叉搜索树</a></p>
<p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">#108 将有序数组转换为二叉搜索树</a></p>
<p><a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/"> #538 把二叉搜索树转换为累加树</a></p>
<p><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/"> #590 N 叉树的后序遍历</a></p>
<h5 id="day19"><a href="#day19" class="headerlink" title="day19"></a>day19</h5><p><a href="https://leetcode-cn.com/problems/combinations/"> #77 组合</a></p>
<p><a href="https://leetcode-cn.com/problems/combination-sum-iii/"> #216 组合总和 III</a></p>
<p><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">#17 电话号码的字母组合</a></p>
<h5 id="day20"><a href="#day20" class="headerlink" title="day20"></a>day20</h5><p><a href="https://leetcode-cn.com/problems/combination-sum/"> #39 组合总和</a></p>
<p><a href="https://leetcode-cn.com/problems/combination-sum-ii/"> #40 组合总和 II</a></p>
<p><a href="https://leetcode-cn.com/problems/palindrome-partitioning/"> #131 分割回文串</a></p>
<h5 id="day21"><a href="#day21" class="headerlink" title="day21"></a>day21</h5><p><a href="https://leetcode-cn.com/problems/restore-ip-addresses/"> #93 复原 IP 地址</a></p>
<p><a href="https://leetcode-cn.com/problems/subsets/"> #78 子集</a></p>
<p><a href="https://leetcode-cn.com/problems/subsets-ii/"> #90 子集 II</a></p>
<p><a href="https://leetcode-cn.com/problems/increasing-subsequences/"> #491 递增子序列</a></p>
<p><a href="https://leetcode-cn.com/problems/permutations/"> #46 全排列</a></p>
<h5 id="day22"><a href="#day22" class="headerlink" title="day22"></a>day22</h5><p><a href="https://leetcode-cn.com/problems/permutations-ii/"> #47 全排列 II</a></p>
<p><a href="https://leetcode-cn.com/problems/reconstruct-itinerary/"> #332 重新安排行程</a></p>
<h5 id="day23"><a href="#day23" class="headerlink" title="day23"></a>day23</h5><p><a href="https://leetcode-cn.com/problems/n-queens/">#51 N 皇后</a></p>
<p><a href="https://leetcode-cn.com/problems/sudoku-solver/">#37 解数独</a></p>
<p><a href="https://leetcode-cn.com/problems/fibonacci-number/"> #509 斐波那契数</a></p>
<p><a href="https://leetcode-cn.com/problems/climbing-stairs/"> #70 爬楼梯</a></p>
<p><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/"> #746 使用最小花费爬楼梯</a></p>
<h5 id="day24"><a href="#day24" class="headerlink" title="day24"></a>day24</h5><p><a href="https://leetcode-cn.com/problems/unique-paths/"> #62 不同路径</a></p>
<p><a href="https://leetcode-cn.com/problems/unique-paths-ii/"> #63 不同路径 II</a></p>
<p><a href="https://leetcode-cn.com/problems/integer-break/"> #343 整数拆分</a></p>
<p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/"> #96 不同的二叉搜索树</a></p>
<p><a href="https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/">#698 划分为k个相等的子集</a></p>
]]></content>
      <categories>
        <category>leetcode</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle复习1</title>
    <url>/2021/11/11/oracle%E5%A4%8D%E4%B9%A01/</url>
    <content><![CDATA[<h4 id="1-Oracle常用工具及默认用户"><a href="#1-Oracle常用工具及默认用户" class="headerlink" title="1. Oracle常用工具及默认用户"></a>1. Oracle常用工具及默认用户</h4><h4 id="1-1-常用工具"><a href="#1-1-常用工具" class="headerlink" title="1.1 常用工具"></a>1.1 常用工具</h4><h5 id="1-1-1-常用系统管理工具"><a href="#1-1-1-常用系统管理工具" class="headerlink" title="1.1.1 常用系统管理工具"></a>1.1.1 常用系统管理工具</h5><ul>
<li>数据库配置助手（<strong>DataBase Configuration Assistant</strong>，简称DBCA）是Oracle提供的一种图形化管理工具，能够：</li>
</ul>
<ol>
<li><p>创建数据库</p>
</li>
<li><p>配置数据库选项</p>
</li>
<li><p>删除数据库</p>
</li>
<li><p>管理数据库模板</p>
</li>
</ol>
<ul>
<li><p>网络配置助手(<strong>OracleNet Configuration Assistant</strong> 简称ONCA)： </p>
<ol>
<li><p>监听程序配置</p>
</li>
<li><p>本地网络服务配置 </p>
</li>
</ol>
</li>
</ul>
<h5 id="1-1-2-常用数据库管理工具"><a href="#1-1-2-常用数据库管理工具" class="headerlink" title="1.1.2  常用数据库管理工具"></a>1.1.2  常用数据库管理工具</h5><ul>
<li><p>SQLPlus工具的使用</p>
<ol>
<li><p>方法一：通过开始 菜单“SQL Plus” 。</p>
</li>
<li><p>方法二：通过DOS命令</p>
</li>
</ol>
</li>
</ul>
<p>点击“开始”—&gt;“运行”—&gt;输入“cmd命令”—&gt;进入DOS环境下执行SQLPLUS命令也可以打开SQL*Plus工具。</p>
<p>◦（1）SQLPLUS [用户名]/[密码][@主机字符串][AS SYSDBA|SYSOPER] </p>
<p>◦（2）SQLPLUS 用户名/密码@主机名|主机IP地址: 端口号/数据库实例名 [AS SYSDBA|SYSOPER]</p>
<ul>
<li>SQL Developer</li>
</ul>
<p><strong>SQL Develope</strong>r允许用户创建并维护数据库对象，查看和维护数据，编写、维护并调试PL/SQL代码。这款工具以其简洁整齐的图形用户界面大大简化了开发工作。</p>
<p><strong>注意</strong>：如果Oracle SQL Developer的SQL工作表不能正常编辑,无法使用回车键,上下左右键:</p>
<p><strong>打开菜单并选择 工具-首选项-加速器-加载预设-Default</strong></p>
<hr>
<h4 id="1-2-默认用户"><a href="#1-2-默认用户" class="headerlink" title="1.2 默认用户"></a>1.2 <strong>默认用户</strong></h4><p>SYS：该用户被默认创建并授予DBA角色，它是Oracle数据库中权限最大的管理员账号。</p>
<p>SYSTEM：被默认创建并授予DBA角色权限仅次于SYS。该用户创建和管理数据库中可显示管理信息的表或视图，以及被Oracle数据库应用和工具使用的各种数据库对象。</p>
<p>SYSMAN：该用户是企业管理的超级管理员账号，该账号能够创建和修改其他管理员账号，同时也能管理数据库实例。</p>
<p>DBSNMP：是Oracle数据库中用于智能代理（Intelligent Agent）的用户，用来监控和管理数据库相关性能。如果停止该用户，则无法提取相关的数据库信息。</p>
<hr>
<p>例1.2 以system用户登录数据库。</p>
<p>​    ◦ SQLPLUS </p>
<p>​    ◦ SQLPLUS system </p>
<p>​    ◦ SQLPLUS system/abcdef </p>
<p>​    ◦ SQLPLUS system/abcdef@orcl</p>
<p>例1.3 以sys用户登录数据库。</p>
<p>​    ◦SQLPLUS sys/abcdef AS SYSDBA </p>
<p>​    ◦SQLPLUS sys/abcdef@orcl AS SYSOPER</p>
<p>例1.4 不使用已定义的主机字符串，直接指定要连接的主机名、端口号和数据库实例。</p>
<p>​    ◦SQLPLUS system/abcdef@localhost:1521/orcl </p>
<p>例1.5 在SQL*Plus环境下，使用CONNECT命令将当前用户分别切换到system用户或sys用户。</p>
<p>​    CONNECT system/abcdef@orcl</p>
<p>​    CONNECT sys/abcdef@orcl as sysdba</p>
<h4 id="1-3-Oracle体系结构"><a href="#1-3-Oracle体系结构" class="headerlink" title="1.3 Oracle体系结构"></a>1.3 Oracle体系结构</h4><h5 id="1-3-1-物理存储结构"><a href="#1-3-1-物理存储结构" class="headerlink" title="1.3.1 物理存储结构"></a>1.3.1 物理存储结构</h5><p>概念：Oracle数据库的物理存储结构是从物理组成的角度分析一个数据库在存储介质上的实际构成，它是由操作系统组织和管理的，是Oracle数据库的外部存储结构。</p>
<p>Oracle数据库主要包括4种类型的文件：</p>
<ul>
<li>数据文件</li>
<li>日志文件</li>
<li>控制文件</li>
<li>初始化参数</li>
</ul>
<h4 id="1-3-2-逻辑存储结构"><a href="#1-3-2-逻辑存储结构" class="headerlink" title="1.3.2 逻辑存储结构"></a>1.3.2 逻辑存储结构</h4><p>概念：在逻辑上定义了一组存储单元，以逐层细分的思想将数据库对象占用的存储空间依次划分为表空间、段、盘区和数据块。</p>
<ul>
<li>表空间是最大的逻辑存储单元，一个数据库从逻辑结构上划分就包括多个表空间；</li>
<li>一个表空间继续划分为多个段；</li>
<li>一个段又被划分为多个盘区，盘区是最小的磁盘空间分配单元；</li>
<li>一个盘区又被划分为多个数据块，数据块是Oracle最小的数据读写单元。</li>
<li>表空间（tablespace）是Oracle数据库中最大的逻辑存储结构 。</li>
<li>逻辑结构上的表空间与物理结构上的数据文件是有关联的。这种关联是：</li>
<li>数据库中的一个表空间至少包含一个或多个数据文件，而一个数据文件只能属于一个表空间。</li>
<li>一个表空间的大小就等于它包含的所有数据文件大小之和。 </li>
</ul>
<p><img src="1-1.png"></p>
<p><img src="2-2.png"></p>
]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>一点仪式感都没有的20岁</title>
    <url>/2021/12/19/%E4%B8%80%E7%82%B9%E4%BB%AA%E5%BC%8F%E6%84%9F%E9%83%BD%E6%B2%A1%E6%9C%89%E7%9A%8420%E5%B2%81/</url>
    <content><![CDATA[<p>大学以来，遇到了各种各样的困难。特别是大一那会打算法比赛的时候，真的是一点都不会，无论怎么积极学都学不懂，一度怀疑自己真的智商有点问题(可能真的有问题)。如果当时没遇到疫情，顺利的跟着学校参加训练可能现在的结局就完全不一样了。虽然嘲讽了CUIT两年多，但是还是十分庆幸自己在CUIT，没有太多约束，成绩不好也不会太为难自己。优秀的人很多，关于绩点这件事总是有人不能如愿的（还是很烦关于自己德育分没80领不了三等奖学金——可能大学四年唯一一次能拿的奖学金就这次了，cjl好强啊呜呜呜呜呜，天天打比赛还能这么高绩点）。</p>
<p>来到成都有段时间了，外出旅游的机会几乎没有，要么是疫情影响，要么就是自己太自闭了哎。绝大部分原因还是跟自己有关吧，真的太废物了。想到大佬们参加各种区域赛去旅游，可能这就是梦中的人生规划吧，可惜自己太菜。大二那会，原本想着自己走不了算法的路线，加一个实验室跟着学校混奖项，最气的是，到现在都大三上结束了，实验室还没进去。笑死，根本没有途径进去，完全没有听说过有实验室招新的通知。上次问岳老师的团队的人她们是怎么加入实验室的，笑死，原来岳老师是她们的班导，直接给机会进去学习。想想我们的班导就忍不住烦啊。上个学期末加的那个实验室的群，到现在群里面一点消息都没有，:(。暑假跟着曹老师的团队做了那个科研项目(数据)管理系统，哇，怎么会有人用这种技术栈开发项目啊。大二还远程实习了一个傻逼公司，除了自学go语言得到了一点收获之外几乎毫无作用，要不要把这个实习经历写在简历上都要考虑考虑hh，都不知道这个公司倒闭了没hh。这么神奇的公司是怎么招到这么多985和海外高校的实习生的，好离谱啊。不过接触到了这么多学霸，也见识到了自己跟她们的差距。</p>
<p>刚大一的时候的计划路线是：大一打acm一直打到大三，然后去实验室做项目。后来算法没打成。想直接去实验室做项目，走大一班导ckl的路线，结果实验室也没途经进去，问了也是满人了不收。想着现在大三上都结束了。看了好多大佬的本科路线，几乎所有人大三上结束都有好多奖项，然后大三下进大厂实习。哎，到目前为止自己有什么奖项呢？一个都没有。现在离20岁还剩下一个小时，真的是对前途一片迷茫。接下来路该怎么走呢，随波逐流去考研嘛？昨天刚考完四级，听力前五个全错，阅读得分才160，作文还写离题了，哎，这样的废物真的能去考研嘛，大概率当分母啊。想到这感觉wsy真的好强，各种奖学金三好学生拿个遍，四六级都是秒过。人无完人，哎。自己数学又很好嘛？高中这么多次考试都没几次有高分吧，不会真有人把学校那水的离谱的高数和线代还有概率论来证明自己吧。408自己学的很好嘛？操作系统才70多分，笑死，还以为自己操作系统多牛逼呢，课听了不少，公众号水了不少，面经也背了不少，不还是这样。自己到底适不适合考研呢，可能我自己都不知道吧。自己又能静得下来学习嘛，在宿舍周末都会睡到12点起床，考研生物钟自己又能适应嘛，宿舍都是混子没人考研，自己又能静得下心学习吗，哎。一边是不考研就几乎去不了大厂，一遍是去考研了大概率会白给充当分母。到底该怎么选啊！真的能有前途吗，最后的结局真的不是随便去一个公司混日子，然后一直等待35岁的到来吗。都说人会触底反弹，每天在宿舍无所事事，敲着毫无作用的代码，没有一个项目能写进简历。都是一些简单的小demo或者小课设，有什么用啊！</p>
<p>关于自己写下来的路该怎么走。先暂时这样吧：这一个星期一定学完计网可能有离散数学。接下来寒假一定不能水，先学CS61B和刷算法题，刷完之后寒假一定要注意一下大厂的春招提前批消息，无论能不能面得上（95%不可以）都一定要试一试，看看自己的水平到底如何，万一真的有机会出现呢。寒假的时候还需要考虑一下考研的问题，可以先接触一下408和英语，因为无论考不考研，408的知识和四六级还是要过的。如果可以的话，尝试的写一些项目（这里告诫一下之后的自己，不要写商城之类的水项目了）。如果可以可以把那个GRPC项目和仿QQ项目学一下。或者接着把CS系列的课程往下学。acwing基础班刷完并且开提高班，acwing的每日一题一定要跟。leetcode也要开始刷起来了。如果可以，寒假少熬夜吧。</p>
<p>发布这篇文章的时候应该是20岁了吧，20年母胎solo，也要考虑一下自己的爱情问题了。希望自己看淡自己的身高，不要过度焦虑，相信自己一定可以找到属于自己的另一半，主动起来，无论是否有结果，一定要试一试才能成功，听了盛老师的爱情讲座，发现自己最缺的就是主动的勇气和社交。小学xxx，初中xxx，xxx，高中xx，xxx。大学xxx，xxx。相信自己，一定可以！</p>
<p>来不及去超市买属于自己的生日蛋糕口味的奥利奥了，这次生日的感觉和高中那次晚上一人孤独吃生日蛋糕口味奥利奥的感觉是一样的。还是有很多人爱着我的呀，一定要乐观起来啊wr1sw，小学初中别人给你的印象就是乐观、幽默啊，一定要乐观起来wr1sw！一定要乐观起来wr1sw！一定要乐观起来wr1sw！一定要乐观起来wr1sw！</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>上天保佑</title>
    <url>/2021/12/30/%E4%B8%8A%E5%A4%A9%E4%BF%9D%E4%BD%91/</url>
    <content><![CDATA[<p><img src="1.png"></p>
<p><img src="2.png"></p>
<p><img src="3.png"></p>
<p><img src="4.png"></p>
<p><img src="5.png"></p>
<p><img src="6.png"></p>
<p><img src="7.png"></p>
<p><img src="8.png"></p>
<p><img src="9.png"></p>
<p><img src="10.png"></p>
<p><img src="11.png"></p>
<p><img src="12.png"></p>
<p><img src="13.png"></p>
<p><img src="14.png"></p>
<p><img src="15.png"></p>
<p><img src="16.png"></p>
<p><img src="17.png"></p>
<p><img src="18.png"></p>
<p><img src="19.png"></p>
<p><img src="20.png"></p>
<p><img src="21.png"></p>
<p><img src="22.png"></p>
<p><img src="23.png"></p>
<p><img src="24.png"></p>
<p><img src="25.png"></p>
<p><img src="26.png"></p>
<p><img src="27.png"></p>
<p><img src="28.png"></p>
<p><img src="29.png"></p>
<p><img src="30.png"></p>
<p><img src="31.png"></p>
<p><img src="32.png"></p>
]]></content>
  </entry>
  <entry>
    <title>多元统计分析作业1</title>
    <url>/2021/12/02/%E5%A4%9A%E5%85%83%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E4%BD%9C%E4%B8%9A1/</url>
    <content><![CDATA[<h2 id="1-判断题"><a href="#1-判断题" class="headerlink" title="1. 判断题"></a>1. 判断题</h2><h4 id="1-1"><a href="#1-1" class="headerlink" title="1-1"></a>1-1</h4><ul>
<li>相关系数为0表明两个变量之间不存在任何关系   ❌</li>
</ul>
<p>​    相关系数为0表示两个变量间不存在线性相关</p>
<h4 id="1-2"><a href="#1-2" class="headerlink" title="1-2"></a>1-2</h4><ul>
<li>密度函数可以是负的   ❌</li>
</ul>
<p>​    密度函数的一个性质就是非负性</p>
<h4 id="1-3"><a href="#1-3" class="headerlink" title="1-3"></a>1-3</h4><ul>
<li>当总体G1和G2为正态总体且协方差相等时，选用马氏距离。✅</li>
</ul>
<h4 id="1-4"><a href="#1-4" class="headerlink" title="1-4"></a>1-4</h4><ul>
<li>标准化随机变量的协方差阵与原变量的相关系数相同。✅</li>
</ul>
<h4 id="1-5"><a href="#1-5" class="headerlink" title="1-5"></a>1-5</h4><ul>
<li>样本相关系数r∈(－1,1) ❌</li>
</ul>
<p>​    -1≤r≤1</p>
<h4 id="1-6"><a href="#1-6" class="headerlink" title="1-6"></a>1-6</h4><ul>
<li>密度函数可以是负的。❌</li>
</ul>
<p>​    密度函数的一个性质就是非负性</p>
<h4 id="1-7"><a href="#1-7" class="headerlink" title="1-7"></a>1-7</h4><ul>
<li>如果相关系数为0，则表明两个变量间不存在线性相关。✅</li>
</ul>
<h4 id="1-8"><a href="#1-8" class="headerlink" title="1-8"></a>1-8</h4><ul>
<li>一个行列式中某一行（列）所有元素的公因子可以提到行列式符号的外边。✅</li>
</ul>
<h4 id="1-9"><a href="#1-9" class="headerlink" title="1-9"></a>1-9</h4><ul>
<li><p>numpy中产生全1的矩阵使用的方法是empty。❌</p>
<p>empty 方法用来创建未初始化的数组</p>
<p>zeros  方法用来创建全0数组</p>
<p>ones   方法用来创建全1数组</p>
</li>
</ul>
<h4 id="1-10"><a href="#1-10" class="headerlink" title="1-10"></a>1-10</h4><ul>
<li>相关关系是指变量间不确定性的依存关系。✅</li>
</ul>
<h4 id="1-11"><a href="#1-11" class="headerlink" title="1-11"></a>1-11</h4><ul>
<li>pandas中head(n)的意思是获取最后的n行数据。❌</li>
</ul>
<p>获取的是前面的n行数据</p>
<h4 id="1-12"><a href="#1-12" class="headerlink" title="1-12"></a>1-12</h4><ul>
<li>Numpy的ndarray(数组)中，使用shape()来表示数组的维度尺寸。✅</li>
</ul>
<h4 id="1-13"><a href="#1-13" class="headerlink" title="1-13"></a>1-13</h4><ul>
<li>Python语言是非开源的语言。❌</li>
</ul>
<p>Python是开源的</p>
<h4 id="1-14"><a href="#1-14" class="headerlink" title="* 1-14"></a>* 1-14</h4><ul>
<li>脸谱图是用脸部特征表达变量间的相关性。❌</li>
</ul>
<h4 id="1-15"><a href="#1-15" class="headerlink" title="1-15"></a>1-15</h4><ul>
<li>通过对多变量的脸谱图分析，可以直观地对原始数据资料进行归类或比较研究 ✅</li>
</ul>
<h4 id="1-16"><a href="#1-16" class="headerlink" title="1-16"></a>1-16</h4><ul>
<li>设要分析的资料共有p个变量，当p值较大时一张雷达图也可以清晰表达各观测之间的接近程度。❌</li>
</ul>
<p>​    当观测数比较多时，画到一张雷达图里面就不太容易看出各观测之间的接近程度</p>
<h4 id="1-17"><a href="#1-17" class="headerlink" title="1-17"></a>1-17</h4><ul>
<li>雷达图是目前应用较为广泛的多元资料进行作图的方法，利用雷达图可以很方便地研究个样本点之间的关系并对样品进行归类。 ✅</li>
</ul>
<h4 id="1-18"><a href="#1-18" class="headerlink" title="1-18"></a>1-18</h4><ul>
<li>星图和星座图很相似，甚至有的文献把两者看成是一回事。❌</li>
</ul>
<p>离谱</p>
<h4 id="1-19"><a href="#1-19" class="headerlink" title="1-19"></a>1-19</h4><ul>
<li>利用星座图可以方便地对样本点进行分类，再星座图上比较靠近的样本点比较相似，可分为一类。✅</li>
</ul>
<h4 id="1-20"><a href="#1-20" class="headerlink" title="1-20"></a>1-20</h4><ul>
<li>多变量的图表示法使资料的呈现方式更直观、更形象，可以作为定量分析的研究结果并形成结论。❌</li>
</ul>
<p>个人觉得定量分析是错误的</p>
<h4 id="1-21"><a href="#1-21" class="headerlink" title="1-21"></a>1-21</h4><ul>
<li>只要变量的指标数目不变，对应脸谱图的特征就不变。❌</li>
</ul>
<p>只要….就</p>
<h4 id="1-22"><a href="#1-22" class="headerlink" title="1-22"></a>1-22</h4><ul>
<li>马氏距离在协差阵为单位阵时退化为欧氏距离。✅</li>
</ul>
<h4 id="1-23"><a href="#1-23" class="headerlink" title="1-23"></a>1-23</h4><ul>
<li>马氏距离受单位的影响。❌</li>
</ul>
<p>​    马氏距离的优点：它不受量纲的影响，两点之间的马氏距离与原始数据的测量单位无关</p>
<p>​    马氏距离的缺点：它的缺点是夸大了变化微小的变量的作用</p>
<h4 id="1-24"><a href="#1-24" class="headerlink" title="1-24"></a>1-24</h4><ul>
<li>相关系数度量了两个随机变量之间依赖关系的强弱 ✅</li>
</ul>
<h4 id="1-25"><a href="#1-25" class="headerlink" title="1-25"></a>1-25</h4><ul>
<li>Cov(X,Y)=0, 称X与Y是不相关的  ✅</li>
</ul>
<h4 id="1-26"><a href="#1-26" class="headerlink" title="1-26"></a>1-26</h4><ul>
<li>随机向量X的协方差阵是对称矩阵 ✅</li>
</ul>
<h4 id="1-27"><a href="#1-27" class="headerlink" title="* 1-27"></a>* 1-27</h4><ul>
<li>若p维随机向量X的协方差阵存在,且每个分量的方差大于零，则X的相关阵的元素计算公式为:r_ij=(cov(X_i,X_j))/(D(X_i)D(X_j)),i,j=1,2,…,p。❌</li>
</ul>
<h4 id="1-28"><a href="#1-28" class="headerlink" title="1-28"></a>1-28</h4><ul>
<li>设两个随机向量X和Y是相互独立的，F(x,y)为(X,Y)的联合分布函数，G(x)和H(y)分别为X和Y的分布函数，则F(x,y)=G(x)H(y)✅</li>
</ul>
<h4 id="1-29"><a href="#1-29" class="headerlink" title="1-29"></a>1-29</h4><p>设两个随机向量X和Y是相互独立的，f(x,y)为(X,Y)的密度函数，g(x)和h(y)分别为X和Y的密度函数，则f(x,y)=g(x)+h(y)。❌</p>
<p>肯定是乘呀</p>
<h4 id="1-30"><a href="#1-30" class="headerlink" title="1-30"></a>1-30</h4><p>正态分布的条件分布仍为条件分布 ✅</p>
<h4 id="1-31"><a href="#1-31" class="headerlink" title="1-31"></a>1-31</h4><p>相关关系数不会取负值 ❌</p>
<h4 id="1-32"><a href="#1-32" class="headerlink" title="1-32"></a>1-32</h4><p>相关系数的绝对值不会大于1✅</p>
<h4 id="1-33"><a href="#1-33" class="headerlink" title="1-33"></a>1-33</h4><p>若A是退化矩阵，则A-1一定存在❌</p>
<p><img src="1.png"></p>
<h4 id="1-34"><a href="#1-34" class="headerlink" title="1-34"></a>1-34</h4><p>若A为p阶对称矩阵，则存在正交矩阵T和对角矩阵Λ=diag(λ_1,λ_2,⋯λ_p)，使得A=TΛT’。✅</p>
<h4 id="1-35"><a href="#1-35" class="headerlink" title="1-35"></a>1-35</h4><p>若向量x和y的内积为0，则说明向量x和y垂直 ✅</p>
<h4 id="1-36"><a href="#1-36" class="headerlink" title="1-36"></a>1-36</h4><p>若A是一个正交矩阵，则A的行列式为1❌</p>
<p>设A’为A的转置矩阵，因为A为正交矩阵，则有A’A=I，<br>得 |A’A|=|I|=1，即|A’||A|=|A|^2=1<br>所以 |A|=+-1</p>
<h4 id="1-37"><a href="#1-37" class="headerlink" title="1-37"></a>1-37</h4><p>若A和B均为p阶方阵，则|AB|=|A||B|✅</p>
<hr>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><h4 id="2-1"><a href="#2-1" class="headerlink" title="2-1"></a>2-1</h4><p>关于 Python 语言的特点，以下选项中描述错误的是    <strong>A</strong></p>
<p>A. Python 语言是非开源语言        B.Python 语言是跨平台语言</p>
<p>C. Python 语言是多模型语言        D.Python 语言是脚本语言</p>
<h4 id="2-2"><a href="#2-2" class="headerlink" title="2-2"></a>2-2</h4><p>使用pandas时需要导入下面哪个？</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>孤独</title>
    <url>/2021/10/21/%E5%AD%A4%E7%8B%AC/</url>
    <content><![CDATA[<h3 id="什么是孤独？"><a href="#什么是孤独？" class="headerlink" title="什么是孤独？"></a>什么是孤独？</h3><p>什么是孤独呢？可能就是离2021/10/22日还剩下3分钟了，而你还没回复我的消息；<br>-礼物已经买好，礼物已经送到，但是缺了一个主人。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库路由组件开发测试bug</title>
    <url>/2022/06/29/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%8B%E8%AF%95bug/</url>
    <content><![CDATA[<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h3><p>我在学习SpringBoot中间件开发中的数据库路由组件开发的时候，讲编写好的数据库路由组件进行测试，但是测试一直报错，报错提示大概是如下代码空指针</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">determineCurrentLookupKey</span><span class="hljs-params">()</span> </span>&#123;<br>       System.out.println(<span class="hljs-string">&quot;DBContextHolder.getDBKey() = &quot;</span> + DBContextHolder.getDBKey()); <span class="hljs-comment">// null</span><br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;db&quot;</span> + DBContextHolder.getDBKey();<br>   &#125;<br></code></pre></td></tr></table></figure>

<p>我一开始定位bug是在我组件开发的逻辑出错，但是排查了好久之后发现，程序没有进入切面，也就是如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(&quot;aopPoint() &amp;&amp; @annotation(dbRouter)&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">doRouter</span><span class="hljs-params">(ProceedingJoinPoint jp, DBRouter dbRouter)</span> <span class="hljs-keyword">throws</span> Throwable </span>&#123;<br>       String dbKey = dbRouter.key();<br>       <span class="hljs-keyword">if</span> (StringUtils.isBlank(dbKey)) &#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;annotation DBRouter key is null！&quot;</span>);<br>       &#125;<br>       <span class="hljs-comment">// 计算路由</span><br>       String dbKeyAttr = getAttrValue(dbKey, jp.getArgs());<br>       <span class="hljs-keyword">int</span> size = dbRouterConfig.getDbCount() * dbRouterConfig.getTbCount();<br>       <span class="hljs-comment">// 扰动函数</span><br>       <span class="hljs-keyword">int</span> idx = (size - <span class="hljs-number">1</span>) &amp; (dbKeyAttr.hashCode() ^ (dbKeyAttr.hashCode() &gt;&gt;&gt; <span class="hljs-number">16</span>));<br>       <span class="hljs-comment">// 库表索引</span><br>       <span class="hljs-keyword">int</span> dbIdx = idx / dbRouterConfig.getTbCount() + <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">int</span> tbIdx = idx - dbRouterConfig.getTbCount() * (dbIdx - <span class="hljs-number">1</span>);<br>       <span class="hljs-comment">// 设置到 ThreadLocal</span><br>       DBContextHolder.setDBKey(String.format(<span class="hljs-string">&quot;%02d&quot;</span>, dbIdx));<br>       DBContextHolder.setTBKey(String.format(<span class="hljs-string">&quot;%02d&quot;</span>, tbIdx));<br>       logger.info(<span class="hljs-string">&quot;数据库路由 method：&#123;&#125; dbIdx：&#123;&#125; tbIdx：&#123;&#125;&quot;</span>, getMethod(jp).getName(), dbIdx, tbIdx);<br>       <span class="hljs-comment">// 返回结果</span><br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-keyword">return</span> jp.proceed();<br>       &#125; <span class="hljs-keyword">finally</span> &#123;<br>           DBContextHolder.clearDBKey();<br>           DBContextHolder.clearTBKey();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>

<p>但是怎么想也不对呀，我dao层明明加上了对应的注解，应该会被拦截下来才对呀。如果说没进入到这段代码，也就无法 setTBKey和setDBKey，所以就会报空指针的异常。</p>
<h3 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2. 问题解决"></a>2. 问题解决</h3><ol>
<li>一开始打算打断点慢慢调试定位bug，但是这是程序还没启动完毕就报的错，断点根本无法定位（也许可以但是我不会）。也想过print来调试，但是他压根就进不去那段切面代码，进去之前的所有代码块执行正常，百思不得其解。</li>
<li>冥冥之中只有天意，我在下方报错中看到了启动类也有报错，而且是bean找不到。可是我也配置了对应的包扫描。我突然想到！自己编写的数据库组件是没有bean自动扫描的，也就是说我得在调用方进行bean扫描，否则无法找到数据库路由组件的注解。</li>
<li>我平时都是复用一个测试工程，没有想到会有包名出错的bug，也就是我启动类中扫描的包是测试工程的包，而不是数据库组件的包，两者包名不一致。这就是报错的原因所在，将数据库路由组件的包名也添加进启动类扫描，结果一切正常</li>
</ol>
]]></content>
      <categories>
        <category>middleware</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>结束啦</title>
    <url>/2021/10/22/%E7%BB%93%E6%9D%9F%E5%95%A6/</url>
    <content><![CDATA[<h3 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h3><p>纠结了很久，还是决定在你生日那天挣扎一下；估计你也能从一些空间的小细节能看出来吧；仔细想来，长那么大，第一次收到真正意义上的好人卡，感觉还是有点奇怪；<br>脸，会很热会热；心，真的会跳的蛮快的；脑子，确实是有那么一点点蒙蒙的感觉。可能，对这个结果早就预想到了，并没有多难受吧；刚才打开的是王道考研的视频，一直都没下定决心要不要考研。可能，这也是冥冥之中自有天意吧。</p>
<p>有人在骗自己，听了一晚上房东的猫；有人在骗自己，她不玩qq了看不到信息；有人在骗自己，他并没有多难受；那只熊猫就让他在北京留着吧。</p>
]]></content>
  </entry>
  <entry>
    <title>英语作文模板</title>
    <url>/2021/12/17/%E8%8B%B1%E8%AF%AD%E4%BD%9C%E6%96%87%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h4 id="三八大盖"><a href="#三八大盖" class="headerlink" title="三八大盖"></a>三八大盖</h4><h5 id="现象-问题描述功能段"><a href="#现象-问题描述功能段" class="headerlink" title="现象/问题描述功能段"></a>现象/问题描述功能段</h5><ol>
<li><p>In recent years, … is becoming increasingly popular/prevalent at an amazing rate.</p>
<p>中文：近年来，…越来越流行。（现象描述功能句）</p>
<p><strong>套用练习：</strong></p>
<p>In recent years, Internet is becoming increasingly prevalent at an amazing rate.</p>
</li>
<li><p>Along with the development of society, more and more problems are brought to our attention, one of the most serious problems is that …</p>
<p>中文：随着社会的发展，越来越多的问题已经得到关注，其中最严重的是…（问题描述功能句）</p>
<p><strong>套用练习：</strong></p>
<p>Along with the development of society, more and more problems are brought to our attention, one of the most serious problem is the shortage of global water.</p>
</li>
<li><p>…， which has attracted extensive attention of the society, which can be found in TV programs, newspapers, university classes and many aspect of our everyday life.</p>
<p>中文：当今，…得到了大家的广泛关注，并可以在…被发现.（现象描述功能句）</p>
<p><strong>套用练习：</strong></p>
<p>​    Over package has attracted extensive attention of the society, which can be found in TV programs, newspapers, university classes and many aspect of our everyday life.</p>
</li>
</ol>
<p>​    </p>
<p>​    </p>
<h5 id="原因分析功能段"><a href="#原因分析功能段" class="headerlink" title="原因分析功能段"></a>原因分析功能段</h5><h6 id="总原因的阐述"><a href="#总原因的阐述" class="headerlink" title="总原因的阐述"></a>总原因的阐述</h6><ol>
<li><p>A number of factors are accountable for this situation.</p>
</li>
<li><p>A number of factors might contribute to/account for the phenomenon/problem.</p>
</li>
<li><p>Answer to this problem involves many factors.</p>
</li>
</ol>
<p>  中文：许多原因导致这个问题、现象。</p>
<h6 id="分原因的阐述-原因数量决定"><a href="#分原因的阐述-原因数量决定" class="headerlink" title="分原因的阐述(原因数量决定)"></a>分原因的阐述(原因数量决定)</h6><ol start="4">
<li><p>One of the most common factor is that…</p>
</li>
<li><p>Another contributing cause is …</p>
</li>
<li><p>Perhaps the primary reason is that…</p>
</li>
<li><p>But the fundamental element is that …</p>
<p>中文：第一个原因是..; 第二个原因是…; 第三个原因是…；最后一个原因是…</p>
</li>
</ol>
<h5 id="问题解决功能段"><a href="#问题解决功能段" class="headerlink" title="问题解决功能段"></a>问题解决功能段</h5><h6 id="措施主题句"><a href="#措施主题句" class="headerlink" title="措施主题句"></a>措施主题句</h6><ol>
<li><p>___has been playing an increasingly important role in our day-to-day life, which has brought us a lot of benefits but has created some serious problems as well </p>
<p>…在日常生活中发挥着越来越重要的作用，它给我们带来了很多好处，同时也给我们带来了一些问题</p>
</li>
</ol>
<h6 id="分措施"><a href="#分措施" class="headerlink" title="分措施"></a>分措施</h6><ol>
<li><p>First and foremost, government should establish some regulations to …</p>
</li>
<li><p>What’s more, people should get ready to…</p>
</li>
<li><p>After all, it is necessary to advocate the whole society to…</p>
<p>首先，政府需要建立规则…，老百姓需要做…， 整个社会需要做…</p>
</li>
</ol>
<h6 id="解决问题总结句-字够就不用"><a href="#解决问题总结句-字够就不用" class="headerlink" title="解决问题总结句(字够就不用)"></a>解决问题总结句(字够就不用)</h6><ol>
<li><p>All in all, we must keep highly alert of the problems evoked by it, because once the harmful influence accumulates to a certain degree, it will surely threaten the development of the whole society.</p>
<p>中文：总之，我们一定要警惕它给我们带来更多的问题，因为这个负面影响积聚到一定的程度，它一定会威胁我们社会的发展</p>
</li>
</ol>
<hr>
<h5 id="观点阐述功能段（总分总）"><a href="#观点阐述功能段（总分总）" class="headerlink" title="观点阐述功能段（总分总）"></a>观点阐述功能段（总分总）</h5><h6 id="观点主旨句-选择之一"><a href="#观点主旨句-选择之一" class="headerlink" title="观点主旨句(选择之一)"></a>观点主旨句(选择之一)</h6><ol>
<li><p>People have (take, adopt, assume) different attitudes towards sth.</p>
</li>
<li><p>People have different opinions on this problem.</p>
</li>
<li><p>People take different views of (on) the question.</p>
<p>中文：不同的人有不同的观点。</p>
<p><strong>套用练习：</strong></p>
<p>People have (take, adopt, assume) different attitudes towards the cancelation of Spring Festival Gala. </p>
</li>
</ol>
<h6 id="观点一"><a href="#观点一" class="headerlink" title="观点一"></a>观点一</h6><p>According to a survey, some people are in favor of the idea of doing X. They point out the factor that 支持X的第一个原因 they also argue that 支持X另一个原因。（如果写完第一理由字数不够才写第二个理由）</p>
<p>中文：根据调查，一些人支持…,他们认为…,他们还认为…</p>
<h6 id="两个观点之间的衔接句-2选一"><a href="#两个观点之间的衔接句-2选一" class="headerlink" title="两个观点之间的衔接句(2选一)"></a>两个观点之间的衔接句(2选一)</h6><ol>
<li><p>There is a grain of truth in these statements, but they ignore a more important fact.</p>
<p>中文：上述阐述有很多正确性，但是他们忽略了一个重要的事实。</p>
</li>
<li><p>A close examination would reveal how ridiculous the statement is.</p>
<p>中文：最近的调查会显示出这个观点有多么的荒谬。</p>
</li>
</ol>
<h6 id="观点2"><a href="#观点2" class="headerlink" title="观点2"></a>观点2</h6><ol>
<li><p><strong>Other people who stand on a different ground consider that …, they firmly point out + 反对X的第一理由。</strong>(到这字数够了就不用后面的例子) An example can give the details of this argument:例子</p>
<p>中文：然而，其他的人有相反的观点，他们认为…</p>
</li>
</ol>
<h5 id="观点结论功能段-选一"><a href="#观点结论功能段-选一" class="headerlink" title="观点结论功能段(选一)"></a>观点结论功能段(选一)</h5><p><strong>1.</strong> From what has been discussed above, we may safely draw the conclusion that…</p>
<p>中文：综上所述，我们可以得出下面的结论。</p>
<p><strong>2.</strong> It is difficult to say whether… is good or not in general as it depends very much on the situation of…. However, from a personal point of view.</p>
<p>中文：我们很难说…是好还是坏，因为它取决于…。然而，在我看来。</p>
<p><strong>套用练习：</strong></p>
<p>From what has been discussed above, we may safely draw the conclusion that college students should have the awareness of cultivating stand-alone capability.</p>
<h5 id="引语解释功能段"><a href="#引语解释功能段" class="headerlink" title="引语解释功能段"></a>引语解释功能段</h5><p><strong>1.</strong> There is an old saying____. It’s the experience of our forefathers, however, it is correct in many cases even today.  </p>
<p>中文：古话说：“…”，但是现今仍然是准确的。</p>
<p><strong>套用练习：</strong></p>
<p>There is an old saying “It’s unwise to judge a person by the appearance.”. It’s the experience of our forefathers, however, it is correct in many cases even today. </p>
<h5 id="未来展望功能段-选1"><a href="#未来展望功能段-选1" class="headerlink" title="未来展望功能段(选1)"></a>未来展望功能段(选1)</h5><p><strong>1.</strong> ….is crucial for every individual. With its seemingly magic power, it can not only…, but serve as an efficient instrument for individuals to …</p>
<p>中文：…对每个人来说都是重要的，有了它的神奇力量，它不仅…还可以…</p>
<p><strong>2.</strong> It can directly promote the rapid progress of the organization and indirectly spurs continuous development of the individuals. And eventually brings economic prosperity and social harmony.</p>
<p>中文：它可以直接促进… 还可以带来…</p>
<h5 id="漫画-图表描述功能段"><a href="#漫画-图表描述功能段" class="headerlink" title="漫画/图表描述功能段"></a>漫画/图表描述功能段</h5><p><strong>1.</strong> According to the figure/ number/statistics/percentages in the /chart/bar graph/line/graph, it can be seen that…</p>
<p><strong>2.</strong> As is vividly shown/described/depicted in the cartoon/picture, …</p>
<p>中文：如图所示…</p>
<h3 id="四级作文的三段论"><a href="#四级作文的三段论" class="headerlink" title="四级作文的三段论"></a>四级作文的三段论</h3><p>当我们拿到一篇作文的时候，作文单纯的是一个现象但是<strong>没有解决</strong>的事:现象解释题</p>
<h4 id="1-现象解释题"><a href="#1-现象解释题" class="headerlink" title="(1) 现象解释题"></a>(1) 现象解释题</h4><p>第一段：描述现象，引出话题</p>
<p>第二段：阐述<strong>正反观点</strong></p>
<p>第三段：观点<strong>结论</strong></p>
<p>对应三八大盖中 1 4 5</p>
<h4 id="2-问题解决型"><a href="#2-问题解决型" class="headerlink" title="(2) 问题解决型"></a>(2) 问题解决型</h4><p>第一段：问题描述</p>
<p>第二段：解决问题的原因</p>
<p>第三段：解决问题的<strong>措施</strong></p>
<p>对应三八大盖中 1 2 3</p>
<h4 id="3-对比观点型"><a href="#3-对比观点型" class="headerlink" title="(3) 对比观点型"></a>(3) 对比观点型</h4><p>① 正方观点+理由</p>
<p>② 反方观点+理由</p>
<p>③ 我的观点</p>
<h4 id="4-应用文-书信-告示"><a href="#4-应用文-书信-告示" class="headerlink" title="(4) 应用文(书信+告示)"></a>(4) 应用文(书信+告示)</h4><p>① 写作目的</p>
<p>② 写信内容</p>
<h4 id="5-引语类"><a href="#5-引语类" class="headerlink" title="(5) 引语类"></a>(5) 引语类</h4><p>第一段：引语的解释+表明主题</p>
<p>第二段：分析引语现象的原因/阐述漫画现象不同观点</p>
<p>第三段：展望未来/解决方法</p>
<h4 id="6-漫画-图表类"><a href="#6-漫画-图表类" class="headerlink" title="(6) 漫画/图表类"></a>(6) 漫画/图表类</h4><p>第一段：描述漫画内容 + 过渡引申含义</p>
<p>第二段：分析漫画现象的原因/阐述漫画现象的不同观点</p>
<p>第三段：展望未来/解决方法</p>
<h3 id="单词替换"><a href="#单词替换" class="headerlink" title="单词替换"></a>单词替换</h3><h4 id="1-firstly"><a href="#1-firstly" class="headerlink" title="1. firstly"></a>1. firstly</h4><ol>
<li>previously, beforehand, initially, originally, principally, essentially, <strong>basically</strong>, generally, commonly</li>
<li>on the whole, to begin with, to start with, first of all, at the outset</li>
</ol>
<h4 id="2-second"><a href="#2-second" class="headerlink" title="2. second"></a>2. second</h4><p>subsequently      what’s more       afterward    </p>
<p>furthermore        thereafter           after   that</p>
<h4 id="3-lastly"><a href="#3-lastly" class="headerlink" title="3. lastly"></a>3. lastly</h4><p><strong>ultimately</strong>           as a final point    eventually</p>
<p>last of all             in conclusion       last but not least</p>
<h4 id="4-so"><a href="#4-so" class="headerlink" title="4. so"></a>4. so</h4><p>consequently        accordingly       <strong>as a result</strong></p>
<p><strong>hence</strong>        that’s why …</p>
<h4 id="5-important"><a href="#5-important" class="headerlink" title="5. important"></a>5. important</h4><p>essential        indispensable        significant        requisite</p>
<p>vital                critical        profound        primary</p>
<h4 id="6-because"><a href="#6-because" class="headerlink" title="6. because"></a>6. because</h4><p>on account  of</p>
<p>as a result of</p>
<p>by virtue of</p>
<p>in light of</p>
<h4 id="7-because-of"><a href="#7-because-of" class="headerlink" title="7. because of"></a>7. because of</h4><p><strong>in that</strong> </p>
<p>for the reason that,</p>
<p>considering that</p>
<h4 id="8-many"><a href="#8-many" class="headerlink" title="8. many"></a>8. many</h4><p><strong>an army of</strong></p>
<p>an ocean of</p>
<p>a sea of,</p>
<p>a host of</p>
<p><strong>a large amount of</strong></p>
<h4 id="9-pay-attention-to"><a href="#9-pay-attention-to" class="headerlink" title="9. pay attention to"></a>9. pay attention to</h4><p>focus on</p>
<p>concentrate on</p>
<p>attach importance to</p>
<p>give priority to</p>
<h4 id="10-归因于"><a href="#10-归因于" class="headerlink" title="10. 归因于"></a>10. 归因于</h4><p>ascribe to</p>
<p>arise from</p>
<p>attribute to</p>
<p>derive from</p>
<p>result from</p>
<h4 id="11-导致"><a href="#11-导致" class="headerlink" title="11. 导致"></a>11. 导致</h4><p>contribute to</p>
<p>lead to</p>
<p>result in</p>
<h4 id="12-think"><a href="#12-think" class="headerlink" title="12.think"></a>12.think</h4><p><strong>assume</strong></p>
<p>deem</p>
<h4 id="13-I-think"><a href="#13-I-think" class="headerlink" title="13. I think"></a>13. I think</h4><p>to my knowledge</p>
<p>from my angle</p>
<p>from my personal perspective</p>
<h4 id="14-difficult"><a href="#14-difficult" class="headerlink" title="14. difficult"></a>14. difficult</h4><p>tricky, complicated, complex</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习1</title>
    <url>/2021/12/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A01/</url>
    <content><![CDATA[<h2 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h2><h3 id="1-1-1-计算机网络的定义"><a href="#1-1-1-计算机网络的定义" class="headerlink" title="1.1.1 计算机网络的定义"></a>1.1.1 计算机网络的定义</h3><p>定义 ： 计算机网络是用通信线路将分散在不同地点并具有独立功能的多个计算机系统互相连接,按照网络协议进行<strong>数据通信</strong>,实现<strong>共享资源</strong>(资源共享)的计算机之集合。</p>
<h3 id="1-5-2-几种不同类别的网络"><a href="#1-5-2-几种不同类别的网络" class="headerlink" title="1.5.2 几种不同类别的网络"></a>1.5.2 几种不同类别的网络</h3><h4 id="1-按照作用范围分类"><a href="#1-按照作用范围分类" class="headerlink" title="1. 按照作用范围分类"></a>1. 按照作用范围分类</h4><ul>
<li><strong>广域网</strong> WAN (Wide Area Network) 作用范围通常为几十到几千公里</li>
<li><strong>城域网</strong> MAN (Metropolitan Area Network) 作用距离约为5~50公里</li>
<li><strong>局域网</strong> LAN (Local Area Network) 局限在较小的范围（如一公里左右）</li>
<li><strong>个人局域网</strong> PAN (Personal Area Network) 范围很小，大约在10米左右</li>
</ul>
<p>tips：若中央处理机之间的距离非常近（如仅一米的数量级甚至更小），则一般就称之为<strong>多处理机系统</strong>，而不称它为计算机网络</p>
<h4 id="2-按照网络的使用者分类"><a href="#2-按照网络的使用者分类" class="headerlink" title="2. 按照网络的使用者分类"></a>2. 按照网络的使用者分类</h4><ul>
<li><strong>公用网</strong> (Public Network) 也称公众网</li>
<li><strong>专用网</strong> (Private Network) 为特殊业务工作的需要而建设的网络，如军队、金融系统、铁路系统的内部网络</li>
</ul>
<h4 id="3-把用户接入到互联网的网络"><a href="#3-把用户接入到互联网的网络" class="headerlink" title="3. 把用户接入到互联网的网络"></a>3. 把用户接入到互联网的网络</h4><ul>
<li><p><strong>接入网AN</strong> (Access Network) 它又称本地接入网或居民接入网</p>
</li>
<li><p>接入网是<strong>一</strong>类比较特殊的计算机网络，用于将用户接入互联网</p>
</li>
<li><p>接入网本身既<strong>不属于</strong>互联网的<strong>核心部分</strong>，也<strong>不属于</strong>互联网的<strong>边缘部分</strong></p>
</li>
<li><p>接入网是从某个用户端系统到互联网中的第一个路由器（也称为边缘路由器）之间的一种网络</p>
</li>
<li><p>从覆盖的范围看，很多接入网还是<strong>属于局域网</strong></p>
</li>
<li><p>从作用上看，接入网只是起到让用户能够与互联网连接的“桥梁”作用</p>
</li>
</ul>
<h4 id="4-按拓扑结构划分"><a href="#4-按拓扑结构划分" class="headerlink" title="4. 按拓扑结构划分"></a>4. 按拓扑结构划分</h4><p><img src="1.png"></p>
<h4 id="5-按传播技术划分"><a href="#5-按传播技术划分" class="headerlink" title="5. 按传播技术划分"></a>5. 按传播技术划分</h4><ul>
<li>广播式网络：总线型、环形网等</li>
</ul>
<p>使用场合：小的、地理上处于本地的网络多采用广播方式</p>
<ul>
<li>点到点网络</li>
</ul>
<h4 id="6-按传输速率划分"><a href="#6-按传输速率划分" class="headerlink" title="6. 按传输速率划分"></a>6. 按传输速率划分</h4><ul>
<li>低速网络 （几十至10 Kbps）</li>
<li>中速网络 （几万至几十Mbps）</li>
<li>高速网络 （100M至几个Gbps）</li>
</ul>
<h4 id="7-按传输媒体划分"><a href="#7-按传输媒体划分" class="headerlink" title="7. 按传输媒体划分"></a>7. 按传输媒体划分</h4><ul>
<li>有线计算机网</li>
</ul>
<p>传输介质可以是双绞线、同轴电缆和光纤等</p>
<ul>
<li>无线计算机网</li>
</ul>
<p>传输介质有：无线电波、微波、红外线、激光等</p>
<h4 id="8-按交换方式划分"><a href="#8-按交换方式划分" class="headerlink" title="8. 按交换方式划分"></a>8. 按交换方式划分</h4><ul>
<li>电路交换</li>
</ul>
<p>如电话系统</p>
<ul>
<li>报文交换</li>
</ul>
<p>如电报</p>
<ul>
<li>分组交换</li>
</ul>
<p>如因特网、ATM网络</p>
<h3 id="1-6-1-计算机网络的性能指标"><a href="#1-6-1-计算机网络的性能指标" class="headerlink" title="1.6.1 计算机网络的性能指标"></a>1.6.1 计算机网络的性能指标</h3><p>计算机网络的性能一般是指它的几个重要的性能指标，主要包括：</p>
<ul>
<li>速率</li>
<li>带宽</li>
<li>吞吐率</li>
<li>时延</li>
<li>时延带宽积</li>
<li>往返时间RTT</li>
<li>利用率</li>
</ul>
<h4 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h4><ul>
<li><strong>速率</strong>是计算机网络中最重要的一个性能指标，指的是数据的传送速率，它也称为<strong>数据率</strong> (data rate) 或<strong>比特率</strong> (bit rate)。</li>
<li>单位是bit/s、kbit/s、Mbit/s、Gbit/s 等。例如4 x 10^10bit/s = 4Gbit/s</li>
</ul>
<h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><ul>
<li><strong>带宽</strong>(bandwidth)本来是指信号具有的<strong>频带宽度</strong>，其单位是赫（或千赫、兆赫、吉赫等）</li>
<li>在计算机网络中，<strong>带宽用来表示网络中某通道传送数据的能力<em>。</em></strong>表示在单位时间内网络中的某信道所能通过的<strong>最高数据率</strong>。单位是 bit/s，即比特每秒</li>
</ul>
<p><img src="2.png"></p>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h4><ul>
<li><p><strong>吞吐量</strong> (throughput) 表示在<strong>单位时间内通过某个网络（或信道、接口）的数据量</strong></p>
</li>
<li><p>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道<strong>实际上到底有多少数据量能够通过网络</strong></p>
</li>
<li><p><strong>吞吐量</strong>受<strong>网络的带宽</strong>或<strong>网络的额定速率</strong>的<strong>限制</strong></p>
</li>
</ul>
<h4 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h4><ul>
<li><strong>时延</strong> (delay 或 latency) 是指<strong>数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</strong></li>
<li>有时也成为<strong>延迟</strong>或<strong>迟延</strong></li>
</ul>
<p>网络中的时延由以下几个不同的部分组成：</p>
<ul>
<li>发送时延</li>
<li>传播时延</li>
<li>处理时延</li>
<li>排队时延</li>
</ul>
<h5 id="发送时延"><a href="#发送时延" class="headerlink" title="发送时延"></a>发送时延</h5><ul>
<li>也称<strong>传输时延</strong>（区别于传播时延）</li>
<li>发送数据时，数据帧<strong>从结点进入到传输媒体</strong>所需要的时间</li>
<li>也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间</li>
</ul>
<p><img src="3.png"></p>
<h5 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h5><ul>
<li>电磁波在信道中需要传播一定的距离而花费的时间</li>
<li><strong>发送时延与传播时延有本质上的不同</strong></li>
<li>信号<strong>发送速率</strong>和信号在信道上的<strong>传播速率</strong>是<strong>完全不同</strong>的概念</li>
</ul>
<p><img src="4.png"></p>
<p><img src="5.png"></p>
<h5 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h5><ul>
<li>主机或路由器在<strong>收到分组</strong>时，为<strong>处理分组</strong>（例如分析首部、提取数据、差错检验或查找路由）所花费的时间</li>
</ul>
<h5 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h5><ul>
<li>分组在路由器输入输出队列中<strong>排队等待处理</strong>所经历的时延</li>
<li><strong>排队时延的长短往往取决于网络中当时的通信量</strong></li>
</ul>
<p><img src="6.png"></p>
<p><img src="7.png"></p>
<p>计算题：</p>
<p><img src="8.png"></p>
<p>注意点：</p>
<ul>
<li>对于高速网络链路，我们提高的仅仅是数据的<strong>发送速率</strong>而不是比特在链路上的<strong>传播速率</strong></li>
<li>提高链路带宽减小了数据的发送时延</li>
</ul>
<p>判断： “<strong>在高速链路(或高带宽链路)上，比特会传送得更快些</strong>。” 这个说法是错误的</p>
<h3 id="1-6-2-体系结构"><a href="#1-6-2-体系结构" class="headerlink" title="1.6.2 体系结构"></a>1.6.2 体系结构</h3><p><img src="9.png"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><hr>
<h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><p>1-3 试从多个方面比较电路交换、报文交换、和分组交换的主要优缺点:</p>
<ul>
<li><strong>电路交换：</strong>端对端通信质量因约定了通信资源获得可靠保障，对连续传送大量数据效率高。</li>
<li><strong>报文交换：</strong>无须预约传输带宽，动态逐段利用传输带宽对突发式数据通信效率高，通信迅速。</li>
<li><strong>分组交换：</strong>具有报文交换之高效、迅速的要点，且各分组小，路由灵活，网络生存性能好。</li>
</ul>
<hr>
<p>1-17 收发两端之间的传输距离为1000km，信号在媒体上的传播速率为2×10^8^m/s。试计算以下两种情况的发送时延和传播时延：</p>
<p>（1）数据长度为x^7^ bit,数据发送速率为100kb/s。</p>
<p>（2）数据长度为10^3^bit,数据发送速率为1Gb/s。从上面的计算中可以得到什么样的结论？</p>
<p><img src="10.png"></p>
<hr>
<p>1-19 长度为100字节的应用层数据交给传输层传送，需加上20字节的TCP首部。再交给网络层传送，需加上20字节的IP首部。最后交给数据链路层的以太网传送，加上首部和尾部共18字节。试求数据的传输效率。数据的传输效率是指发送的应用层数据除以所发送的总数据（即应用数据加上各种首部和尾部的额外开销）。若应用层数据长度为1000字节，数据的传输效率是多少？</p>
<p><img src="11.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习2</title>
    <url>/2021/12/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A02/</url>
    <content><![CDATA[<h3 id="2-3-传输媒体的类型"><a href="#2-3-传输媒体的类型" class="headerlink" title="2.3 传输媒体的类型"></a>2.3 传输媒体的类型</h3><ul>
<li>传输媒体可分为两大类：<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong></li>
<li>在导引型传播媒体中，电磁波被导引沿着固体媒介（铜线或光纤）传播</li>
<li>非导引型传输媒体就是指自由空间。在非导引型传输媒体中，电磁波传输常称为无线传输</li>
</ul>
<p><img src="1.png"></p>
<h3 id="2-4-频分复用、时分复用、和统计时分复用"><a href="#2-4-频分复用、时分复用、和统计时分复用" class="headerlink" title="2.4 频分复用、时分复用、和统计时分复用"></a>2.4 频分复用、时分复用、和统计时分复用</h3><ul>
<li>多路复用技术：由于一条传输线路的能力远远超过传输一个用户信号所需的能力，为了提高线路利用率，经常让多个信号同时共用一条物理线路。</li>
</ul>
<h4 id="常用的多路复用技术："><a href="#常用的多路复用技术：" class="headerlink" title="常用的多路复用技术："></a>常用的多路复用技术：</h4><ul>
<li>频分多路复用 FDM </li>
<li>时分多路复用 TDM</li>
<li>波分多路复用 WDM</li>
<li>码分复用 CDMA</li>
</ul>
<h5 id="频分复用"><a href="#频分复用" class="headerlink" title="频分复用"></a>频分复用</h5><ul>
<li>常用于载波电话系统、电视等</li>
</ul>
<p><img src="2.png"></p>
<h5 id="时分复用"><a href="#时分复用" class="headerlink" title="时分复用"></a>时分复用</h5><p><img src="3.png"></p>
<h5 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h5><ul>
<li>按需分配媒体资源，提高了传输媒体的利用率</li>
</ul>
<p><img src="4.png"></p>
<h5 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h5><ul>
<li><strong>波分复用就是光的频分复用</strong>，即在一根光纤上传输多路光载波信号</li>
<li>密集波分复用是一种支持巨大数量信道的系统</li>
<li>波分复用技术可以进一步提高光纤的传输容量，满足通信需求量的迅速增长和多媒体通信</li>
</ul>
<p><img src="5.png"></p>
<h5 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h5><p><img src="6.png"></p>
<h3 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h3><p>数据和信号</p>
<ul>
<li>数据分为：模拟数据和数字数据</li>
<li>模拟数据：在一定的数据区间内可连续取值的数据，即连续变化的数据</li>
<li>数字数据：只能取离散数值的数据</li>
<li>信号分为：模拟信号和数字信号</li>
<li>信号发送方式：模拟信号发送（模拟信道）和数字信号发送（数字信道）</li>
</ul>
<h4 id="模拟传输"><a href="#模拟传输" class="headerlink" title="模拟传输"></a>模拟传输</h4><p><img src="7.png"></p>
<p>调制：利用调制信号对载波信号进行调制，使载波信号的某些量随调制信号的规律变化的过程</p>
<h4 id="数字传输"><a href="#数字传输" class="headerlink" title="数字传输"></a>数字传输</h4><p><img src="8.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习3</title>
    <url>/2021/12/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A03/</url>
    <content><![CDATA[<h3 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h3><p><img src="1.png"></p>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><ul>
<li>封装成帧就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧</li>
<li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。首部和尾部还包含控制信息</li>
</ul>
<p><img src="2.png"></p>
<h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><ul>
<li>如果数据中的某个字节的二进制代码恰好和SOH或EOT一样，数据链路层就会错误地找到帧的边界</li>
</ul>
<p><img src="3.png"></p>
<ul>
<li>解决方法：字节填充或字符填充</li>
<li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”（其十六进制编码是1B）</li>
<li>接收端的数据链路层在讲数据送往网络层之前删除插入的转义字符</li>
<li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个</li>
</ul>
<p><img src="4.png"></p>
<h4 id="差错检验"><a href="#差错检验" class="headerlink" title="差错检验"></a>差错检验</h4><ul>
<li><p>在数据链路层传输的帧中，广泛使用了循环冗余检验CRC(Cyclic Redundancy Check)的检错计数</p>
<p><img src="5.png"></p>
</li>
</ul>
<p><img src="6.png"></p>
<p><img src="7.png"></p>
<p><img src="8.png"></p>
<p><img src="9.png"></p>
<h3 id="PPP协议"><a href="#PPP协议" class="headerlink" title="PPP协议"></a>PPP协议</h3><ul>
<li>首部<strong>4字节</strong>，尾部<strong>2字节</strong></li>
</ul>
<p><img src="10.png"></p>
<ul>
<li>PPP用在<strong>异步传输</strong>时，就是用一种特殊的<strong>字符填充法</strong></li>
<li>PPP用在<strong>同步传输</strong>链路时，协议规定采用硬件来完成<strong>比特填充</strong></li>
</ul>
<p>字符填充法</p>
<p><img src="12.png"></p>
<p><strong>零比特填充</strong></p>
<p><img src="11.png"></p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><p><img src="13.png"></p>
<p><img src="14.png"></p>
<p><img src="15.png"></p>
<p><img src="16.png"></p>
<p><img src="17.png"></p>
<h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><p><img src="18.png"></p>
<h5 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h5><p><img src="19.png"></p>
<h3 id="未定义"><a href="#未定义" class="headerlink" title="未定义"></a>未定义</h3><h4 id="10-BASE-T"><a href="#10-BASE-T" class="headerlink" title="10 BASE-T"></a>10 BASE-T</h4><p><img src="18.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习5</title>
    <url>/2021/12/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A05/</url>
    <content><![CDATA[<p><img src="1.png"></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软件制造工程复习</title>
    <url>/2021/11/17/%E8%BD%AF%E4%BB%B6%E5%88%B6%E9%80%A0%E5%B7%A5%E7%A8%8B%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="软件危机"><a href="#软件危机" class="headerlink" title="软件危机"></a>软件危机</h3><ul>
<li>软件危机是指在计算机软件的开发和维护过程中所遇到的一系列严重问题</li>
</ul>
<h3 id="软件工程"><a href="#软件工程" class="headerlink" title="软件工程"></a>软件工程</h3><ul>
<li>软件工程：是指导计算机软件开发和维护的一门工程学科。</li>
</ul>
<ul>
<li><p>软件工程的概念是哪一年提出的？<strong>1968年</strong></p>
</li>
<li><p>瀑布模型的关键不足在于：<strong>不能适应需求的动态变更</strong></p>
</li>
<li><p>软件可行性研究实质上是要进行一次<strong>简化、压缩的</strong>需求分析和设计过程</p>
</li>
<li><p>软件制造工程活动主要关注<strong>编码</strong>，也包括详细设计、单元测试</p>
</li>
<li><p>结构化设计是一种<strong>面向数据流</strong>的设计方法</p>
</li>
<li><p>一个项目是否开发,从经济上来说是否可行,归根结底是取决于对<strong>成本的估算</strong></p>
</li>
<li><p>在面向对象的设计中，我们应遵循的设计准则除了模块化、抽象、低耦合、高内聚以外，还有<strong>信息隐蔽</strong></p>
</li>
<li></li>
</ul>
<h3 id="软件生命周期"><a href="#软件生命周期" class="headerlink" title="软件生命周期"></a>软件生命周期</h3><p><img src="1.png"></p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h4 id="低质量子程序"><a href="#低质量子程序" class="headerlink" title="低质量子程序"></a>低质量子程序</h4><p><img src="2.png"></p>
<h4 id="高内聚低耦合"><a href="#高内聚低耦合" class="headerlink" title="高内聚低耦合"></a>高内聚低耦合</h4><p><img src="3.png"></p>
<p><img src="4.png"></p>
<h4 id="创建类的原因"><a href="#创建类的原因" class="headerlink" title="创建类的原因"></a>创建类的原因</h4><ul>
<li>为现实世界中的对象建模</li>
<li>为抽象的对象建模</li>
<li>降低复杂度</li>
<li>隔离复杂度</li>
<li>隐藏实现细节</li>
<li>限制变动的影响范围</li>
<li>隐藏全局数据</li>
<li>让参数传递更顺畅</li>
<li>建立中心控制点</li>
<li>让代码更易于重用</li>
<li>为程序族做计划</li>
<li>把相关操作包装到一起</li>
<li>实现某种特定的重构</li>
</ul>
<h4 id="注释基本原则"><a href="#注释基本原则" class="headerlink" title="注释基本原则"></a><strong>注释基本原则</strong></h4><ul>
<li>注释应该增加代码的清晰度。代码注释的目的是要使代码更易于被其他开发人员等理解</li>
<li>避免使用装饰性内容</li>
<li>保持注释的简洁</li>
<li>注释信息不仅要包含代码的功能，还应给出原因</li>
<li>不要为了注释而注释</li>
<li>除变量定义等较短语句的注释可以使用行尾注释外，其他注释避免使用行尾注释</li>
</ul>
<h4 id="命名的基本原则"><a href="#命名的基本原则" class="headerlink" title="命名的基本原则"></a>命名的基本原则</h4><ul>
<li><p>名字应能反映它所代表的实际东西，应有一定<strong>实际意义</strong></p>
</li>
<li><p>使用可以准确说明变量/字段/类/接口/包等的完整的<strong>英文描述符</strong></p>
</li>
<li><p>采用该领域的<strong>术语</strong></p>
</li>
<li><p>采用<strong>大小写混合</strong>，提高名字的可读性</p>
</li>
<li><p>尽量<strong>少用缩写</strong></p>
</li>
<li><p><strong>避免</strong>使用<strong>长名字</strong></p>
</li>
<li><p><strong>避免</strong>使用<strong>相似</strong>或者仅在大小写上有区别的名字</p>
</li>
</ul>
<h4 id="四种编程命名规范"><a href="#四种编程命名规范" class="headerlink" title="四种编程命名规范"></a>四种编程命名规范</h4><ul>
<li>匈牙利命名法</li>
<li>驼峰式命名法</li>
<li>帕斯卡命名法</li>
<li>下划线命名法</li>
</ul>
<h4 id="版本控制的好处"><a href="#版本控制的好处" class="headerlink" title="版本控制的好处"></a>版本控制的好处</h4><ul>
<li>便于团队代码共享</li>
<li>保证整个团队使用统一的代码版本</li>
<li>能获得版本控制工具中保存的任何版本</li>
<li>能够把出错或误操作的最新版的项目恢复到正确的历史版本</li>
<li>快速的集成</li>
</ul>
<h4 id="异常的概念"><a href="#异常的概念" class="headerlink" title="异常的概念"></a>异常的概念</h4><ul>
<li>异常是指把代码中的错误或异常事件传递给调用方代码的一种特殊手段</li>
</ul>
<p>异常的基本结构</p>
<ul>
<li>子程序使用throw抛出一个异常对象，在被调用链上层其他子程序的try-catch语句捕获</li>
</ul>
<h4 id="防御式编程"><a href="#防御式编程" class="headerlink" title="防御式编程"></a>防御式编程</h4><ul>
<li>防御式编程的主要思想是：子程序不因传入错误数据而被破坏，哪怕是由其它子程序产生的错误数据</li>
<li>其核心是承认程序内部都会有问题，都需要被修改，这是保护的基础</li>
<li>防御式编程是针对程序外部的保护</li>
</ul>
<ol>
<li>保护程序免遭非法输入数据的破坏</li>
<li>断言</li>
<li>错误处理</li>
<li>异常</li>
<li>隔离程序</li>
<li>辅助调试代码</li>
</ol>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><ul>
<li><p>软件测试是为了<strong>发现错误</strong>而执行程序的过程</p>
</li>
<li><p>模块并不是一个独立的程序，因此必须为每个单元测试开发<strong>驱动程序</strong>和<strong>存根程序</strong></p>
</li>
</ul>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h4 id="软件维护的定义"><a href="#软件维护的定义" class="headerlink" title="软件维护的定义"></a>软件维护的定义</h4><ul>
<li>所谓软件维护就是在软件已经交付使用之后，为了改正错误或满足新的需求而修改软件的过程</li>
</ul>
<p>可分为4项活动：</p>
<ul>
<li><strong>改正性维护</strong>：把诊断和改正错误的过程称为改正性维护   17%~21%</li>
<li><strong>适应性维护</strong>：为了和变化了的环境适当地配合而进行的<strong>修改软件</strong>的活动，是既必要又经常的维护活动。   18%~25%</li>
<li><strong>完善性维护</strong>：为了满足用户提出的增加新功能或修改已有功能的要求和一般性的改进要求  50%~66%</li>
<li><strong>预防性维护</strong>：为了改善未来的可维护性或可靠性而修改软件的工作    4%</li>
</ul>
<h4 id="决定软件可维护性的因素"><a href="#决定软件可维护性的因素" class="headerlink" title="决定软件可维护性的因素"></a>决定软件可维护性的因素</h4><ul>
<li>可理解性</li>
<li>可测试性</li>
<li>可修改性</li>
<li>可靠性</li>
<li>可移植性</li>
<li>可使用性</li>
<li>效率</li>
</ul>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ul>
<li><p>因计算机硬件和软件环境的变化而作出的修改软件的过程称为<strong>适应性维护</strong></p>
</li>
<li><p>下列属于维护阶段的文档是 <strong>软件问题报告</strong></p>
</li>
<li><p>软件按照设计的要求，在规定的时间内和条件下达到不出故障，持续运行的要求的质量特性成为<strong>可靠性</strong></p>
</li>
<li><p><strong>确认测试</strong>又称有效性测试。验证软件的<strong>功能、性能及其它特性</strong>是否与<strong>用户的要求</strong>一致</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/2021/10/21/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h5 id="1-软件工程是从管理和技术两方面研究如何更好地开发维护计算机软件的一门新兴学科。（软件工程是指导计算机软件开发和维护的一门工程学科）"><a href="#1-软件工程是从管理和技术两方面研究如何更好地开发维护计算机软件的一门新兴学科。（软件工程是指导计算机软件开发和维护的一门工程学科）" class="headerlink" title="1. 软件工程是从管理和技术两方面研究如何更好地开发维护计算机软件的一门新兴学科。（软件工程是指导计算机软件开发和维护的一门工程学科）"></a>1. 软件工程是从管理和技术两方面研究如何更好地开发维护计算机软件的一门新兴学科。（软件工程是指导计算机软件开发和维护的一门工程学科）</h5><h5 id="软件危机具体表现："><a href="#软件危机具体表现：" class="headerlink" title="软件危机具体表现："></a>软件危机具体表现：</h5><ul>
<li>对软件开发成本和进度估计常常很不准确</li>
<li>软件产品的质量往往靠不住</li>
<li>软件常常是不可维护的</li>
<li>软件通常没有适当的文档资料</li>
<li>用户对已完成的软件系统不满意现象经常发生</li>
<li>软件成本在计算机系统总成本中所占比例逐年上升</li>
<li>软件开发生产率提高速度远远更不上计算机应用迅速普及深入的趋势</li>
</ul>
<h5 id="产生软件危机的原因："><a href="#产生软件危机的原因：" class="headerlink" title="产生软件危机的原因："></a>产生软件危机的原因：</h5><ul>
<li>软件本身特点</li>
<li>软件开发维护方法不正确</li>
</ul>
<h5 id="解决软件危机方法：既要有技术措施，又要有必要的组织管理措施。"><a href="#解决软件危机方法：既要有技术措施，又要有必要的组织管理措施。" class="headerlink" title="解决软件危机方法：既要有技术措施，又要有必要的组织管理措施。"></a>解决软件危机方法：既要有技术措施，又要有必要的组织管理措施。</h5><h5 id="软件工程的基本原理"><a href="#软件工程的基本原理" class="headerlink" title="软件工程的基本原理"></a>软件工程的基本原理</h5><ul>
<li>用分阶段的生命周期计划严格管理</li>
<li>坚持进行阶段评审</li>
<li>采用严格的产品控制</li>
<li>采用现代程序设计技术</li>
<li>结果应能清楚的审查</li>
<li>开发的小组成员应该少而精</li>
<li>承认不断改进软件工程实践的必要性</li>
</ul>
<h5 id="方法学（范形）："><a href="#方法学（范形）：" class="headerlink" title="方法学（范形）："></a>方法学（范形）：</h5><ul>
<li>定义：生命周期全过程使用的一整套技术方法的集合</li>
<li>三要素：方法、工具、过程<h5 id="传统方法学也称生命周期方法学或者结构化范型，通过结构化技术完成软件开发各任务。这种方法学把软件生命周期分成各个不同阶段，并一一完成。（对问题抽象分析开始，一个阶段一个阶段顺序开发）"><a href="#传统方法学也称生命周期方法学或者结构化范型，通过结构化技术完成软件开发各任务。这种方法学把软件生命周期分成各个不同阶段，并一一完成。（对问题抽象分析开始，一个阶段一个阶段顺序开发）" class="headerlink" title="传统方法学也称生命周期方法学或者结构化范型，通过结构化技术完成软件开发各任务。这种方法学把软件生命周期分成各个不同阶段，并一一完成。（对问题抽象分析开始，一个阶段一个阶段顺序开发）"></a>传统方法学也称生命周期方法学或者结构化范型，通过结构化技术完成软件开发各任务。这种方法学把软件生命周期分成各个不同阶段，并一一完成。（对问题抽象分析开始，一个阶段一个阶段顺序开发）</h5></li>
</ul>
<h5 id="面向对象方法学四个要点："><a href="#面向对象方法学四个要点：" class="headerlink" title="面向对象方法学四个要点："></a>面向对象方法学四个要点：</h5><ul>
<li>把对象作为融合了数据以及在数据上的操作行为的同意的软件构建</li>
<li>把所有对象划分为类</li>
<li>按照父类（基类）与子类（派生类）的关系，把若干的相关类组成一个层次结构的系统</li>
<li>对象彼此间仅能同各国发送消息互相联系</li>
</ul>
<h5 id="软件生命周期："><a href="#软件生命周期：" class="headerlink" title="软件生命周期："></a>软件生命周期：</h5><p>组成：软件定义、软件开发、运行维护</p>
<pre><code class="hljs">软件定义时期三阶段：问题定义、可行性研究、需求分析
</code></pre>
<p>各个阶段：</p>
<ul>
<li>问题定义</li>
<li>可行性研究</li>
<li>需求分析</li>
<li>总体设计</li>
<li>详细设计</li>
<li>编码和单元测试</li>
<li>综合测试</li>
</ul>
<ol>
<li></li>
</ol>
<p>待补充….</p>
]]></content>
      <categories>
        <category>软件工程</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>软件测试复习</title>
    <url>/2021/12/15/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h4 id="软件测试的定义"><a href="#软件测试的定义" class="headerlink" title="软件测试的定义"></a>软件测试的定义</h4><p>三个角度：需求、寻找错误、质量保证</p>
<ul>
<li>IEEE 在1983年将软件测试定义为“<strong>使用人工或自动手段运行或测定某个系统的过程</strong>，其目的在于检验它是否满足规定的<strong>需求</strong>或是弄清预期结果与实际结果之间的差别”，该定义明确地提出了软件测试以检验是否满足<strong>需求</strong>为目标。</li>
<li>Myers则认为软件测试“<strong>是为了发现错误而执行程序的过程</strong>”，明确提出了“<strong>寻找错误</strong>”是测试目的</li>
<li>从软件<strong>质量保证</strong>的角度看，<strong>软件测试是一种重要的软件质量保证活动</strong>，其动机是通过一些经济、高效的方法，捕捉软件中的错误，从而达到保证软件内在质量的目的</li>
</ul>
<p>软件测试是一个在可控环境中执行软件的过程，目的就是为了验证软件<strong>是否按照预期运行</strong></p>
<h4 id="软件测试生命周期"><a href="#软件测试生命周期" class="headerlink" title="软件测试生命周期"></a>软件测试生命周期</h4><p>引入程序错误阶段：需求规格说明、设计、编码阶段 </p>
<p>通过测试发现错误阶段</p>
<p>清除程序错误阶段：缺陷分类、缺陷隔离、解决缺陷</p>
<ul>
<li>结束每个阶段时都要进行严格的技术审查和管理复审</li>
</ul>
<p><img src="1.png"></p>
<h4 id="软件开发与测试模型"><a href="#软件开发与测试模型" class="headerlink" title="软件开发与测试模型"></a>软件开发与测试模型</h4><h5 id="软件开发与测试V模型"><a href="#软件开发与测试V模型" class="headerlink" title="软件开发与测试V模型"></a>软件开发与测试V模型</h5><ul>
<li>V模型左边下降的部分为开发过程各阶段：需求分析、设计、编码</li>
<li>V模型右边上升的部分为测试过程的各个阶段：单元测试、集成测试、确认测试、系统测试</li>
</ul>
<p>单元测试的目的：根据<strong>详细设计说明书</strong>来验证和确认每个单元模块是否符合预期的要求，发现编码过程中可能存在的各种错误</p>
<p>集成测试的目的：根据<strong>概要设计</strong>来验证和确认各个模块是否已正确集成到一起，主要是检查各单元与其它模块之间的接口上可能存在的错误</p>
<p>确认测试的目的：根据<strong>需求分析</strong>来验证和确认软件是否符合用户的预期要求。</p>
<p>系统测试的目的：根据<strong>需求定义</strong>，验证和确认系统作为一个整体是否能够正常有效地运行 。</p>
<p><img src="2.png"></p>
<h5 id="软件开发与测试W模型"><a href="#软件开发与测试W模型" class="headerlink" title="软件开发与测试W模型"></a>软件开发与测试W模型</h5><ul>
<li>W测试伴随整个软件开发周期，<strong>测试的对象不仅仅时程序还包括需求和设计</strong></li>
<li>优点：每个软件开发活动结束后就可以执行相应的测试，如：在需求分析结束后，就可以进行需求分析测试</li>
</ul>
<p><img src="3.png"></p>
<h5 id="软件开发与测试H模型"><a href="#软件开发与测试H模型" class="headerlink" title="软件开发与测试H模型"></a>软件开发与测试H模型</h5><p>与前两种模型相比，H模型充分地体现了测试过程,演示了在整个生产周期中, 某个(测试) 层次上的一次测试“微循环”(可以看作是一个流程在时间上的最小构成单位)</p>
<p>H模型揭示了：</p>
<ul>
<li>软件测试不仅仅指测试的执行，还包括很多其他的活动</li>
<li>软件测试是一个独立的流程，贯穿产品的整个开发周期，与其他流程并发进行</li>
<li>软件测试要尽早准备、尽早执行</li>
<li>软件测试根据被测物的不同时分层次的。不同层次的测试活动可以是按照某个次序先后进行的，但也可能是反复的</li>
</ul>
<p><img src="4.png"></p>
<h4 id="软件测试相关术语"><a href="#软件测试相关术语" class="headerlink" title="软件测试相关术语"></a>软件测试相关术语</h4><h5 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h5><p>程序员在编写代码时会出错，我们把这种错误称之为bug。随着开发过程的进行，错误会不断的放大</p>
<h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><p>缺陷是错误的结果或表现。缺陷可以分为过错缺陷和遗漏缺陷。</p>
<ul>
<li>过错缺陷：把某些信息输入到了不正确的表现方式中</li>
<li>遗漏缺陷：没有输入正确的信息</li>
</ul>
<p>tips：遗漏缺陷更难检查和解决，但通常评审常常可以找出遗漏缺陷</p>
<h5 id="失效"><a href="#失效" class="headerlink" title="失效"></a>失效</h5><p>一种是过错缺陷对应的失效，一种是遗漏缺陷对应的失效。</p>
<ul>
<li>遗漏失效最难处理，主要依赖有效的评审，发现遗漏缺陷来避免遗漏失效的产生</li>
</ul>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><ul>
<li>测试是一项采用测试用例执行软件的活动，在这项活动中的某个系统或组成的部分将在特定条件下运行，然后观察并记录结果，以便对系统或组成部分进行评价</li>
<li>测试活动有两个目标：找出失效、显示软件执行正确</li>
</ul>
<h5 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h5><ul>
<li>测试用例是为特定的目的而设计的一组测试输入、执行条件和预期的结果</li>
<li>测试用例是执行的最小实体</li>
</ul>
<h5 id="回归测试"><a href="#回归测试" class="headerlink" title="回归测试"></a>回归测试</h5><ul>
<li><p>回归测试的目的是为了测试由于修正缺陷而更新的应用程序，以确保彻底修正了上一个版本的缺陷，并且没有引入新的软件缺陷。</p>
</li>
<li><p>回归测试分为：完全回归测试和部分回归测试</p>
<ul>
<li>完全回归测试时把所有修正的缺陷进行验证</li>
<li>测试时间紧张、缺陷数量巨大可以进行部分回归测试</li>
</ul>
</li>
</ul>
<h4 id="软件测试技术分类"><a href="#软件测试技术分类" class="headerlink" title="软件测试技术分类"></a>软件测试技术分类</h4><h5 id="是否需要执行被测软件"><a href="#是否需要执行被测软件" class="headerlink" title="是否需要执行被测软件"></a>是否需要执行被测软件</h5><p>​    从<strong>是否需要执行被测软件</strong>的角度可分为：静态测试和动态测试</p>
<h6 id="静态测试"><a href="#静态测试" class="headerlink" title="静态测试"></a>静态测试</h6><ul>
<li><strong>不</strong>利用计算<strong>运行被测软件</strong>，而是<strong>通过其他手段</strong>到达测试目的的方法称为静态测试</li>
<li>主要方法有：代码检查、走查、桌面检查、同行评分<ul>
<li>人工测试：代码检查、走查</li>
</ul>
</li>
</ul>
<h5 id="软件测试用例设计方法角度"><a href="#软件测试用例设计方法角度" class="headerlink" title="软件测试用例设计方法角度"></a>软件测试用例设计方法角度</h5><p>从软件测试用例设计方法的角度：黑盒测试和白盒测试</p>
<h6 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h6><ul>
<li>是一种从用户观点出发的测试，又称为功能测试、数据驱动测试和基于规格说明的测试</li>
<li>基于产品的功能，目的是检查程序各个功能是否实现，并检查其中的功能错误，则这种测试方法称为黑盒测试方法</li>
</ul>
<h6 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h6><ul>
<li>基于产品的内部结构进行测试，检查内部操作是否按规定执行，软件各个部分功能是否得到充分使用</li>
<li>白盒测试又称为结构测试、逻辑驱动测试或基于程序的测试。</li>
</ul>
<h5 id="软件测试的策略和过程分类"><a href="#软件测试的策略和过程分类" class="headerlink" title="软件测试的策略和过程分类"></a>软件测试的策略和过程分类</h5><p>按照软件测试的策略和过程分类：单元测试、集成测试、确认测试、系统测试、验收测试</p>
<ul>
<li><p>单元测试时针对每个单元的测试，是软件测试的最小单位。确保每个模块能正常工作。<strong>单元测试多数使用白盒测试</strong>，用以发现内部错误</p>
</li>
<li><p>集成测试是对已测试过的模块进行组装，进行集成测试的目的主要在于检验与软件设计相关的程序结构问题。<strong>集成测试一般通过黑盒测试</strong>方法来完成。确认测试是完成集成测试后开始的，它对开发工作初期制定的确认准则进行检验</p>
</li>
<li><p>确认测试是检验所开发的软件能否满足所有功能和性能需求的最后手段，通常<strong>采用黑盒测试</strong>方法</p>
</li>
<li><p>系统测试的主要任务是检测被测软件与系统的其他部分的协调性</p>
</li>
</ul>
<h4 id="软件测试的目的"><a href="#软件测试的目的" class="headerlink" title="软件测试的目的"></a>软件测试的目的</h4><ul>
<li>软件测试是为了发现错误而执行程序的过程</li>
<li>测试是为了证明程序有错，而不是证明程序无错</li>
<li>一个好的测试用例在于他能发现至今为止未发现的错误</li>
<li>一个成功的测试是发现了至今未发现的错误的测试</li>
</ul>
<h4 id="软件测试的原则"><a href="#软件测试的原则" class="headerlink" title="软件测试的原则"></a>软件测试的原则</h4><ul>
<li><p>尽早地和不断地进行软件测试</p>
</li>
<li><p>不可能完全的测试</p>
</li>
<li><p>增量测试，由小到大</p>
</li>
<li><p>避免测试自己的程序</p>
</li>
<li><p>设计周密的测试用例</p>
</li>
</ul>
<h4 id="白盒测试-1"><a href="#白盒测试-1" class="headerlink" title="白盒测试"></a>白盒测试</h4><h5 id="白盒测试别名"><a href="#白盒测试别名" class="headerlink" title="白盒测试别名"></a>白盒测试别名</h5><ul>
<li> 结构测试</li>
<li>逻辑驱动测试</li>
<li>基于程序的测试</li>
</ul>
<h5 id="白盒测试可用测试类型"><a href="#白盒测试可用测试类型" class="headerlink" title="白盒测试可用测试类型"></a>白盒测试可用测试类型</h5><ul>
<li>单元测试</li>
<li>集成测试</li>
<li>回归测试(也可以黑盒)</li>
</ul>
<h5 id="白盒测试与调试的异同"><a href="#白盒测试与调试的异同" class="headerlink" title="白盒测试与调试的异同"></a>白盒测试与调试的异同</h5><ul>
<li>白盒测试和调试的最终目的都是让被测应用可以正常安全的运行，都是保证软件质量过程的一个环节。</li>
<li>从承担的任务来看，白盒测试同其他类型测试一样，它的任务是发现所开发的项目中的缺陷；但是调试不属于测试，其任务是纠正软件的缺陷</li>
<li>从最终的结果来看，白盒测试有预知的结果，不可预知的只是程序是否可以通过测试，并且成功测试的结果是发现错误的症状，从而引起调试的进行；调试的结果是消除项目中的错误</li>
<li>从执行结果上来看，软件测试只是发现程序中有错误的迹象，没有错误定位，也不需要找到出错原因；软件调试是根据测试报告的记录，在软件测试后纠正错误的工作，包括确定错误位置和修改错误</li>
</ul>
<h5 id="白盒测试的分类"><a href="#白盒测试的分类" class="headerlink" title="白盒测试的分类"></a>白盒测试的分类</h5><ul>
<li>逻辑覆盖测试</li>
<li>边界值测试</li>
<li>基本路径测试</li>
<li>循环语句测试</li>
<li>程序插桩测试</li>
<li>数据流测试</li>
<li>变异测试</li>
</ul>
<h6 id="逻辑覆盖测试-不考大题"><a href="#逻辑覆盖测试-不考大题" class="headerlink" title="逻辑覆盖测试(不考大题)"></a>逻辑覆盖测试(不考大题)</h6><ul>
<li><p>语句覆盖</p>
<p><img src="5.png"><img src="6.png"></p>
</li>
<li><p>判定覆盖</p>
<p><img src="7.png"><img src="8.png"></p>
</li>
<li><p>条件覆盖</p>
<p><img src="9.png"><img src="10.png"></p>
</li>
<li><p>判定-条件覆盖</p>
<p><img src="11.png"><img src="12.png"></p>
</li>
<li><p>路径覆盖</p>
<p><img src="13.png"></p>
</li>
</ul>
<h6 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h6><p><img src="14.png"></p>
<h6 id="基本路径测试"><a href="#基本路径测试" class="headerlink" title="基本路径测试"></a>基本路径测试</h6><p>做题步骤：</p>
<p>① 以设计或代码为基础，画出<strong>控制流图</strong></p>
<p>② 确定所得程序图的环形复杂度V(G)</p>
<p>③ 确定线性独立的路径的一个基本集。V(G)的值提供了路径的数量</p>
<p>④ 准备测试用例，强制执行基本集中的每条路径</p>
<p>⑤ 执行每个测试用例，并和期望值比较，测试者可以确定在程序中的所有语句至少执行一次</p>
<p>​    <strong>计算复杂度</strong></p>
<ol>
<li>控制流图中区域的数量对应于环形的复杂度</li>
<li>控制流图G的环形复杂度——V(G) = E - N + 2，E表示控制流图中边的数量，N表示节点的数量</li>
<li>V(G) = P + 1,P是控制流图G中判定节点的数量</li>
</ol>
<p>​    <strong>程序流图条件需要拆开</strong>(and|or)</p>
<p>​    <img src="15.png"></p>
<p><img src="16.png"></p>
<h6 id="作业1-基本路径测试"><a href="#作业1-基本路径测试" class="headerlink" title="作业1(基本路径测试)"></a>作业1(基本路径测试)</h6><p>(4)</p>
<p><img src="17.png"><img src="18.png"></p>
<p>(6)下面是选择排序的程序，将数组中的数据按从小到大的顺序进行排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select_sort</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a[])</span></span><br><span class="hljs-function"> </span>&#123;<br>        <span class="hljs-keyword">int</span>  i, j, k, t, n;<br>        n = a.length;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>            k = i;<br>            <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (a [j] &lt; a [k]) &#123;<br>                    k = j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i != k) &#123;<br>                t = a[k];<br>                a[k] = a[i];<br>                a[i] = t;<br>            &#125;<br>      &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>1、计算此程序段的圈复杂度</p>
<p>2、用基本路径法给出测试路径</p>
<p>3、为各测试路径设计测试用例</p>
<p>解：</p>
<p><img src="19.png"><img src="20.png"></p>
<p>环路复杂度为5 （判断节点+1） </p>
<p>路径为 （根据控制流图的节点设计不同，可能编号方式也不同，但是基本流程是类似的）</p>
<p>1、2、9</p>
<p>1、2、3、4、5、3、6、8、2、9</p>
<p>1、2、3、4、10、5、3、6、8、2、9</p>
<p>1、2、3、6、7、8、2、9</p>
<p>1、2、3、6、8、2、9</p>
<p>测试用例只要覆盖以上5条路径的数值就可以</p>
<h6 id="循环语句测试"><a href="#循环语句测试" class="headerlink" title="循环语句测试"></a>循环语句测试</h6><p><img src="21.png"></p>
<h6 id="程序插桩测试"><a href="#程序插桩测试" class="headerlink" title="程序插桩测试"></a>程序插桩测试</h6><h4 id="黑盒测试-1"><a href="#黑盒测试-1" class="headerlink" title="黑盒测试"></a>黑盒测试</h4><h5 id="黑盒测试的别名"><a href="#黑盒测试的别名" class="headerlink" title="黑盒测试的别名"></a>黑盒测试的别名</h5><ul>
<li><p>功能测试</p>
</li>
<li><p>行为测试</p>
</li>
<li><p>数据驱动测试</p>
</li>
<li><p>基于规格说明的测试</p>
</li>
</ul>
<h5 id="常用的黑盒测试用例设计方法"><a href="#常用的黑盒测试用例设计方法" class="headerlink" title="常用的黑盒测试用例设计方法"></a>常用的黑盒测试用例设计方法</h5><ul>
<li><p>等价类划分法</p>
</li>
<li><p>边界值分析法</p>
</li>
<li><p>因果图方法</p>
</li>
<li><p>决策表</p>
</li>
<li><p>错误推测</p>
<p>….</p>
</li>
</ul>
<h6 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h6><p><img src="22.png"></p>
<p><img src="23.png"></p>
<p><strong>例题1</strong></p>
<p><img src="24.png"></p>
<p><img src="25.png"></p>
<p><img src="26.png"></p>
<p><img src="27.png"></p>
<p><strong>例题2</strong></p>
<p><img src="28.png"><img src="29.png"></p>
<p><img src="30.png"><img src="31.png"></p>
<h6 id="边界值分析-1"><a href="#边界值分析-1" class="headerlink" title="边界值分析"></a>边界值分析</h6><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><h5 id="单元测试与集成测试的区别"><a href="#单元测试与集成测试的区别" class="headerlink" title="单元测试与集成测试的区别"></a>单元测试与集成测试的区别</h5><ul>
<li><p>单元测试对象是实现具体功能的单元，一般对应<strong>详细设计</strong>中所描述的设计单元。往往在详细设计阶段把这些模块分配给不同的开发小组。集成测试是针对<strong>概要设计</strong>所包含的模块以及模块组合进行的测试</p>
</li>
<li><p>单元测试所使用的主要测试方法是<strong>基于代码的白盒测试</strong>。而集成测试所使用的主要测试方法是基于功能的黑盒测试</p>
</li>
<li><p>因为集成测试需要在所有要集成的模块都通过单元测试之后才能进行，也就是说在测试时间上，集成测试要晚于单元测试，单元测试的好坏直接影响着集成测试</p>
</li>
</ul>
<h5 id="单元测试与系统测试的区别"><a href="#单元测试与系统测试的区别" class="headerlink" title="单元测试与系统测试的区别"></a>单元测试与系统测试的区别</h5><ul>
<li>单元测试与系统测试的区别不仅仅在于测试的对象和测试的层次的不同，最重要的区别是测试的性质不同。在单元测试过程中，单元测试的执行早于系统测试，测试的是软件单元的具体实现、内部逻辑结构已经数据流向等。系统测试属于后期测试，主要是根据需求规格说明书进行的，是从用户角度来进行的功能测试和性能测试，证明系统是否满足用户的需求</li>
<li>单元测试中发现的错误容易进行定位，并且多个单元测试可以并行进行；而系统测试发现的错误比较难定位</li>
</ul>
<h5 id="单元测试环境"><a href="#单元测试环境" class="headerlink" title="单元测试环境"></a>单元测试环境</h5><ul>
<li><p>驱动模块（driver）:相当于所测模块的主程序。它接收测试数据，把这些数据传送给所测模块，最后再输出实际测试结果</p>
</li>
<li><p>桩模块（stub）:用于代替所测模块调用的子模块。桩模块可以进行少量的数据操作，不需要实现子模块的所有功能，但要根据需要来实现或代替子模块的一部分功能。</p>
</li>
</ul>
<p><strong>所测模块和与它相关的驱动模块及桩模块共同构成了一个“测试环境”</strong></p>
<p><img src="32.png"></p>
<p>好处：</p>
<ul>
<li><p><strong>能够同时测试包中所有的方法或模块，也可以方便的测试跟踪指定的模块或方法</strong></p>
</li>
<li><p><strong>能够联合使用所有测试用例对同一段代码执行测试，发现问题</strong></p>
</li>
<li><p><strong>便于回归测试</strong></p>
</li>
<li><p><strong>复用测试方法，使测试单元保持持久性</strong></p>
</li>
<li><p><strong>将测试代码与产品代码分开，使代码更清晰、简洁；提高测试代码与被测代码的可维护性。</strong></p>
</li>
</ul>
<h5 id="单元测试策略"><a href="#单元测试策略" class="headerlink" title="单元测试策略"></a>单元测试策略</h5><h6 id="自顶向下"><a href="#自顶向下" class="headerlink" title="自顶向下"></a>自顶向下</h6><p><strong>优点：</strong>可以在集成测试之前为系统提供早期的集成途径。由于详细设计一般都是自顶向下进行设计的，这样自顶向下的单元测试策略在顺序上同详细设计一致，因此测试可以与详细设计和编码工作重叠进行</p>
<p><strong>缺点：</strong>单元测试被桩模块控制，随着单元测试的不断进行，测试过程会<strong>越来越复杂</strong>，测试难度以及开发和维护的<strong>成本都不断增加</strong>；</p>
<p>tips：从测试成本上来考虑，不是最佳的单元测试</p>
<h6 id="自顶向上"><a href="#自顶向上" class="headerlink" title="自顶向上"></a>自顶向上</h6><p><strong>优点：</strong>不需要单独设计桩模块。无需依赖结构设计，可以直接从功能设计中获取测试用例；可以为系统提供早期的集成途径；<strong>在详细设计文档中缺少结构细节时可以使用该测试策略</strong></p>
<p><strong>缺点：</strong>随着单元测试的进行，测试过程会变得越来越复杂，测试周期延长，测试和维护的成本增加；不能与详细设计、编码同步进行。</p>
<p>tips：考虑对象或复用时，该策略较合理。而对于那些以高覆盖率为目标或软件开发时间紧张的软件项目来说不适用</p>
<h6 id="孤立的单元测试"><a href="#孤立的单元测试" class="headerlink" title="孤立的单元测试"></a>孤立的单元测试</h6><p><img src="33.png"></p>
<p><img src="34.png"></p>
<h5 id="测试的主要任务"><a href="#测试的主要任务" class="headerlink" title="测试的主要任务"></a>测试的主要任务</h5><ul>
<li><p>判断得到的结果是否正确</p>
</li>
<li><p>判断是否满足所有的边界条件</p>
</li>
<li><p>分析是否使用反向关联检查</p>
</li>
<li><p>分析是否能使用其他手段来交叉检查一下结果</p>
</li>
<li><p>分析是否可以强制一些错误的发生</p>
</li>
<li><p>分析模块接口</p>
</li>
<li><p><strong>分析局部数据结构</strong></p>
</li>
<li><p><strong>分析独立路径</strong></p>
</li>
<li><p>分析出错处理是否正确</p>
</li>
</ul>
<h5 id="单元测试的步骤"><a href="#单元测试的步骤" class="headerlink" title="单元测试的步骤"></a>单元测试的步骤</h5><p><img src="35.png"></p>
<h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><h5 id="集成测试与系统测试的区别"><a href="#集成测试与系统测试的区别" class="headerlink" title="集成测试与系统测试的区别"></a>集成测试与系统测试的区别</h5><ol>
<li><strong>测试对象</strong>：</li>
</ol>
<p>​        集成测试的测试对象时通过了单元测试的各个模块所集成起来的组件。</p>
<p>​        系统测试的对象除了软件之外，还有计算机硬件及相关的外围设备、数据采集和传输机构、计算机系统操作人员等的整个系统</p>
<ol start="2">
<li><strong>测试时间</strong></li>
</ol>
<p>​        集成测试介于单元测试和系统测试之间。测试时间上，集成测试先于系统测试</p>
<ol start="3">
<li><strong>测试方法</strong></li>
</ol>
<p>​        集成测试采用白盒测试和黑盒测试相结合的测试方法(灰盒测试)</p>
<p>​        系统测试通常使用黑盒测试</p>
<ol start="4">
<li><strong>测试内容</strong></li>
</ol>
<p>​        集成测试的主要内容就是各个单元模块之间的接口以及各个模块集成后所实现的功能。</p>
<p>​        系统测试的主要内容时整个系统的功能和性能</p>
<ol start="5">
<li><strong>测试目的</strong></li>
</ol>
<p>​        集成测试的主要目的是发现单元之间接口的错误，以及发现集成后的软件同软件概要设计说明不一致的地方，以便确保各个单元模块组合在一起后，能够达到软件概要设计说明的要求，协调一致的工作</p>
<p>​        系统测试的主要目的是通过与系统需求定义相比较之后发现软件与系统定义不符合或矛盾的地方</p>
<ol start="6">
<li><strong>测试角度</strong></li>
</ol>
<p>​        集成测试工作的开展更多的是站在测试工作人员的角度上，以便发现更多的问题。</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>导航</tag>
        <tag>软件测试技术</tag>
      </tags>
  </entry>
  <entry>
    <title>面经总结</title>
    <url>/2022/03/24/%E9%9D%A2%E7%BB%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>HashMap和ConcurrentHashMap，说一下扩容过程，有什么区别。</p>
<p>Java的泛型如何实现？泛型擦除是什么？</p>
<p>java的类加载为什么要使用双亲委派机制？</p>
<p>说一下MySQL事务隔离级别，默认的级别是什么？是否解决了幻读？如何解决？MVCC如何实现？</p>
<p>说一下https和http区别，说一下握手过程（这里说得比较详细，从非对称加密开始讲起。。）。</p>
]]></content>
  </entry>
</search>
